
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000631c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080064c8  080064c8  000074c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064fc  080064fc  00008074  2**0
                  CONTENTS
  4 .ARM          00000008  080064fc  080064fc  000074fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006504  08006504  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006504  08006504  00007504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006508  08006508  00007508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800650c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008074  2**0
                  CONTENTS
 10 .bss          00025d54  20000074  20000074  00008074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025dc8  20025dc8  00008074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001258c  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c5e  00000000  00000000  0001a630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  0001d290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e98  00000000  00000000  0001e558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e08  00000000  00000000  0001f3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016a10  00000000  00000000  000451f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e080e  00000000  00000000  0005bc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013c416  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000576c  00000000  00000000  0013c45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00141bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000074 	.word	0x20000074
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080064b0 	.word	0x080064b0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000078 	.word	0x20000078
 80001e8:	080064b0 	.word	0x080064b0

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004f0:	f005 fcfa 	bl	8005ee8 <initialise_monitor_handles>
    LTCD__Init();
 80004f4:	f000 f95e 	bl	80007b4 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004f8:	2000      	movs	r0, #0
 80004fa:	f000 f91b 	bl	8000734 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004fe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000502:	2000      	movs	r0, #0
 8000504:	f000 fa26 	bl	8000954 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 8000508:	f000 fa4c 	bl	80009a4 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 800050c:	4b02      	ldr	r3, [pc, #8]	@ (8000518 <ApplicationInit+0x2c>)
 800050e:	2201      	movs	r2, #1
 8000510:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000090 	.word	0x20000090

0800051c <LCD_First_Screen>:
}
#endif // COMPILE_TOUCH_FUNCTIONS

#if COMPILE_TOUCH_FUNCTIONS == 1
int LCD_First_Screen()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_WHITE);
 8000522:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000526:	2000      	movs	r0, #0
 8000528:	f000 fa14 	bl	8000954 <LCD_Clear>
	
	while (1) {
		
	
		LCD_Draw_Circle_Fill(120,60,50,LCD_COLOR_YELLOW);
 800052c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000530:	2232      	movs	r2, #50	@ 0x32
 8000532:	213c      	movs	r1, #60	@ 0x3c
 8000534:	2078      	movs	r0, #120	@ 0x78
 8000536:	f000 f9b9 	bl	80008ac <LCD_Draw_Circle_Fill>
		
		LCD_Draw_Circle_Fill(120,240,50,LCD_COLOR_RED);
 800053a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800053e:	2232      	movs	r2, #50	@ 0x32
 8000540:	21f0      	movs	r1, #240	@ 0xf0
 8000542:	2078      	movs	r0, #120	@ 0x78
 8000544:	f000 f9b2 	bl	80008ac <LCD_Draw_Circle_Fill>
		
	if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000548:	4815      	ldr	r0, [pc, #84]	@ (80005a0 <LCD_First_Screen+0x84>)
 800054a:	f000 fa36 	bl	80009ba <returnTouchStateAndLocation>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d1eb      	bne.n	800052c <LCD_First_Screen+0x10>
			int x = StaticTouchData.x;
 8000554:	4b12      	ldr	r3, [pc, #72]	@ (80005a0 <LCD_First_Screen+0x84>)
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	607b      	str	r3, [r7, #4]
			int y = StaticTouchData.y;
 800055a:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <LCD_First_Screen+0x84>)
 800055c:	885b      	ldrh	r3, [r3, #2]
 800055e:	603b      	str	r3, [r7, #0]
			if(x >= 70 && x <= 170 && y >= 190  && y <= 290){
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b45      	cmp	r3, #69	@ 0x45
 8000564:	dd0b      	ble.n	800057e <LCD_First_Screen+0x62>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2baa      	cmp	r3, #170	@ 0xaa
 800056a:	dc08      	bgt.n	800057e <LCD_First_Screen+0x62>
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	2bbd      	cmp	r3, #189	@ 0xbd
 8000570:	dd05      	ble.n	800057e <LCD_First_Screen+0x62>
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8000578:	dc01      	bgt.n	800057e <LCD_First_Screen+0x62>
				return 1;
 800057a:	2301      	movs	r3, #1
 800057c:	e00c      	b.n	8000598 <LCD_First_Screen+0x7c>
			}
			if(x >= 70 && x <= 170 && y >= 10 && y <= 110){
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2b45      	cmp	r3, #69	@ 0x45
 8000582:	ddd3      	ble.n	800052c <LCD_First_Screen+0x10>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2baa      	cmp	r3, #170	@ 0xaa
 8000588:	dcd0      	bgt.n	800052c <LCD_First_Screen+0x10>
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2b09      	cmp	r3, #9
 800058e:	ddcd      	ble.n	800052c <LCD_First_Screen+0x10>
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	2b6e      	cmp	r3, #110	@ 0x6e
 8000594:	dcca      	bgt.n	800052c <LCD_First_Screen+0x10>
				return 2;
 8000596:	2302      	movs	r3, #2
			}
		}
	}
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000090 	.word	0x20000090

080005a4 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08c      	sub	sp, #48	@ 0x30
 80005a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
 80005ae:	4b5a      	ldr	r3, [pc, #360]	@ (8000718 <LCD_GPIO_Init+0x174>)
 80005b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005b2:	4a59      	ldr	r2, [pc, #356]	@ (8000718 <LCD_GPIO_Init+0x174>)
 80005b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80005ba:	4b57      	ldr	r3, [pc, #348]	@ (8000718 <LCD_GPIO_Init+0x174>)
 80005bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	4b53      	ldr	r3, [pc, #332]	@ (8000718 <LCD_GPIO_Init+0x174>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a52      	ldr	r2, [pc, #328]	@ (8000718 <LCD_GPIO_Init+0x174>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4b50      	ldr	r3, [pc, #320]	@ (8000718 <LCD_GPIO_Init+0x174>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b4c      	ldr	r3, [pc, #304]	@ (8000718 <LCD_GPIO_Init+0x174>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a4b      	ldr	r2, [pc, #300]	@ (8000718 <LCD_GPIO_Init+0x174>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b49      	ldr	r3, [pc, #292]	@ (8000718 <LCD_GPIO_Init+0x174>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b45      	ldr	r3, [pc, #276]	@ (8000718 <LCD_GPIO_Init+0x174>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a44      	ldr	r2, [pc, #272]	@ (8000718 <LCD_GPIO_Init+0x174>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b42      	ldr	r3, [pc, #264]	@ (8000718 <LCD_GPIO_Init+0x174>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b3e      	ldr	r3, [pc, #248]	@ (8000718 <LCD_GPIO_Init+0x174>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a3d      	ldr	r2, [pc, #244]	@ (8000718 <LCD_GPIO_Init+0x174>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b3b      	ldr	r3, [pc, #236]	@ (8000718 <LCD_GPIO_Init+0x174>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b37      	ldr	r3, [pc, #220]	@ (8000718 <LCD_GPIO_Init+0x174>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a36      	ldr	r2, [pc, #216]	@ (8000718 <LCD_GPIO_Init+0x174>)
 8000640:	f043 0320 	orr.w	r3, r3, #32
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b34      	ldr	r3, [pc, #208]	@ (8000718 <LCD_GPIO_Init+0x174>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0320 	and.w	r3, r3, #32
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	4b30      	ldr	r3, [pc, #192]	@ (8000718 <LCD_GPIO_Init+0x174>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a2f      	ldr	r2, [pc, #188]	@ (8000718 <LCD_GPIO_Init+0x174>)
 800065c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b2d      	ldr	r3, [pc, #180]	@ (8000718 <LCD_GPIO_Init+0x174>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800066e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000672:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000674:	2302      	movs	r3, #2
 8000676:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800067c:	2302      	movs	r3, #2
 800067e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000680:	230e      	movs	r3, #14
 8000682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	4824      	ldr	r0, [pc, #144]	@ (800071c <LCD_GPIO_Init+0x178>)
 800068c:	f001 ffe4 	bl	8002658 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000690:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000694:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	4619      	mov	r1, r3
 800069c:	4820      	ldr	r0, [pc, #128]	@ (8000720 <LCD_GPIO_Init+0x17c>)
 800069e:	f001 ffdb 	bl	8002658 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80006a2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80006a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4619      	mov	r1, r3
 80006ae:	481d      	ldr	r0, [pc, #116]	@ (8000724 <LCD_GPIO_Init+0x180>)
 80006b0:	f001 ffd2 	bl	8002658 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80006b4:	2348      	movs	r3, #72	@ 0x48
 80006b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	481a      	ldr	r0, [pc, #104]	@ (8000728 <LCD_GPIO_Init+0x184>)
 80006c0:	f001 ffca 	bl	8002658 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80006c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4619      	mov	r1, r3
 80006d0:	4816      	ldr	r0, [pc, #88]	@ (800072c <LCD_GPIO_Init+0x188>)
 80006d2:	f001 ffc1 	bl	8002658 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80006d6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80006da:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4619      	mov	r1, r3
 80006e2:	4813      	ldr	r0, [pc, #76]	@ (8000730 <LCD_GPIO_Init+0x18c>)
 80006e4:	f001 ffb8 	bl	8002658 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80006e8:	2303      	movs	r3, #3
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80006ec:	2309      	movs	r3, #9
 80006ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	480a      	ldr	r0, [pc, #40]	@ (8000720 <LCD_GPIO_Init+0x17c>)
 80006f8:	f001 ffae 	bl	8002658 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80006fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4619      	mov	r1, r3
 8000708:	4809      	ldr	r0, [pc, #36]	@ (8000730 <LCD_GPIO_Init+0x18c>)
 800070a:	f001 ffa5 	bl	8002658 <HAL_GPIO_Init>
}
 800070e:	bf00      	nop
 8000710:	3730      	adds	r7, #48	@ 0x30
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40020000 	.word	0x40020000
 8000720:	40020400 	.word	0x40020400
 8000724:	40020800 	.word	0x40020800
 8000728:	40020c00 	.word	0x40020c00
 800072c:	40021400 	.word	0x40021400
 8000730:	40021800 	.word	0x40021800

08000734 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b090      	sub	sp, #64	@ 0x40
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000742:	23f0      	movs	r3, #240	@ 0xf0
 8000744:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800074a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800074e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000750:	2302      	movs	r3, #2
 8000752:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000754:	23ff      	movs	r3, #255	@ 0xff
 8000756:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800075c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000760:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000762:	2305      	movs	r3, #5
 8000764:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d101      	bne.n	8000770 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800076c:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <LTCD_Layer_Init+0x78>)
 800076e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000770:	23f0      	movs	r3, #240	@ 0xf0
 8000772:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000774:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000778:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4619      	mov	r1, r3
 8000794:	4806      	ldr	r0, [pc, #24]	@ (80007b0 <LTCD_Layer_Init+0x7c>)
 8000796:	f003 fba1 	bl	8003edc <HAL_LTDC_ConfigLayer>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80007a0:	f000 f8fa 	bl	8000998 <LCD_Error_Handler>
	}
}
 80007a4:	bf00      	nop
 80007a6:	3740      	adds	r7, #64	@ 0x40
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000170 	.word	0x20000170
 80007b0:	20000098 	.word	0x20000098

080007b4 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80007b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000864 <LTCD__Init+0xb0>)
 80007ba:	4a2b      	ldr	r2, [pc, #172]	@ (8000868 <LTCD__Init+0xb4>)
 80007bc:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80007be:	4b29      	ldr	r3, [pc, #164]	@ (8000864 <LTCD__Init+0xb0>)
 80007c0:	2209      	movs	r2, #9
 80007c2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80007c4:	4b27      	ldr	r3, [pc, #156]	@ (8000864 <LTCD__Init+0xb0>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80007ca:	4b26      	ldr	r3, [pc, #152]	@ (8000864 <LTCD__Init+0xb0>)
 80007cc:	221d      	movs	r2, #29
 80007ce:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80007d0:	4b24      	ldr	r3, [pc, #144]	@ (8000864 <LTCD__Init+0xb0>)
 80007d2:	2203      	movs	r2, #3
 80007d4:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80007d6:	4b23      	ldr	r3, [pc, #140]	@ (8000864 <LTCD__Init+0xb0>)
 80007d8:	f240 120d 	movw	r2, #269	@ 0x10d
 80007dc:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80007de:	4b21      	ldr	r3, [pc, #132]	@ (8000864 <LTCD__Init+0xb0>)
 80007e0:	f240 1243 	movw	r2, #323	@ 0x143
 80007e4:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80007e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000864 <LTCD__Init+0xb0>)
 80007e8:	f240 1217 	movw	r2, #279	@ 0x117
 80007ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80007ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000864 <LTCD__Init+0xb0>)
 80007f0:	f240 1247 	movw	r2, #327	@ 0x147
 80007f4:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80007f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <LTCD__Init+0xb0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80007fe:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <LTCD__Init+0xb0>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000806:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <LTCD__Init+0xb0>)
 8000808:	2200      	movs	r2, #0
 800080a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <LTCD__Init+0xb8>)
 8000810:	2208      	movs	r2, #8
 8000812:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <LTCD__Init+0xb8>)
 8000816:	22c0      	movs	r2, #192	@ 0xc0
 8000818:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <LTCD__Init+0xb8>)
 800081c:	2204      	movs	r2, #4
 800081e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <LTCD__Init+0xb8>)
 8000822:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000826:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000828:	4810      	ldr	r0, [pc, #64]	@ (800086c <LTCD__Init+0xb8>)
 800082a:	f004 f9b1 	bl	8004b90 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800082e:	4b0d      	ldr	r3, [pc, #52]	@ (8000864 <LTCD__Init+0xb0>)
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000834:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <LTCD__Init+0xb0>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800083a:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <LTCD__Init+0xb0>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000840:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <LTCD__Init+0xb0>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000846:	f7ff fead 	bl	80005a4 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800084a:	4806      	ldr	r0, [pc, #24]	@ (8000864 <LTCD__Init+0xb0>)
 800084c:	f003 fa76 	bl	8003d3c <HAL_LTDC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000856:	f000 f89f 	bl	8000998 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800085a:	f000 f8d7 	bl	8000a0c <ili9341_Init>
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000098 	.word	0x20000098
 8000868:	40016800 	.word	0x40016800
 800086c:	20000140 	.word	0x20000140

08000870 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
 800087a:	460b      	mov	r3, r1
 800087c:	80bb      	strh	r3, [r7, #4]
 800087e:	4613      	mov	r3, r2
 8000880:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000882:	88ba      	ldrh	r2, [r7, #4]
 8000884:	4613      	mov	r3, r2
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	1a9b      	subs	r3, r3, r2
 800088a:	011b      	lsls	r3, r3, #4
 800088c:	461a      	mov	r2, r3
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	4413      	add	r3, r2
 8000892:	4905      	ldr	r1, [pc, #20]	@ (80008a8 <LCD_Draw_Pixel+0x38>)
 8000894:	887a      	ldrh	r2, [r7, #2]
 8000896:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000170 	.word	0x20000170

080008ac <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4604      	mov	r4, r0
 80008b4:	4608      	mov	r0, r1
 80008b6:	4611      	mov	r1, r2
 80008b8:	461a      	mov	r2, r3
 80008ba:	4623      	mov	r3, r4
 80008bc:	80fb      	strh	r3, [r7, #6]
 80008be:	4603      	mov	r3, r0
 80008c0:	80bb      	strh	r3, [r7, #4]
 80008c2:	460b      	mov	r3, r1
 80008c4:	807b      	strh	r3, [r7, #2]
 80008c6:	4613      	mov	r3, r2
 80008c8:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 80008ca:	887b      	ldrh	r3, [r7, #2]
 80008cc:	425b      	negs	r3, r3
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	81fb      	strh	r3, [r7, #14]
 80008d2:	e034      	b.n	800093e <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 80008d4:	887b      	ldrh	r3, [r7, #2]
 80008d6:	425b      	negs	r3, r3
 80008d8:	b29b      	uxth	r3, r3
 80008da:	81bb      	strh	r3, [r7, #12]
 80008dc:	e024      	b.n	8000928 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 80008de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80008e2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008e6:	fb03 f202 	mul.w	r2, r3, r2
 80008ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008ee:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80008f2:	fb01 f303 	mul.w	r3, r1, r3
 80008f6:	441a      	add	r2, r3
 80008f8:	887b      	ldrh	r3, [r7, #2]
 80008fa:	8879      	ldrh	r1, [r7, #2]
 80008fc:	fb01 f303 	mul.w	r3, r1, r3
 8000900:	429a      	cmp	r2, r3
 8000902:	dc0b      	bgt.n	800091c <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000904:	89ba      	ldrh	r2, [r7, #12]
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	4413      	add	r3, r2
 800090a:	b298      	uxth	r0, r3
 800090c:	89fa      	ldrh	r2, [r7, #14]
 800090e:	88bb      	ldrh	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	b29b      	uxth	r3, r3
 8000914:	883a      	ldrh	r2, [r7, #0]
 8000916:	4619      	mov	r1, r3
 8000918:	f7ff ffaa 	bl	8000870 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 800091c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000920:	b29b      	uxth	r3, r3
 8000922:	3301      	adds	r3, #1
 8000924:	b29b      	uxth	r3, r3
 8000926:	81bb      	strh	r3, [r7, #12]
 8000928:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800092c:	887b      	ldrh	r3, [r7, #2]
 800092e:	429a      	cmp	r2, r3
 8000930:	ddd5      	ble.n	80008de <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000932:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000936:	b29b      	uxth	r3, r3
 8000938:	3301      	adds	r3, #1
 800093a:	b29b      	uxth	r3, r3
 800093c:	81fb      	strh	r3, [r7, #14]
 800093e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000942:	887b      	ldrh	r3, [r7, #2]
 8000944:	429a      	cmp	r2, r3
 8000946:	ddc5      	ble.n	80008d4 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	bd90      	pop	{r4, r7, pc}
	...

08000954 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	460a      	mov	r2, r1
 800095e:	71fb      	strb	r3, [r7, #7]
 8000960:	4613      	mov	r3, r2
 8000962:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10e      	bne.n	8000988 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	e007      	b.n	8000980 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000970:	4908      	ldr	r1, [pc, #32]	@ (8000994 <LCD_Clear+0x40>)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	88ba      	ldrh	r2, [r7, #4]
 8000976:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	3301      	adds	r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000986:	d3f3      	bcc.n	8000970 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	20000170 	.word	0x20000170

08000998 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <LCD_Error_Handler+0x8>

080009a4 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 80009a8:	f001 f955 	bl	8001c56 <STMPE811_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d001      	beq.n	80009b6 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 80009b2:	bf00      	nop
 80009b4:	e7fd      	b.n	80009b2 <InitializeLCDTouch+0xe>
  }
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}

080009ba <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f001 f9ff 	bl	8001dc6 <STMPE811_ReadTouch>
 80009c8:	4603      	mov	r3, r0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <runGameplay>:
#include "gameplay.h"
#include "lcd_driver.h"    

#include <stdint.h>

void runGameplay(uint8_t gameMode){
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	71fb      	strb	r3, [r7, #7]
if(gameMode == 1){
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d104      	bne.n	80009ec <runGameplay+0x1a>
    LCD_Clear(0, LCD_COLOR_GREEN);
 80009e2:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80009e6:	2000      	movs	r0, #0
 80009e8:	f7ff ffb4 	bl	8000954 <LCD_Clear>
}
if(gameMode == 2){
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d104      	bne.n	80009fc <runGameplay+0x2a>
    LCD_Clear(0, LCD_COLOR_RED);
 80009f2:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80009f6:	2000      	movs	r0, #0
 80009f8:	f7ff ffac 	bl	8000954 <LCD_Clear>
}
HAL_Delay(1000);
 80009fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a00:	f001 fd20 	bl	8002444 <HAL_Delay>
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000a10:	f000 f9fe 	bl	8000e10 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000a14:	20ca      	movs	r0, #202	@ 0xca
 8000a16:	f000 f943 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000a1a:	20c3      	movs	r0, #195	@ 0xc3
 8000a1c:	f000 f94d 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000a20:	2008      	movs	r0, #8
 8000a22:	f000 f94a 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000a26:	2050      	movs	r0, #80	@ 0x50
 8000a28:	f000 f947 	bl	8000cba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000a2c:	20cf      	movs	r0, #207	@ 0xcf
 8000a2e:	f000 f937 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 f941 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000a38:	20c1      	movs	r0, #193	@ 0xc1
 8000a3a:	f000 f93e 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000a3e:	2030      	movs	r0, #48	@ 0x30
 8000a40:	f000 f93b 	bl	8000cba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000a44:	20ed      	movs	r0, #237	@ 0xed
 8000a46:	f000 f92b 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000a4a:	2064      	movs	r0, #100	@ 0x64
 8000a4c:	f000 f935 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000a50:	2003      	movs	r0, #3
 8000a52:	f000 f932 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000a56:	2012      	movs	r0, #18
 8000a58:	f000 f92f 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000a5c:	2081      	movs	r0, #129	@ 0x81
 8000a5e:	f000 f92c 	bl	8000cba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000a62:	20e8      	movs	r0, #232	@ 0xe8
 8000a64:	f000 f91c 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000a68:	2085      	movs	r0, #133	@ 0x85
 8000a6a:	f000 f926 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f000 f923 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000a74:	2078      	movs	r0, #120	@ 0x78
 8000a76:	f000 f920 	bl	8000cba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000a7a:	20cb      	movs	r0, #203	@ 0xcb
 8000a7c:	f000 f910 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000a80:	2039      	movs	r0, #57	@ 0x39
 8000a82:	f000 f91a 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000a86:	202c      	movs	r0, #44	@ 0x2c
 8000a88:	f000 f917 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f000 f914 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000a92:	2034      	movs	r0, #52	@ 0x34
 8000a94:	f000 f911 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000a98:	2002      	movs	r0, #2
 8000a9a:	f000 f90e 	bl	8000cba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000a9e:	20f7      	movs	r0, #247	@ 0xf7
 8000aa0:	f000 f8fe 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000aa4:	2020      	movs	r0, #32
 8000aa6:	f000 f908 	bl	8000cba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000aaa:	20ea      	movs	r0, #234	@ 0xea
 8000aac:	f000 f8f8 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f000 f902 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f000 f8ff 	bl	8000cba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000abc:	20b1      	movs	r0, #177	@ 0xb1
 8000abe:	f000 f8ef 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f000 f8f9 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000ac8:	201b      	movs	r0, #27
 8000aca:	f000 f8f6 	bl	8000cba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000ace:	20b6      	movs	r0, #182	@ 0xb6
 8000ad0:	f000 f8e6 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000ad4:	200a      	movs	r0, #10
 8000ad6:	f000 f8f0 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000ada:	20a2      	movs	r0, #162	@ 0xa2
 8000adc:	f000 f8ed 	bl	8000cba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000ae0:	20c0      	movs	r0, #192	@ 0xc0
 8000ae2:	f000 f8dd 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000ae6:	2010      	movs	r0, #16
 8000ae8:	f000 f8e7 	bl	8000cba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000aec:	20c1      	movs	r0, #193	@ 0xc1
 8000aee:	f000 f8d7 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000af2:	2010      	movs	r0, #16
 8000af4:	f000 f8e1 	bl	8000cba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000af8:	20c5      	movs	r0, #197	@ 0xc5
 8000afa:	f000 f8d1 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000afe:	2045      	movs	r0, #69	@ 0x45
 8000b00:	f000 f8db 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000b04:	2015      	movs	r0, #21
 8000b06:	f000 f8d8 	bl	8000cba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000b0a:	20c7      	movs	r0, #199	@ 0xc7
 8000b0c:	f000 f8c8 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000b10:	2090      	movs	r0, #144	@ 0x90
 8000b12:	f000 f8d2 	bl	8000cba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000b16:	2036      	movs	r0, #54	@ 0x36
 8000b18:	f000 f8c2 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000b1c:	20c8      	movs	r0, #200	@ 0xc8
 8000b1e:	f000 f8cc 	bl	8000cba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000b22:	20f2      	movs	r0, #242	@ 0xf2
 8000b24:	f000 f8bc 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f000 f8c6 	bl	8000cba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000b2e:	20b0      	movs	r0, #176	@ 0xb0
 8000b30:	f000 f8b6 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000b34:	20c2      	movs	r0, #194	@ 0xc2
 8000b36:	f000 f8c0 	bl	8000cba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000b3a:	20b6      	movs	r0, #182	@ 0xb6
 8000b3c:	f000 f8b0 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000b40:	200a      	movs	r0, #10
 8000b42:	f000 f8ba 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000b46:	20a7      	movs	r0, #167	@ 0xa7
 8000b48:	f000 f8b7 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000b4c:	2027      	movs	r0, #39	@ 0x27
 8000b4e:	f000 f8b4 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000b52:	2004      	movs	r0, #4
 8000b54:	f000 f8b1 	bl	8000cba <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000b58:	202a      	movs	r0, #42	@ 0x2a
 8000b5a:	f000 f8a1 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f000 f8ab 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 f8a8 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 f8a5 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8000b70:	20ef      	movs	r0, #239	@ 0xef
 8000b72:	f000 f8a2 	bl	8000cba <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000b76:	202b      	movs	r0, #43	@ 0x2b
 8000b78:	f000 f892 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f000 f89c 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f000 f899 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f000 f896 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8000b8e:	203f      	movs	r0, #63	@ 0x3f
 8000b90:	f000 f893 	bl	8000cba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000b94:	20f6      	movs	r0, #246	@ 0xf6
 8000b96:	f000 f883 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f000 f88d 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f000 f88a 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000ba6:	2006      	movs	r0, #6
 8000ba8:	f000 f887 	bl	8000cba <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000bac:	202c      	movs	r0, #44	@ 0x2c
 8000bae:	f000 f877 	bl	8000ca0 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000bb2:	20c8      	movs	r0, #200	@ 0xc8
 8000bb4:	f000 f9e8 	bl	8000f88 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000bb8:	2026      	movs	r0, #38	@ 0x26
 8000bba:	f000 f871 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f000 f87b 	bl	8000cba <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000bc4:	20e0      	movs	r0, #224	@ 0xe0
 8000bc6:	f000 f86b 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000bca:	200f      	movs	r0, #15
 8000bcc:	f000 f875 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8000bd0:	2029      	movs	r0, #41	@ 0x29
 8000bd2:	f000 f872 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8000bd6:	2024      	movs	r0, #36	@ 0x24
 8000bd8:	f000 f86f 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000bdc:	200c      	movs	r0, #12
 8000bde:	f000 f86c 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8000be2:	200e      	movs	r0, #14
 8000be4:	f000 f869 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000be8:	2009      	movs	r0, #9
 8000bea:	f000 f866 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8000bee:	204e      	movs	r0, #78	@ 0x4e
 8000bf0:	f000 f863 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000bf4:	2078      	movs	r0, #120	@ 0x78
 8000bf6:	f000 f860 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8000bfa:	203c      	movs	r0, #60	@ 0x3c
 8000bfc:	f000 f85d 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000c00:	2009      	movs	r0, #9
 8000c02:	f000 f85a 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8000c06:	2013      	movs	r0, #19
 8000c08:	f000 f857 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000c0c:	2005      	movs	r0, #5
 8000c0e:	f000 f854 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8000c12:	2017      	movs	r0, #23
 8000c14:	f000 f851 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000c18:	2011      	movs	r0, #17
 8000c1a:	f000 f84e 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 f84b 	bl	8000cba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8000c24:	20e1      	movs	r0, #225	@ 0xe1
 8000c26:	f000 f83b 	bl	8000ca0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 f845 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8000c30:	2016      	movs	r0, #22
 8000c32:	f000 f842 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000c36:	201b      	movs	r0, #27
 8000c38:	f000 f83f 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000c3c:	2004      	movs	r0, #4
 8000c3e:	f000 f83c 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000c42:	2011      	movs	r0, #17
 8000c44:	f000 f839 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8000c48:	2007      	movs	r0, #7
 8000c4a:	f000 f836 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8000c4e:	2031      	movs	r0, #49	@ 0x31
 8000c50:	f000 f833 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8000c54:	2033      	movs	r0, #51	@ 0x33
 8000c56:	f000 f830 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8000c5a:	2042      	movs	r0, #66	@ 0x42
 8000c5c:	f000 f82d 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000c60:	2005      	movs	r0, #5
 8000c62:	f000 f82a 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000c66:	200c      	movs	r0, #12
 8000c68:	f000 f827 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8000c6c:	200a      	movs	r0, #10
 8000c6e:	f000 f824 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8000c72:	2028      	movs	r0, #40	@ 0x28
 8000c74:	f000 f821 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8000c78:	202f      	movs	r0, #47	@ 0x2f
 8000c7a:	f000 f81e 	bl	8000cba <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8000c7e:	200f      	movs	r0, #15
 8000c80:	f000 f81b 	bl	8000cba <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8000c84:	2011      	movs	r0, #17
 8000c86:	f000 f80b 	bl	8000ca0 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000c8a:	20c8      	movs	r0, #200	@ 0xc8
 8000c8c:	f000 f97c 	bl	8000f88 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8000c90:	2029      	movs	r0, #41	@ 0x29
 8000c92:	f000 f805 	bl	8000ca0 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8000c96:	202c      	movs	r0, #44	@ 0x2c
 8000c98:	f000 f802 	bl	8000ca0 <ili9341_Write_Reg>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f949 	bl	8000f44 <LCD_IO_WriteReg>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f91a 	bl	8000f00 <LCD_IO_WriteData>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000cd8:	4819      	ldr	r0, [pc, #100]	@ (8000d40 <SPI_Init+0x6c>)
 8000cda:	f004 fb38 	bl	800534e <HAL_SPI_GetState>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d12b      	bne.n	8000d3c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <SPI_Init+0x6c>)
 8000ce6:	4a17      	ldr	r2, [pc, #92]	@ (8000d44 <SPI_Init+0x70>)
 8000ce8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <SPI_Init+0x6c>)
 8000cec:	2218      	movs	r2, #24
 8000cee:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <SPI_Init+0x6c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000cf6:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <SPI_Init+0x6c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <SPI_Init+0x6c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000d02:	4b0f      	ldr	r3, [pc, #60]	@ (8000d40 <SPI_Init+0x6c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000d08:	4b0d      	ldr	r3, [pc, #52]	@ (8000d40 <SPI_Init+0x6c>)
 8000d0a:	2207      	movs	r2, #7
 8000d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <SPI_Init+0x6c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <SPI_Init+0x6c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <SPI_Init+0x6c>)
 8000d1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d20:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000d22:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <SPI_Init+0x6c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <SPI_Init+0x6c>)
 8000d2a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d2e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8000d30:	4803      	ldr	r0, [pc, #12]	@ (8000d40 <SPI_Init+0x6c>)
 8000d32:	f000 f833 	bl	8000d9c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000d36:	4802      	ldr	r0, [pc, #8]	@ (8000d40 <SPI_Init+0x6c>)
 8000d38:	f004 f914 	bl	8004f64 <HAL_SPI_Init>
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20025970 	.word	0x20025970
 8000d44:	40015000 	.word	0x40015000

08000d48 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8000d56:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <SPI_Write+0x34>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	1db9      	adds	r1, r7, #6
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4808      	ldr	r0, [pc, #32]	@ (8000d80 <SPI_Write+0x38>)
 8000d60:	f004 f9b1 	bl	80050c6 <HAL_SPI_Transmit>
 8000d64:	4603      	mov	r3, r0
 8000d66:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8000d6e:	f000 f809 	bl	8000d84 <SPI_Error>
  }
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20025970 	.word	0x20025970

08000d84 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000d88:	4803      	ldr	r0, [pc, #12]	@ (8000d98 <SPI_Error+0x14>)
 8000d8a:	f004 f974 	bl	8005076 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8000d8e:	f7ff ffa1 	bl	8000cd4 <SPI_Init>
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20025970 	.word	0x20025970

08000d9c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	@ 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <SPI_MspInit+0x6c>)
 8000daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dac:	4a16      	ldr	r2, [pc, #88]	@ (8000e08 <SPI_MspInit+0x6c>)
 8000dae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000db2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000db4:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <SPI_MspInit+0x6c>)
 8000db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <SPI_MspInit+0x6c>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8000e08 <SPI_MspInit+0x6c>)
 8000dca:	f043 0320 	orr.w	r3, r3, #32
 8000dce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <SPI_MspInit+0x6c>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd4:	f003 0320 	and.w	r3, r3, #32
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8000ddc:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000dea:	2301      	movs	r3, #1
 8000dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8000dee:	2305      	movs	r3, #5
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <SPI_MspInit+0x70>)
 8000dfa:	f001 fc2d 	bl	8002658 <HAL_GPIO_Init>
}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	@ 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40021400 	.word	0x40021400

08000e10 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8000e16:	4b36      	ldr	r3, [pc, #216]	@ (8000ef0 <LCD_IO_Init+0xe0>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d164      	bne.n	8000ee8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8000e1e:	4b34      	ldr	r3, [pc, #208]	@ (8000ef0 <LCD_IO_Init+0xe0>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	4b32      	ldr	r3, [pc, #200]	@ (8000ef4 <LCD_IO_Init+0xe4>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2c:	4a31      	ldr	r2, [pc, #196]	@ (8000ef4 <LCD_IO_Init+0xe4>)
 8000e2e:	f043 0308 	orr.w	r3, r3, #8
 8000e32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e34:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef4 <LCD_IO_Init+0xe4>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e38:	f003 0308 	and.w	r3, r3, #8
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000e40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	4619      	mov	r1, r3
 8000e58:	4827      	ldr	r0, [pc, #156]	@ (8000ef8 <LCD_IO_Init+0xe8>)
 8000e5a:	f001 fbfd 	bl	8002658 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	4b24      	ldr	r3, [pc, #144]	@ (8000ef4 <LCD_IO_Init+0xe4>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a23      	ldr	r2, [pc, #140]	@ (8000ef4 <LCD_IO_Init+0xe4>)
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ef4 <LCD_IO_Init+0xe4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0308 	and.w	r3, r3, #8
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000e7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	4819      	ldr	r0, [pc, #100]	@ (8000ef8 <LCD_IO_Init+0xe8>)
 8000e94:	f001 fbe0 	bl	8002658 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <LCD_IO_Init+0xe4>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea0:	4a14      	ldr	r2, [pc, #80]	@ (8000ef4 <LCD_IO_Init+0xe4>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <LCD_IO_Init+0xe4>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480c      	ldr	r0, [pc, #48]	@ (8000efc <LCD_IO_Init+0xec>)
 8000ecc:	f001 fbc4 	bl	8002658 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	4809      	ldr	r0, [pc, #36]	@ (8000efc <LCD_IO_Init+0xec>)
 8000ed6:	f001 fe77 	bl	8002bc8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000eda:	2201      	movs	r2, #1
 8000edc:	2104      	movs	r1, #4
 8000ede:	4807      	ldr	r0, [pc, #28]	@ (8000efc <LCD_IO_Init+0xec>)
 8000ee0:	f001 fe72 	bl	8002bc8 <HAL_GPIO_WritePin>

    SPI_Init();
 8000ee4:	f7ff fef6 	bl	8000cd4 <SPI_Init>
  }
}
 8000ee8:	bf00      	nop
 8000eea:	3720      	adds	r7, #32
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200259c8 	.word	0x200259c8
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020c00 	.word	0x40020c00
 8000efc:	40020800 	.word	0x40020800

08000f00 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f10:	480a      	ldr	r0, [pc, #40]	@ (8000f3c <LCD_IO_WriteData+0x3c>)
 8000f12:	f001 fe59 	bl	8002bc8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8000f16:	2200      	movs	r2, #0
 8000f18:	2104      	movs	r1, #4
 8000f1a:	4809      	ldr	r0, [pc, #36]	@ (8000f40 <LCD_IO_WriteData+0x40>)
 8000f1c:	f001 fe54 	bl	8002bc8 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8000f20:	88fb      	ldrh	r3, [r7, #6]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff10 	bl	8000d48 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <LCD_IO_WriteData+0x40>)
 8000f2e:	f001 fe4b 	bl	8002bc8 <HAL_GPIO_WritePin>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40020c00 	.word	0x40020c00
 8000f40:	40020800 	.word	0x40020800

08000f44 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f54:	480a      	ldr	r0, [pc, #40]	@ (8000f80 <LCD_IO_WriteReg+0x3c>)
 8000f56:	f001 fe37 	bl	8002bc8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	4809      	ldr	r0, [pc, #36]	@ (8000f84 <LCD_IO_WriteReg+0x40>)
 8000f60:	f001 fe32 	bl	8002bc8 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff feed 	bl	8000d48 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2104      	movs	r1, #4
 8000f72:	4804      	ldr	r0, [pc, #16]	@ (8000f84 <LCD_IO_WriteReg+0x40>)
 8000f74:	f001 fe28 	bl	8002bc8 <HAL_GPIO_WritePin>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40020c00 	.word	0x40020c00
 8000f84:	40020800 	.word	0x40020800

08000f88 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f001 fa57 	bl	8002444 <HAL_Delay>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
 initialise_monitor_handles();
 8000fa4:	f004 ffa0 	bl	8005ee8 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa8:	f001 f9da 	bl	8002360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fac:	f000 f81c 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb0:	f000 fa0c 	bl	80013cc <MX_GPIO_Init>
  MX_LTDC_Init();
 8000fb4:	f000 f8c2 	bl	800113c <MX_LTDC_Init>
  MX_RNG_Init();
 8000fb8:	f000 f972 	bl	80012a0 <MX_RNG_Init>
  MX_TIM2_Init();
 8000fbc:	f000 f9ba 	bl	8001334 <MX_TIM2_Init>
  MX_SPI5_Init();
 8000fc0:	f000 f982 	bl	80012c8 <MX_SPI5_Init>
  MX_I2C3_Init();
 8000fc4:	f000 f87a 	bl	80010bc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8000fc8:	f7ff fa90 	bl	80004ec <ApplicationInit>
  // LCD_Visual_Demo();
  HAL_Delay(1000);
 8000fcc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fd0:	f001 fa38 	bl	8002444 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    uint8_t gameMode = LCD_First_Screen();
 8000fd4:	f7ff faa2 	bl	800051c <LCD_First_Screen>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	71fb      	strb	r3, [r7, #7]
    runGameplay(gameMode);
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fcf7 	bl	80009d2 <runGameplay>
  {
 8000fe4:	bf00      	nop
 8000fe6:	e7f5      	b.n	8000fd4 <main+0x36>

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b094      	sub	sp, #80	@ 0x50
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0320 	add.w	r3, r7, #32
 8000ff2:	2230      	movs	r2, #48	@ 0x30
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f005 f898 	bl	800612c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	4b28      	ldr	r3, [pc, #160]	@ (80010b4 <SystemClock_Config+0xcc>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	4a27      	ldr	r2, [pc, #156]	@ (80010b4 <SystemClock_Config+0xcc>)
 8001016:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800101a:	6413      	str	r3, [r2, #64]	@ 0x40
 800101c:	4b25      	ldr	r3, [pc, #148]	@ (80010b4 <SystemClock_Config+0xcc>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	4b22      	ldr	r3, [pc, #136]	@ (80010b8 <SystemClock_Config+0xd0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a21      	ldr	r2, [pc, #132]	@ (80010b8 <SystemClock_Config+0xd0>)
 8001032:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <SystemClock_Config+0xd0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001044:	2301      	movs	r3, #1
 8001046:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001048:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001052:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001056:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001058:	2308      	movs	r3, #8
 800105a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800105c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001060:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001062:	2302      	movs	r3, #2
 8001064:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001066:	2307      	movs	r3, #7
 8001068:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106a:	f107 0320 	add.w	r3, r7, #32
 800106e:	4618      	mov	r0, r3
 8001070:	f003 f90a 	bl	8004288 <HAL_RCC_OscConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800107a:	f000 fb55 	bl	8001728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107e:	230f      	movs	r3, #15
 8001080:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001082:	2302      	movs	r3, #2
 8001084:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800108a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800108e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001094:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	2105      	movs	r1, #5
 800109c:	4618      	mov	r0, r3
 800109e:	f003 fb6b 	bl	8004778 <HAL_RCC_ClockConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010a8:	f000 fb3e 	bl	8001728 <Error_Handler>
  }
}
 80010ac:	bf00      	nop
 80010ae:	3750      	adds	r7, #80	@ 0x50
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40007000 	.word	0x40007000

080010bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <MX_I2C3_Init+0x74>)
 80010c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001134 <MX_I2C3_Init+0x78>)
 80010c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001130 <MX_I2C3_Init+0x74>)
 80010c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001138 <MX_I2C3_Init+0x7c>)
 80010ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010cc:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <MX_I2C3_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80010d2:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <MX_I2C3_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d8:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <MX_I2C3_Init+0x74>)
 80010da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010de:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <MX_I2C3_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80010e6:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <MX_I2C3_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ec:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <MX_I2C3_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <MX_I2C3_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010f8:	480d      	ldr	r0, [pc, #52]	@ (8001130 <MX_I2C3_Init+0x74>)
 80010fa:	f001 fd7f 	bl	8002bfc <HAL_I2C_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001104:	f000 fb10 	bl	8001728 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001108:	2100      	movs	r1, #0
 800110a:	4809      	ldr	r0, [pc, #36]	@ (8001130 <MX_I2C3_Init+0x74>)
 800110c:	f002 fd9a 	bl	8003c44 <HAL_I2CEx_ConfigAnalogFilter>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001116:	f000 fb07 	bl	8001728 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800111a:	2100      	movs	r1, #0
 800111c:	4804      	ldr	r0, [pc, #16]	@ (8001130 <MX_I2C3_Init+0x74>)
 800111e:	f002 fdcd 	bl	8003cbc <HAL_I2CEx_ConfigDigitalFilter>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001128:	f000 fafe 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200259cc 	.word	0x200259cc
 8001134:	40005c00 	.word	0x40005c00
 8001138:	000186a0 	.word	0x000186a0

0800113c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b09a      	sub	sp, #104	@ 0x68
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001142:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001146:	2234      	movs	r2, #52	@ 0x34
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f004 ffee 	bl	800612c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001150:	463b      	mov	r3, r7
 8001152:	2234      	movs	r2, #52	@ 0x34
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f004 ffe8 	bl	800612c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800115c:	4b4e      	ldr	r3, [pc, #312]	@ (8001298 <MX_LTDC_Init+0x15c>)
 800115e:	4a4f      	ldr	r2, [pc, #316]	@ (800129c <MX_LTDC_Init+0x160>)
 8001160:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001162:	4b4d      	ldr	r3, [pc, #308]	@ (8001298 <MX_LTDC_Init+0x15c>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001168:	4b4b      	ldr	r3, [pc, #300]	@ (8001298 <MX_LTDC_Init+0x15c>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800116e:	4b4a      	ldr	r3, [pc, #296]	@ (8001298 <MX_LTDC_Init+0x15c>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001174:	4b48      	ldr	r3, [pc, #288]	@ (8001298 <MX_LTDC_Init+0x15c>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800117a:	4b47      	ldr	r3, [pc, #284]	@ (8001298 <MX_LTDC_Init+0x15c>)
 800117c:	2207      	movs	r2, #7
 800117e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001180:	4b45      	ldr	r3, [pc, #276]	@ (8001298 <MX_LTDC_Init+0x15c>)
 8001182:	2203      	movs	r2, #3
 8001184:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001186:	4b44      	ldr	r3, [pc, #272]	@ (8001298 <MX_LTDC_Init+0x15c>)
 8001188:	220e      	movs	r2, #14
 800118a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800118c:	4b42      	ldr	r3, [pc, #264]	@ (8001298 <MX_LTDC_Init+0x15c>)
 800118e:	2205      	movs	r2, #5
 8001190:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001192:	4b41      	ldr	r3, [pc, #260]	@ (8001298 <MX_LTDC_Init+0x15c>)
 8001194:	f240 228e 	movw	r2, #654	@ 0x28e
 8001198:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800119a:	4b3f      	ldr	r3, [pc, #252]	@ (8001298 <MX_LTDC_Init+0x15c>)
 800119c:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80011a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80011a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001298 <MX_LTDC_Init+0x15c>)
 80011a4:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80011a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80011aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001298 <MX_LTDC_Init+0x15c>)
 80011ac:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80011b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80011b2:	4b39      	ldr	r3, [pc, #228]	@ (8001298 <MX_LTDC_Init+0x15c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80011ba:	4b37      	ldr	r3, [pc, #220]	@ (8001298 <MX_LTDC_Init+0x15c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80011c2:	4b35      	ldr	r3, [pc, #212]	@ (8001298 <MX_LTDC_Init+0x15c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011ca:	4833      	ldr	r0, [pc, #204]	@ (8001298 <MX_LTDC_Init+0x15c>)
 80011cc:	f002 fdb6 	bl	8003d3c <HAL_LTDC_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80011d6:	f000 faa7 	bl	8001728 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80011ea:	2300      	movs	r3, #0
 80011ec:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80011f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011fa:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80011fc:	2305      	movs	r3, #5
 80011fe:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800121e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001222:	2200      	movs	r2, #0
 8001224:	4619      	mov	r1, r3
 8001226:	481c      	ldr	r0, [pc, #112]	@ (8001298 <MX_LTDC_Init+0x15c>)
 8001228:	f002 fe58 	bl	8003edc <HAL_LTDC_ConfigLayer>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001232:	f000 fa79 	bl	8001728 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001252:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001256:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001258:	2305      	movs	r3, #5
 800125a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	2201      	movs	r2, #1
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_LTDC_Init+0x15c>)
 8001282:	f002 fe2b 	bl	8003edc <HAL_LTDC_ConfigLayer>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800128c:	f000 fa4c 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	3768      	adds	r7, #104	@ 0x68
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20025a20 	.word	0x20025a20
 800129c:	40016800 	.word	0x40016800

080012a0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <MX_RNG_Init+0x20>)
 80012a6:	4a07      	ldr	r2, [pc, #28]	@ (80012c4 <MX_RNG_Init+0x24>)
 80012a8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <MX_RNG_Init+0x20>)
 80012ac:	f003 fe30 	bl	8004f10 <HAL_RNG_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80012b6:	f000 fa37 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20025ac8 	.word	0x20025ac8
 80012c4:	50060800 	.word	0x50060800

080012c8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80012cc:	4b17      	ldr	r3, [pc, #92]	@ (800132c <MX_SPI5_Init+0x64>)
 80012ce:	4a18      	ldr	r2, [pc, #96]	@ (8001330 <MX_SPI5_Init+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80012d2:	4b16      	ldr	r3, [pc, #88]	@ (800132c <MX_SPI5_Init+0x64>)
 80012d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012d8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80012da:	4b14      	ldr	r3, [pc, #80]	@ (800132c <MX_SPI5_Init+0x64>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e0:	4b12      	ldr	r3, [pc, #72]	@ (800132c <MX_SPI5_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012e6:	4b11      	ldr	r3, [pc, #68]	@ (800132c <MX_SPI5_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <MX_SPI5_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <MX_SPI5_Init+0x64>)
 80012f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012f8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012fa:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <MX_SPI5_Init+0x64>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001300:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <MX_SPI5_Init+0x64>)
 8001302:	2200      	movs	r2, #0
 8001304:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001306:	4b09      	ldr	r3, [pc, #36]	@ (800132c <MX_SPI5_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800130c:	4b07      	ldr	r3, [pc, #28]	@ (800132c <MX_SPI5_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001312:	4b06      	ldr	r3, [pc, #24]	@ (800132c <MX_SPI5_Init+0x64>)
 8001314:	220a      	movs	r2, #10
 8001316:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001318:	4804      	ldr	r0, [pc, #16]	@ (800132c <MX_SPI5_Init+0x64>)
 800131a:	f003 fe23 	bl	8004f64 <HAL_SPI_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001324:	f000 fa00 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20025ad8 	.word	0x20025ad8
 8001330:	40015000 	.word	0x40015000

08001334 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001348:	463b      	mov	r3, r7
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001350:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <MX_TIM2_Init+0x94>)
 8001352:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001356:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <MX_TIM2_Init+0x94>)
 800135a:	2200      	movs	r2, #0
 800135c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <MX_TIM2_Init+0x94>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001364:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <MX_TIM2_Init+0x94>)
 8001366:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800136a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136c:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <MX_TIM2_Init+0x94>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <MX_TIM2_Init+0x94>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001378:	4813      	ldr	r0, [pc, #76]	@ (80013c8 <MX_TIM2_Init+0x94>)
 800137a:	f004 f8d3 	bl	8005524 <HAL_TIM_Base_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001384:	f000 f9d0 	bl	8001728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001388:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800138c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	4619      	mov	r1, r3
 8001394:	480c      	ldr	r0, [pc, #48]	@ (80013c8 <MX_TIM2_Init+0x94>)
 8001396:	f004 f914 	bl	80055c2 <HAL_TIM_ConfigClockSource>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013a0:	f000 f9c2 	bl	8001728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ac:	463b      	mov	r3, r7
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	@ (80013c8 <MX_TIM2_Init+0x94>)
 80013b2:	f004 fb13 	bl	80059dc <HAL_TIMEx_MasterConfigSynchronization>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013bc:	f000 f9b4 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20025b30 	.word	0x20025b30

080013cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08e      	sub	sp, #56	@ 0x38
 80013d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
 80013e6:	4bb2      	ldr	r3, [pc, #712]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4ab1      	ldr	r2, [pc, #708]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4baf      	ldr	r3, [pc, #700]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	623b      	str	r3, [r7, #32]
 80013fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	4bab      	ldr	r3, [pc, #684]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4aaa      	ldr	r2, [pc, #680]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 8001408:	f043 0320 	orr.w	r3, r3, #32
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4ba8      	ldr	r3, [pc, #672]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0320 	and.w	r3, r3, #32
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	4ba4      	ldr	r3, [pc, #656]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	4aa3      	ldr	r2, [pc, #652]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 8001424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001428:	6313      	str	r3, [r2, #48]	@ 0x30
 800142a:	4ba1      	ldr	r3, [pc, #644]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	4b9d      	ldr	r3, [pc, #628]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a9c      	ldr	r2, [pc, #624]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b9a      	ldr	r3, [pc, #616]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b96      	ldr	r3, [pc, #600]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a95      	ldr	r2, [pc, #596]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b93      	ldr	r3, [pc, #588]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b8f      	ldr	r3, [pc, #572]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a8e      	ldr	r2, [pc, #568]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 8001478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b8c      	ldr	r3, [pc, #560]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	4b88      	ldr	r3, [pc, #544]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a87      	ldr	r2, [pc, #540]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 8001494:	f043 0310 	orr.w	r3, r3, #16
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b85      	ldr	r3, [pc, #532]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b81      	ldr	r3, [pc, #516]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a80      	ldr	r2, [pc, #512]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 80014b0:	f043 0308 	orr.w	r3, r3, #8
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b7e      	ldr	r3, [pc, #504]	@ (80016b0 <MX_GPIO_Init+0x2e4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2116      	movs	r1, #22
 80014c6:	487b      	ldr	r0, [pc, #492]	@ (80016b4 <MX_GPIO_Init+0x2e8>)
 80014c8:	f001 fb7e 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2180      	movs	r1, #128	@ 0x80
 80014d0:	4879      	ldr	r0, [pc, #484]	@ (80016b8 <MX_GPIO_Init+0x2ec>)
 80014d2:	f001 fb79 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80014dc:	4877      	ldr	r0, [pc, #476]	@ (80016bc <MX_GPIO_Init+0x2f0>)
 80014de:	f001 fb73 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80014e8:	4875      	ldr	r0, [pc, #468]	@ (80016c0 <MX_GPIO_Init+0x2f4>)
 80014ea:	f001 fb6d 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80014ee:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001500:	230c      	movs	r3, #12
 8001502:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001504:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001508:	4619      	mov	r1, r3
 800150a:	486e      	ldr	r0, [pc, #440]	@ (80016c4 <MX_GPIO_Init+0x2f8>)
 800150c:	f001 f8a4 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001510:	2301      	movs	r3, #1
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001520:	230c      	movs	r3, #12
 8001522:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001528:	4619      	mov	r1, r3
 800152a:	4862      	ldr	r0, [pc, #392]	@ (80016b4 <MX_GPIO_Init+0x2e8>)
 800152c:	f001 f894 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001530:	2316      	movs	r3, #22
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001540:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001544:	4619      	mov	r1, r3
 8001546:	485b      	ldr	r0, [pc, #364]	@ (80016b4 <MX_GPIO_Init+0x2e8>)
 8001548:	f001 f886 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800154c:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001552:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001556:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001560:	4619      	mov	r1, r3
 8001562:	4855      	ldr	r0, [pc, #340]	@ (80016b8 <MX_GPIO_Init+0x2ec>)
 8001564:	f001 f878 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001568:	2380      	movs	r3, #128	@ 0x80
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	2301      	movs	r3, #1
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800157c:	4619      	mov	r1, r3
 800157e:	484e      	ldr	r0, [pc, #312]	@ (80016b8 <MX_GPIO_Init+0x2ec>)
 8001580:	f001 f86a 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001584:	2320      	movs	r3, #32
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001588:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001596:	4619      	mov	r1, r3
 8001598:	4846      	ldr	r0, [pc, #280]	@ (80016b4 <MX_GPIO_Init+0x2e8>)
 800159a:	f001 f85d 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800159e:	2304      	movs	r3, #4
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ae:	4619      	mov	r1, r3
 80015b0:	4845      	ldr	r0, [pc, #276]	@ (80016c8 <MX_GPIO_Init+0x2fc>)
 80015b2:	f001 f851 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80015b6:	f248 1333 	movw	r3, #33075	@ 0x8133
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015c8:	230c      	movs	r3, #12
 80015ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d0:	4619      	mov	r1, r3
 80015d2:	483b      	ldr	r0, [pc, #236]	@ (80016c0 <MX_GPIO_Init+0x2f4>)
 80015d4:	f001 f840 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80015d8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015ea:	230c      	movs	r3, #12
 80015ec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f2:	4619      	mov	r1, r3
 80015f4:	4835      	ldr	r0, [pc, #212]	@ (80016cc <MX_GPIO_Init+0x300>)
 80015f6:	f001 f82f 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80015fa:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80015fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800160c:	230c      	movs	r3, #12
 800160e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001610:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001614:	4619      	mov	r1, r3
 8001616:	482c      	ldr	r0, [pc, #176]	@ (80016c8 <MX_GPIO_Init+0x2fc>)
 8001618:	f001 f81e 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800161c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001620:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001622:	2300      	movs	r3, #0
 8001624:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162e:	4619      	mov	r1, r3
 8001630:	4825      	ldr	r0, [pc, #148]	@ (80016c8 <MX_GPIO_Init+0x2fc>)
 8001632:	f001 f811 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001636:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001648:	230c      	movs	r3, #12
 800164a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001650:	4619      	mov	r1, r3
 8001652:	481a      	ldr	r0, [pc, #104]	@ (80016bc <MX_GPIO_Init+0x2f0>)
 8001654:	f001 f800 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001658:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165e:	2300      	movs	r3, #0
 8001660:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800166a:	4619      	mov	r1, r3
 800166c:	4813      	ldr	r0, [pc, #76]	@ (80016bc <MX_GPIO_Init+0x2f0>)
 800166e:	f000 fff3 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001672:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001678:	2301      	movs	r3, #1
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001688:	4619      	mov	r1, r3
 800168a:	480c      	ldr	r0, [pc, #48]	@ (80016bc <MX_GPIO_Init+0x2f0>)
 800168c:	f000 ffe4 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001690:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016a2:	2307      	movs	r3, #7
 80016a4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016aa:	4619      	mov	r1, r3
 80016ac:	e010      	b.n	80016d0 <MX_GPIO_Init+0x304>
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020800 	.word	0x40020800
 80016b8:	40020000 	.word	0x40020000
 80016bc:	40020c00 	.word	0x40020c00
 80016c0:	40021800 	.word	0x40021800
 80016c4:	40021400 	.word	0x40021400
 80016c8:	40020400 	.word	0x40020400
 80016cc:	40021000 	.word	0x40021000
 80016d0:	4812      	ldr	r0, [pc, #72]	@ (800171c <MX_GPIO_Init+0x350>)
 80016d2:	f000 ffc1 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80016d6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ec:	4619      	mov	r1, r3
 80016ee:	480c      	ldr	r0, [pc, #48]	@ (8001720 <MX_GPIO_Init+0x354>)
 80016f0:	f000 ffb2 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80016f4:	2360      	movs	r3, #96	@ 0x60
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001704:	230c      	movs	r3, #12
 8001706:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800170c:	4619      	mov	r1, r3
 800170e:	4805      	ldr	r0, [pc, #20]	@ (8001724 <MX_GPIO_Init+0x358>)
 8001710:	f000 ffa2 	bl	8002658 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001714:	bf00      	nop
 8001716:	3738      	adds	r7, #56	@ 0x38
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40020000 	.word	0x40020000
 8001720:	40021800 	.word	0x40021800
 8001724:	40020400 	.word	0x40020400

08001728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800172c:	b672      	cpsid	i
}
 800172e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <Error_Handler+0x8>

08001734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <HAL_MspInit+0x4c>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001742:	4a0f      	ldr	r2, [pc, #60]	@ (8001780 <HAL_MspInit+0x4c>)
 8001744:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001748:	6453      	str	r3, [r2, #68]	@ 0x44
 800174a:	4b0d      	ldr	r3, [pc, #52]	@ (8001780 <HAL_MspInit+0x4c>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	603b      	str	r3, [r7, #0]
 800175a:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <HAL_MspInit+0x4c>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	4a08      	ldr	r2, [pc, #32]	@ (8001780 <HAL_MspInit+0x4c>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	@ 0x40
 8001766:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_MspInit+0x4c>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001772:	2007      	movs	r0, #7
 8001774:	f000 ff3c 	bl	80025f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40023800 	.word	0x40023800

08001784 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	@ 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a29      	ldr	r2, [pc, #164]	@ (8001848 <HAL_I2C_MspInit+0xc4>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d14b      	bne.n	800183e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b28      	ldr	r3, [pc, #160]	@ (800184c <HAL_I2C_MspInit+0xc8>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a27      	ldr	r2, [pc, #156]	@ (800184c <HAL_I2C_MspInit+0xc8>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b25      	ldr	r3, [pc, #148]	@ (800184c <HAL_I2C_MspInit+0xc8>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b21      	ldr	r3, [pc, #132]	@ (800184c <HAL_I2C_MspInit+0xc8>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	4a20      	ldr	r2, [pc, #128]	@ (800184c <HAL_I2C_MspInit+0xc8>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d2:	4b1e      	ldr	r3, [pc, #120]	@ (800184c <HAL_I2C_MspInit+0xc8>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80017de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017e4:	2312      	movs	r3, #18
 80017e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017f0:	2304      	movs	r3, #4
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	4815      	ldr	r0, [pc, #84]	@ (8001850 <HAL_I2C_MspInit+0xcc>)
 80017fc:	f000 ff2c 	bl	8002658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001800:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001806:	2312      	movs	r3, #18
 8001808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001812:	2304      	movs	r3, #4
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	480d      	ldr	r0, [pc, #52]	@ (8001854 <HAL_I2C_MspInit+0xd0>)
 800181e:	f000 ff1b 	bl	8002658 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <HAL_I2C_MspInit+0xc8>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	4a08      	ldr	r2, [pc, #32]	@ (800184c <HAL_I2C_MspInit+0xc8>)
 800182c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001830:	6413      	str	r3, [r2, #64]	@ 0x40
 8001832:	4b06      	ldr	r3, [pc, #24]	@ (800184c <HAL_I2C_MspInit+0xc8>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800183e:	bf00      	nop
 8001840:	3728      	adds	r7, #40	@ 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40005c00 	.word	0x40005c00
 800184c:	40023800 	.word	0x40023800
 8001850:	40020800 	.word	0x40020800
 8001854:	40020000 	.word	0x40020000

08001858 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b09a      	sub	sp, #104	@ 0x68
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001874:	2230      	movs	r2, #48	@ 0x30
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f004 fc57 	bl	800612c <memset>
  if(hltdc->Instance==LTDC)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a81      	ldr	r2, [pc, #516]	@ (8001a88 <HAL_LTDC_MspInit+0x230>)
 8001884:	4293      	cmp	r3, r2
 8001886:	f040 80fb 	bne.w	8001a80 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800188a:	2308      	movs	r3, #8
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 800188e:	23c8      	movs	r3, #200	@ 0xc8
 8001890:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001892:	2302      	movs	r3, #2
 8001894:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8001896:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800189a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800189c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a0:	4618      	mov	r0, r3
 80018a2:	f003 f975 	bl	8004b90 <HAL_RCCEx_PeriphCLKConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80018ac:	f7ff ff3c 	bl	8001728 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
 80018b4:	4b75      	ldr	r3, [pc, #468]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 80018b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b8:	4a74      	ldr	r2, [pc, #464]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 80018ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80018be:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c0:	4b72      	ldr	r3, [pc, #456]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 80018c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018c8:	623b      	str	r3, [r7, #32]
 80018ca:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]
 80018d0:	4b6e      	ldr	r3, [pc, #440]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d4:	4a6d      	ldr	r2, [pc, #436]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 80018d6:	f043 0320 	orr.w	r3, r3, #32
 80018da:	6313      	str	r3, [r2, #48]	@ 0x30
 80018dc:	4b6b      	ldr	r3, [pc, #428]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e0:	f003 0320 	and.w	r3, r3, #32
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e8:	2300      	movs	r3, #0
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	4b67      	ldr	r3, [pc, #412]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 80018ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f0:	4a66      	ldr	r2, [pc, #408]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f8:	4b64      	ldr	r3, [pc, #400]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 80018fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	61bb      	str	r3, [r7, #24]
 8001902:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	4b60      	ldr	r3, [pc, #384]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190c:	4a5f      	ldr	r2, [pc, #380]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 800190e:	f043 0302 	orr.w	r3, r3, #2
 8001912:	6313      	str	r3, [r2, #48]	@ 0x30
 8001914:	4b5d      	ldr	r3, [pc, #372]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	4b59      	ldr	r3, [pc, #356]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001928:	4a58      	ldr	r2, [pc, #352]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 800192a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800192e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001930:	4b56      	ldr	r3, [pc, #344]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	4b52      	ldr	r3, [pc, #328]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001944:	4a51      	ldr	r2, [pc, #324]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	6313      	str	r3, [r2, #48]	@ 0x30
 800194c:	4b4f      	ldr	r3, [pc, #316]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001960:	4a4a      	ldr	r2, [pc, #296]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 8001962:	f043 0308 	orr.w	r3, r3, #8
 8001966:	6313      	str	r3, [r2, #48]	@ 0x30
 8001968:	4b48      	ldr	r3, [pc, #288]	@ (8001a8c <HAL_LTDC_MspInit+0x234>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001974:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001978:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001986:	230e      	movs	r3, #14
 8001988:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800198e:	4619      	mov	r1, r3
 8001990:	483f      	ldr	r0, [pc, #252]	@ (8001a90 <HAL_LTDC_MspInit+0x238>)
 8001992:	f000 fe61 	bl	8002658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001996:	f641 0358 	movw	r3, #6232	@ 0x1858
 800199a:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019a8:	230e      	movs	r3, #14
 80019aa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019b0:	4619      	mov	r1, r3
 80019b2:	4838      	ldr	r0, [pc, #224]	@ (8001a94 <HAL_LTDC_MspInit+0x23c>)
 80019b4:	f000 fe50 	bl	8002658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80019b8:	2303      	movs	r3, #3
 80019ba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80019c8:	2309      	movs	r3, #9
 80019ca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019d0:	4619      	mov	r1, r3
 80019d2:	4831      	ldr	r0, [pc, #196]	@ (8001a98 <HAL_LTDC_MspInit+0x240>)
 80019d4:	f000 fe40 	bl	8002658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80019d8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80019dc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019ea:	230e      	movs	r3, #14
 80019ec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019f2:	4619      	mov	r1, r3
 80019f4:	4828      	ldr	r0, [pc, #160]	@ (8001a98 <HAL_LTDC_MspInit+0x240>)
 80019f6:	f000 fe2f 	bl	8002658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80019fa:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80019fe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a0c:	230e      	movs	r3, #14
 8001a0e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a14:	4619      	mov	r1, r3
 8001a16:	4821      	ldr	r0, [pc, #132]	@ (8001a9c <HAL_LTDC_MspInit+0x244>)
 8001a18:	f000 fe1e 	bl	8002658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001a1c:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001a20:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a2e:	230e      	movs	r3, #14
 8001a30:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a32:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a36:	4619      	mov	r1, r3
 8001a38:	4819      	ldr	r0, [pc, #100]	@ (8001aa0 <HAL_LTDC_MspInit+0x248>)
 8001a3a:	f000 fe0d 	bl	8002658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001a3e:	2348      	movs	r3, #72	@ 0x48
 8001a40:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a4e:	230e      	movs	r3, #14
 8001a50:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a56:	4619      	mov	r1, r3
 8001a58:	4812      	ldr	r0, [pc, #72]	@ (8001aa4 <HAL_LTDC_MspInit+0x24c>)
 8001a5a:	f000 fdfd 	bl	8002658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001a5e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a62:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001a70:	2309      	movs	r3, #9
 8001a72:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4808      	ldr	r0, [pc, #32]	@ (8001a9c <HAL_LTDC_MspInit+0x244>)
 8001a7c:	f000 fdec 	bl	8002658 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001a80:	bf00      	nop
 8001a82:	3768      	adds	r7, #104	@ 0x68
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40016800 	.word	0x40016800
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40021400 	.word	0x40021400
 8001a94:	40020000 	.word	0x40020000
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	40021800 	.word	0x40021800
 8001aa0:	40020800 	.word	0x40020800
 8001aa4:	40020c00 	.word	0x40020c00

08001aa8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae4 <HAL_RNG_MspInit+0x3c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d10d      	bne.n	8001ad6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <HAL_RNG_MspInit+0x40>)
 8001ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac2:	4a09      	ldr	r2, [pc, #36]	@ (8001ae8 <HAL_RNG_MspInit+0x40>)
 8001ac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ac8:	6353      	str	r3, [r2, #52]	@ 0x34
 8001aca:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <HAL_RNG_MspInit+0x40>)
 8001acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001ad6:	bf00      	nop
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	50060800 	.word	0x50060800
 8001ae8:	40023800 	.word	0x40023800

08001aec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	@ 0x28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a19      	ldr	r2, [pc, #100]	@ (8001b70 <HAL_SPI_MspInit+0x84>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d12c      	bne.n	8001b68 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <HAL_SPI_MspInit+0x88>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	4a17      	ldr	r2, [pc, #92]	@ (8001b74 <HAL_SPI_MspInit+0x88>)
 8001b18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <HAL_SPI_MspInit+0x88>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <HAL_SPI_MspInit+0x88>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	4a10      	ldr	r2, [pc, #64]	@ (8001b74 <HAL_SPI_MspInit+0x88>)
 8001b34:	f043 0320 	orr.w	r3, r3, #32
 8001b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b74 <HAL_SPI_MspInit+0x88>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	f003 0320 	and.w	r3, r3, #32
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001b46:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001b58:	2305      	movs	r3, #5
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4619      	mov	r1, r3
 8001b62:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <HAL_SPI_MspInit+0x8c>)
 8001b64:	f000 fd78 	bl	8002658 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001b68:	bf00      	nop
 8001b6a:	3728      	adds	r7, #40	@ 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40015000 	.word	0x40015000
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40021400 	.word	0x40021400

08001b7c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a08      	ldr	r2, [pc, #32]	@ (8001bac <HAL_SPI_MspDeInit+0x30>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d10a      	bne.n	8001ba4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001b8e:	4b08      	ldr	r3, [pc, #32]	@ (8001bb0 <HAL_SPI_MspDeInit+0x34>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b92:	4a07      	ldr	r2, [pc, #28]	@ (8001bb0 <HAL_SPI_MspDeInit+0x34>)
 8001b94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001b98:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001b9a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001b9e:	4805      	ldr	r0, [pc, #20]	@ (8001bb4 <HAL_SPI_MspDeInit+0x38>)
 8001ba0:	f000 ff06 	bl	80029b0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40015000 	.word	0x40015000
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40021400 	.word	0x40021400

08001bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bc8:	d10d      	bne.n	8001be6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <HAL_TIM_Base_MspInit+0x3c>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	4a08      	ldr	r2, [pc, #32]	@ (8001bf4 <HAL_TIM_Base_MspInit+0x3c>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bda:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <HAL_TIM_Base_MspInit+0x3c>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <NMI_Handler+0x4>

08001c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <HardFault_Handler+0x4>

08001c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <MemManage_Handler+0x4>

08001c10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <BusFault_Handler+0x4>

08001c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <UsageFault_Handler+0x4>

08001c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c4e:	f000 fbd9 	bl	8002404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8001c5c:	f000 f9ce 	bl	8001ffc <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8001c60:	f000 f98e 	bl	8001f80 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001c64:	2202      	movs	r2, #2
 8001c66:	2103      	movs	r1, #3
 8001c68:	2082      	movs	r0, #130	@ 0x82
 8001c6a:	f000 fa1b 	bl	80020a4 <I2C3_Write>
    HAL_Delay(5);
 8001c6e:	2005      	movs	r0, #5
 8001c70:	f000 fbe8 	bl	8002444 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2103      	movs	r1, #3
 8001c78:	2082      	movs	r0, #130	@ 0x82
 8001c7a:	f000 fa13 	bl	80020a4 <I2C3_Write>
    HAL_Delay(2);
 8001c7e:	2002      	movs	r0, #2
 8001c80:	f000 fbe0 	bl	8002444 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8001c84:	1cba      	adds	r2, r7, #2
 8001c86:	2302      	movs	r3, #2
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2082      	movs	r0, #130	@ 0x82
 8001c8c:	f000 fa5a 	bl	8002144 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8001c96:	887b      	ldrh	r3, [r7, #2]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	88fb      	ldrh	r3, [r7, #6]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	f640 0211 	movw	r2, #2065	@ 0x811
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d001      	beq.n	8001cb0 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e075      	b.n	8001d9c <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	2103      	movs	r1, #3
 8001cb4:	2082      	movs	r0, #130	@ 0x82
 8001cb6:	f000 f9f5 	bl	80020a4 <I2C3_Write>
    HAL_Delay(5);
 8001cba:	2005      	movs	r0, #5
 8001cbc:	f000 fbc2 	bl	8002444 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2103      	movs	r1, #3
 8001cc4:	2082      	movs	r0, #130	@ 0x82
 8001cc6:	f000 f9ed 	bl	80020a4 <I2C3_Write>
    HAL_Delay(2);
 8001cca:	2002      	movs	r0, #2
 8001ccc:	f000 fbba 	bl	8002444 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001cd0:	2004      	movs	r0, #4
 8001cd2:	f000 f867 	bl	8001da4 <STMPE811_Read>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8001cda:	797b      	ldrb	r3, [r7, #5]
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001ce2:	797b      	ldrb	r3, [r7, #5]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	2082      	movs	r0, #130	@ 0x82
 8001cea:	f000 f9db 	bl	80020a4 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001cee:	2004      	movs	r0, #4
 8001cf0:	f000 f858 	bl	8001da4 <STMPE811_Read>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8001cf8:	797b      	ldrb	r3, [r7, #5]
 8001cfa:	f023 0302 	bic.w	r3, r3, #2
 8001cfe:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001d00:	797b      	ldrb	r3, [r7, #5]
 8001d02:	461a      	mov	r2, r3
 8001d04:	2104      	movs	r1, #4
 8001d06:	2082      	movs	r0, #130	@ 0x82
 8001d08:	f000 f9cc 	bl	80020a4 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8001d0c:	2249      	movs	r2, #73	@ 0x49
 8001d0e:	2120      	movs	r1, #32
 8001d10:	2082      	movs	r0, #130	@ 0x82
 8001d12:	f000 f9c7 	bl	80020a4 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8001d16:	2002      	movs	r0, #2
 8001d18:	f000 fb94 	bl	8002444 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	2121      	movs	r1, #33	@ 0x21
 8001d20:	2082      	movs	r0, #130	@ 0x82
 8001d22:	f000 f9bf 	bl	80020a4 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8001d26:	2017      	movs	r0, #23
 8001d28:	f000 f83c 	bl	8001da4 <STMPE811_Read>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8001d30:	797b      	ldrb	r3, [r7, #5]
 8001d32:	f043 031e 	orr.w	r3, r3, #30
 8001d36:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8001d38:	797b      	ldrb	r3, [r7, #5]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2117      	movs	r1, #23
 8001d3e:	2082      	movs	r0, #130	@ 0x82
 8001d40:	f000 f9b0 	bl	80020a4 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8001d44:	229a      	movs	r2, #154	@ 0x9a
 8001d46:	2141      	movs	r1, #65	@ 0x41
 8001d48:	2082      	movs	r0, #130	@ 0x82
 8001d4a:	f000 f9ab 	bl	80020a4 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8001d4e:	2201      	movs	r2, #1
 8001d50:	214a      	movs	r1, #74	@ 0x4a
 8001d52:	2082      	movs	r0, #130	@ 0x82
 8001d54:	f000 f9a6 	bl	80020a4 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	214b      	movs	r1, #75	@ 0x4b
 8001d5c:	2082      	movs	r0, #130	@ 0x82
 8001d5e:	f000 f9a1 	bl	80020a4 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8001d62:	2200      	movs	r2, #0
 8001d64:	214b      	movs	r1, #75	@ 0x4b
 8001d66:	2082      	movs	r0, #130	@ 0x82
 8001d68:	f000 f99c 	bl	80020a4 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2156      	movs	r1, #86	@ 0x56
 8001d70:	2082      	movs	r0, #130	@ 0x82
 8001d72:	f000 f997 	bl	80020a4 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8001d76:	2201      	movs	r2, #1
 8001d78:	2158      	movs	r1, #88	@ 0x58
 8001d7a:	2082      	movs	r0, #130	@ 0x82
 8001d7c:	f000 f992 	bl	80020a4 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8001d80:	2203      	movs	r2, #3
 8001d82:	2140      	movs	r1, #64	@ 0x40
 8001d84:	2082      	movs	r0, #130	@ 0x82
 8001d86:	f000 f98d 	bl	80020a4 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8001d8a:	22ff      	movs	r2, #255	@ 0xff
 8001d8c:	210b      	movs	r1, #11
 8001d8e:	2082      	movs	r0, #130	@ 0x82
 8001d90:	f000 f988 	bl	80020a4 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8001d94:	20c8      	movs	r0, #200	@ 0xc8
 8001d96:	f000 fb55 	bl	8002444 <HAL_Delay>

    return STMPE811_State_Ok;
 8001d9a:	2302      	movs	r3, #2

}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8001dae:	f107 020f 	add.w	r2, r7, #15
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	4619      	mov	r1, r3
 8001db6:	2082      	movs	r0, #130	@ 0x82
 8001db8:	f000 f99e 	bl	80020f8 <I2C3_Read>

    return readData;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	791a      	ldrb	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8001dd6:	2040      	movs	r0, #64	@ 0x40
 8001dd8:	f7ff ffe4 	bl	8001da4 <STMPE811_Read>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8001de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	db0e      	blt.n	8001e06 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8001dee:	2201      	movs	r2, #1
 8001df0:	214b      	movs	r1, #75	@ 0x4b
 8001df2:	2082      	movs	r0, #130	@ 0x82
 8001df4:	f000 f956 	bl	80020a4 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	214b      	movs	r1, #75	@ 0x4b
 8001dfc:	2082      	movs	r0, #130	@ 0x82
 8001dfe:	f000 f951 	bl	80020a4 <I2C3_Write>

        return STMPE811_State_Released;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0a7      	b.n	8001f56 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	799b      	ldrb	r3, [r3, #6]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d117      	bne.n	8001e3e <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f9b8 	bl	8002188 <TM_STMPE811_ReadX>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	885b      	ldrh	r3, [r3, #2]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 fa0b 	bl	8002244 <TM_STMPE811_ReadY>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001e34:	3301      	adds	r3, #1
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	805a      	strh	r2, [r3, #2]
 8001e3c:	e048      	b.n	8001ed0 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	799b      	ldrb	r3, [r3, #6]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d112      	bne.n	8001e6c <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f99c 	bl	8002188 <TM_STMPE811_ReadX>
 8001e50:	4603      	mov	r3, r0
 8001e52:	461a      	mov	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	885b      	ldrh	r3, [r3, #2]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 f9f1 	bl	8002244 <TM_STMPE811_ReadY>
 8001e62:	4603      	mov	r3, r0
 8001e64:	461a      	mov	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	805a      	strh	r2, [r3, #2]
 8001e6a:	e031      	b.n	8001ed0 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	799b      	ldrb	r3, [r3, #6]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d115      	bne.n	8001ea0 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	885b      	ldrh	r3, [r3, #2]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 f985 	bl	8002188 <TM_STMPE811_ReadX>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f9da 	bl	8002244 <TM_STMPE811_ReadY>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001e96:	3301      	adds	r3, #1
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	801a      	strh	r2, [r3, #0]
 8001e9e:	e017      	b.n	8001ed0 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	799b      	ldrb	r3, [r3, #6]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d113      	bne.n	8001ed0 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 f96b 	bl	8002188 <TM_STMPE811_ReadX>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f9be 	bl	8002244 <TM_STMPE811_ReadY>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	461a      	mov	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	214b      	movs	r1, #75	@ 0x4b
 8001ed4:	2082      	movs	r0, #130	@ 0x82
 8001ed6:	f000 f8e5 	bl	80020a4 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8001eda:	2200      	movs	r2, #0
 8001edc:	214b      	movs	r1, #75	@ 0x4b
 8001ede:	2082      	movs	r0, #130	@ 0x82
 8001ee0:	f000 f8e0 	bl	80020a4 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	799b      	ldrb	r3, [r3, #6]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <STMPE811_ReadTouch+0x12e>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	799b      	ldrb	r3, [r3, #6]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d115      	bne.n	8001f20 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d027      	beq.n	8001f4c <STMPE811_ReadTouch+0x186>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	2bee      	cmp	r3, #238	@ 0xee
 8001f02:	d823      	bhi.n	8001f4c <STMPE811_ReadTouch+0x186>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	885b      	ldrh	r3, [r3, #2]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d01f      	beq.n	8001f4c <STMPE811_ReadTouch+0x186>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	885b      	ldrh	r3, [r3, #2]
 8001f10:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8001f14:	d81a      	bhi.n	8001f4c <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e01a      	b.n	8001f56 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d012      	beq.n	8001f4e <STMPE811_ReadTouch+0x188>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8001f30:	d80d      	bhi.n	8001f4e <STMPE811_ReadTouch+0x188>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	885b      	ldrh	r3, [r3, #2]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d009      	beq.n	8001f4e <STMPE811_ReadTouch+0x188>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	885b      	ldrh	r3, [r3, #2]
 8001f3e:	2bee      	cmp	r3, #238	@ 0xee
 8001f40:	d805      	bhi.n	8001f4e <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e004      	b.n	8001f56 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8001f4c:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8001f54:	2301      	movs	r3, #1
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8001f64:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <verifyHAL_I2C_IS_OKAY+0x1c>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20025bcc 	.word	0x20025bcc

08001f80 <I2C3_Init>:

static void I2C3_Init()
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	603b      	str	r3, [r7, #0]
 8001f8a:	4b18      	ldr	r3, [pc, #96]	@ (8001fec <I2C3_Init+0x6c>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	4a17      	ldr	r2, [pc, #92]	@ (8001fec <I2C3_Init+0x6c>)
 8001f90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f96:	4b15      	ldr	r3, [pc, #84]	@ (8001fec <I2C3_Init+0x6c>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8001fa2:	4b13      	ldr	r3, [pc, #76]	@ (8001ff0 <I2C3_Init+0x70>)
 8001fa4:	4a13      	ldr	r2, [pc, #76]	@ (8001ff4 <I2C3_Init+0x74>)
 8001fa6:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <I2C3_Init+0x70>)
 8001faa:	4a13      	ldr	r2, [pc, #76]	@ (8001ff8 <I2C3_Init+0x78>)
 8001fac:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fae:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <I2C3_Init+0x70>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <I2C3_Init+0x70>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <I2C3_Init+0x70>)
 8001fbc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fc0:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <I2C3_Init+0x70>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <I2C3_Init+0x70>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8001fce:	4808      	ldr	r0, [pc, #32]	@ (8001ff0 <I2C3_Init+0x70>)
 8001fd0:	f000 fe14 	bl	8002bfc <HAL_I2C_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8001fde:	bf00      	nop
 8001fe0:	e7fd      	b.n	8001fde <I2C3_Init+0x5e>
    }
    return;
 8001fe2:	bf00      	nop
}
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	20025b78 	.word	0x20025b78
 8001ff4:	40005c00 	.word	0x40005c00
 8001ff8:	000186a0 	.word	0x000186a0

08001ffc <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
 8002010:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	4b20      	ldr	r3, [pc, #128]	@ (8002098 <I2C3_MspInit+0x9c>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	4a1f      	ldr	r2, [pc, #124]	@ (8002098 <I2C3_MspInit+0x9c>)
 800201c:	f043 0304 	orr.w	r3, r3, #4
 8002020:	6313      	str	r3, [r2, #48]	@ 0x30
 8002022:	4b1d      	ldr	r3, [pc, #116]	@ (8002098 <I2C3_MspInit+0x9c>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <I2C3_MspInit+0x9c>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	4a18      	ldr	r2, [pc, #96]	@ (8002098 <I2C3_MspInit+0x9c>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6313      	str	r3, [r2, #48]	@ 0x30
 800203e:	4b16      	ldr	r3, [pc, #88]	@ (8002098 <I2C3_MspInit+0x9c>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800204a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800204e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002050:	2312      	movs	r3, #18
 8002052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800205c:	2304      	movs	r3, #4
 800205e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	4619      	mov	r1, r3
 8002066:	480d      	ldr	r0, [pc, #52]	@ (800209c <I2C3_MspInit+0xa0>)
 8002068:	f000 faf6 	bl	8002658 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800206c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002070:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002072:	2312      	movs	r3, #18
 8002074:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800207e:	2304      	movs	r3, #4
 8002080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002082:	f107 030c 	add.w	r3, r7, #12
 8002086:	4619      	mov	r1, r3
 8002088:	4805      	ldr	r0, [pc, #20]	@ (80020a0 <I2C3_MspInit+0xa4>)
 800208a:	f000 fae5 	bl	8002658 <HAL_GPIO_Init>
    
}
 800208e:	bf00      	nop
 8002090:	3720      	adds	r7, #32
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800
 800209c:	40020800 	.word	0x40020800
 80020a0:	40020000 	.word	0x40020000

080020a4 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af04      	add	r7, sp, #16
 80020aa:	4603      	mov	r3, r0
 80020ac:	80fb      	strh	r3, [r7, #6]
 80020ae:	460b      	mov	r3, r1
 80020b0:	717b      	strb	r3, [r7, #5]
 80020b2:	4613      	mov	r3, r2
 80020b4:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80020b6:	793b      	ldrb	r3, [r7, #4]
 80020b8:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80020ba:	797b      	ldrb	r3, [r7, #5]
 80020bc:	b29a      	uxth	r2, r3
 80020be:	88f9      	ldrh	r1, [r7, #6]
 80020c0:	4b0a      	ldr	r3, [pc, #40]	@ (80020ec <I2C3_Write+0x48>)
 80020c2:	9302      	str	r3, [sp, #8]
 80020c4:	2301      	movs	r3, #1
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	f107 030f 	add.w	r3, r7, #15
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	2301      	movs	r3, #1
 80020d0:	4807      	ldr	r0, [pc, #28]	@ (80020f0 <I2C3_Write+0x4c>)
 80020d2:	f000 fed7 	bl	8002e84 <HAL_I2C_Mem_Write>
 80020d6:	4603      	mov	r3, r0
 80020d8:	461a      	mov	r2, r3
 80020da:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <I2C3_Write+0x50>)
 80020dc:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80020de:	f7ff ff3f 	bl	8001f60 <verifyHAL_I2C_IS_OKAY>
}
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	0003d090 	.word	0x0003d090
 80020f0:	20025b78 	.word	0x20025b78
 80020f4:	20025bcc 	.word	0x20025bcc

080020f8 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af04      	add	r7, sp, #16
 80020fe:	4603      	mov	r3, r0
 8002100:	603a      	str	r2, [r7, #0]
 8002102:	71fb      	strb	r3, [r7, #7]
 8002104:	460b      	mov	r3, r1
 8002106:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	b299      	uxth	r1, r3
 800210c:	79bb      	ldrb	r3, [r7, #6]
 800210e:	b29a      	uxth	r2, r3
 8002110:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <I2C3_Read+0x40>)
 8002112:	9302      	str	r3, [sp, #8]
 8002114:	2301      	movs	r3, #1
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2301      	movs	r3, #1
 800211e:	4807      	ldr	r0, [pc, #28]	@ (800213c <I2C3_Read+0x44>)
 8002120:	f000 ffaa 	bl	8003078 <HAL_I2C_Mem_Read>
 8002124:	4603      	mov	r3, r0
 8002126:	461a      	mov	r2, r3
 8002128:	4b05      	ldr	r3, [pc, #20]	@ (8002140 <I2C3_Read+0x48>)
 800212a:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800212c:	f7ff ff18 	bl	8001f60 <verifyHAL_I2C_IS_OKAY>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	0003d090 	.word	0x0003d090
 800213c:	20025b78 	.word	0x20025b78
 8002140:	20025bcc 	.word	0x20025bcc

08002144 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af04      	add	r7, sp, #16
 800214a:	603a      	str	r2, [r7, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
 8002152:	460b      	mov	r3, r1
 8002154:	71bb      	strb	r3, [r7, #6]
 8002156:	4613      	mov	r3, r2
 8002158:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	b299      	uxth	r1, r3
 800215e:	79bb      	ldrb	r3, [r7, #6]
 8002160:	b29a      	uxth	r2, r3
 8002162:	4b07      	ldr	r3, [pc, #28]	@ (8002180 <I2C3_MulitByteRead+0x3c>)
 8002164:	9302      	str	r3, [sp, #8]
 8002166:	88bb      	ldrh	r3, [r7, #4]
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2301      	movs	r3, #1
 8002170:	4804      	ldr	r0, [pc, #16]	@ (8002184 <I2C3_MulitByteRead+0x40>)
 8002172:	f000 ff81 	bl	8003078 <HAL_I2C_Mem_Read>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	0003d090 	.word	0x0003d090
 8002184:	20025b78 	.word	0x20025b78

08002188 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002192:	204d      	movs	r0, #77	@ 0x4d
 8002194:	f7ff fe06 	bl	8001da4 <STMPE811_Read>
 8002198:	4603      	mov	r3, r0
 800219a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 800219c:	204e      	movs	r0, #78	@ 0x4e
 800219e:	f7ff fe01 	bl	8001da4 <STMPE811_Read>
 80021a2:	4603      	mov	r3, r0
 80021a4:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80021a6:	7a7b      	ldrb	r3, [r7, #9]
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	7a3b      	ldrb	r3, [r7, #8]
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	4313      	orrs	r3, r2
 80021b2:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80021b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021b8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80021bc:	4293      	cmp	r3, r2
 80021be:	dc06      	bgt.n	80021ce <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80021c0:	89fb      	ldrh	r3, [r7, #14]
 80021c2:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80021c6:	330c      	adds	r3, #12
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	81fb      	strh	r3, [r7, #14]
 80021cc:	e005      	b.n	80021da <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 80021ce:	89fb      	ldrh	r3, [r7, #14]
 80021d0:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80021d4:	3308      	adds	r3, #8
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80021da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021de:	4a18      	ldr	r2, [pc, #96]	@ (8002240 <TM_STMPE811_ReadX+0xb8>)
 80021e0:	fb82 1203 	smull	r1, r2, r2, r3
 80021e4:	441a      	add	r2, r3
 80021e6:	10d2      	asrs	r2, r2, #3
 80021e8:	17db      	asrs	r3, r3, #31
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80021ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021f2:	2bef      	cmp	r3, #239	@ 0xef
 80021f4:	dd02      	ble.n	80021fc <TM_STMPE811_ReadX+0x74>
        val = 239;
 80021f6:	23ef      	movs	r3, #239	@ 0xef
 80021f8:	81fb      	strh	r3, [r7, #14]
 80021fa:	e005      	b.n	8002208 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80021fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002200:	2b00      	cmp	r3, #0
 8002202:	da01      	bge.n	8002208 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002208:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	429a      	cmp	r2, r3
 8002210:	dd05      	ble.n	800221e <TM_STMPE811_ReadX+0x96>
 8002212:	89fa      	ldrh	r2, [r7, #14]
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	b29b      	uxth	r3, r3
 800221a:	b21b      	sxth	r3, r3
 800221c:	e004      	b.n	8002228 <TM_STMPE811_ReadX+0xa0>
 800221e:	89fb      	ldrh	r3, [r7, #14]
 8002220:	88fa      	ldrh	r2, [r7, #6]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	b29b      	uxth	r3, r3
 8002226:	b21b      	sxth	r3, r3
 8002228:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 800222a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800222e:	2b04      	cmp	r3, #4
 8002230:	dd01      	ble.n	8002236 <TM_STMPE811_ReadX+0xae>
        return val;
 8002232:	89fb      	ldrh	r3, [r7, #14]
 8002234:	e000      	b.n	8002238 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8002236:	88fb      	ldrh	r3, [r7, #6]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	88888889 	.word	0x88888889

08002244 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800224e:	204f      	movs	r0, #79	@ 0x4f
 8002250:	f7ff fda8 	bl	8001da4 <STMPE811_Read>
 8002254:	4603      	mov	r3, r0
 8002256:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002258:	2050      	movs	r0, #80	@ 0x50
 800225a:	f7ff fda3 	bl	8001da4 <STMPE811_Read>
 800225e:	4603      	mov	r3, r0
 8002260:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002262:	7a7b      	ldrb	r3, [r7, #9]
 8002264:	021b      	lsls	r3, r3, #8
 8002266:	b21a      	sxth	r2, r3
 8002268:	7a3b      	ldrb	r3, [r7, #8]
 800226a:	b21b      	sxth	r3, r3
 800226c:	4313      	orrs	r3, r2
 800226e:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002270:	89fb      	ldrh	r3, [r7, #14]
 8002272:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002276:	b29b      	uxth	r3, r3
 8002278:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 800227a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800227e:	4a19      	ldr	r2, [pc, #100]	@ (80022e4 <TM_STMPE811_ReadY+0xa0>)
 8002280:	fb82 1203 	smull	r1, r2, r2, r3
 8002284:	1052      	asrs	r2, r2, #1
 8002286:	17db      	asrs	r3, r3, #31
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 800228c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002290:	2b00      	cmp	r3, #0
 8002292:	dc02      	bgt.n	800229a <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	81fb      	strh	r3, [r7, #14]
 8002298:	e007      	b.n	80022aa <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 800229a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800229e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80022a2:	db02      	blt.n	80022aa <TM_STMPE811_ReadY+0x66>
        val = 319;
 80022a4:	f240 133f 	movw	r3, #319	@ 0x13f
 80022a8:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80022aa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	dd05      	ble.n	80022c0 <TM_STMPE811_ReadY+0x7c>
 80022b4:	89fa      	ldrh	r2, [r7, #14]
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	b21b      	sxth	r3, r3
 80022be:	e004      	b.n	80022ca <TM_STMPE811_ReadY+0x86>
 80022c0:	89fb      	ldrh	r3, [r7, #14]
 80022c2:	88fa      	ldrh	r2, [r7, #6]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	b21b      	sxth	r3, r3
 80022ca:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80022cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	dd01      	ble.n	80022d8 <TM_STMPE811_ReadY+0x94>
        return val;
 80022d4:	89fb      	ldrh	r3, [r7, #14]
 80022d6:	e000      	b.n	80022da <TM_STMPE811_ReadY+0x96>
    }
    return y;
 80022d8:	88fb      	ldrh	r3, [r7, #6]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	2e8ba2e9 	.word	0x2e8ba2e9

080022e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <SystemInit+0x20>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f2:	4a05      	ldr	r2, [pc, #20]	@ (8002308 <SystemInit+0x20>)
 80022f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800230c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002344 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002310:	f7ff ffea 	bl	80022e8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002314:	480c      	ldr	r0, [pc, #48]	@ (8002348 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002316:	490d      	ldr	r1, [pc, #52]	@ (800234c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002318:	4a0d      	ldr	r2, [pc, #52]	@ (8002350 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800231a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800231c:	e002      	b.n	8002324 <LoopCopyDataInit>

0800231e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800231e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002322:	3304      	adds	r3, #4

08002324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002328:	d3f9      	bcc.n	800231e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800232a:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800232c:	4c0a      	ldr	r4, [pc, #40]	@ (8002358 <LoopFillZerobss+0x22>)
  movs r3, #0
 800232e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002330:	e001      	b.n	8002336 <LoopFillZerobss>

08002332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002334:	3204      	adds	r2, #4

08002336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002338:	d3fb      	bcc.n	8002332 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800233a:	f003 ff05 	bl	8006148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800233e:	f7fe fe2e 	bl	8000f9e <main>
  bx  lr    
 8002342:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002344:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800234c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002350:	0800650c 	.word	0x0800650c
  ldr r2, =_sbss
 8002354:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002358:	20025dc8 	.word	0x20025dc8

0800235c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800235c:	e7fe      	b.n	800235c <ADC_IRQHandler>
	...

08002360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002364:	4b0e      	ldr	r3, [pc, #56]	@ (80023a0 <HAL_Init+0x40>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0d      	ldr	r2, [pc, #52]	@ (80023a0 <HAL_Init+0x40>)
 800236a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800236e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002370:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <HAL_Init+0x40>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <HAL_Init+0x40>)
 8002376:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800237a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800237c:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <HAL_Init+0x40>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a07      	ldr	r2, [pc, #28]	@ (80023a0 <HAL_Init+0x40>)
 8002382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002386:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002388:	2003      	movs	r0, #3
 800238a:	f000 f931 	bl	80025f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800238e:	2000      	movs	r0, #0
 8002390:	f000 f808 	bl	80023a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002394:	f7ff f9ce 	bl	8001734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023c00 	.word	0x40023c00

080023a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023ac:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <HAL_InitTick+0x54>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <HAL_InitTick+0x58>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	4619      	mov	r1, r3
 80023b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80023be:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f93b 	bl	800263e <HAL_SYSTICK_Config>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00e      	b.n	80023f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b0f      	cmp	r3, #15
 80023d6:	d80a      	bhi.n	80023ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d8:	2200      	movs	r2, #0
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023e0:	f000 f911 	bl	8002606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e4:	4a06      	ldr	r2, [pc, #24]	@ (8002400 <HAL_InitTick+0x5c>)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e000      	b.n	80023f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000004 	.word	0x20000004
 80023fc:	2000000c 	.word	0x2000000c
 8002400:	20000008 	.word	0x20000008

08002404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002408:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_IncTick+0x20>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <HAL_IncTick+0x24>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4413      	add	r3, r2
 8002414:	4a04      	ldr	r2, [pc, #16]	@ (8002428 <HAL_IncTick+0x24>)
 8002416:	6013      	str	r3, [r2, #0]
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	2000000c 	.word	0x2000000c
 8002428:	20025bd0 	.word	0x20025bd0

0800242c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return uwTick;
 8002430:	4b03      	ldr	r3, [pc, #12]	@ (8002440 <HAL_GetTick+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20025bd0 	.word	0x20025bd0

08002444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800244c:	f7ff ffee 	bl	800242c <HAL_GetTick>
 8002450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800245c:	d005      	beq.n	800246a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800245e:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <HAL_Delay+0x44>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4413      	add	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800246a:	bf00      	nop
 800246c:	f7ff ffde 	bl	800242c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	429a      	cmp	r2, r3
 800247a:	d8f7      	bhi.n	800246c <HAL_Delay+0x28>
  {
  }
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	2000000c 	.word	0x2000000c

0800248c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800249c:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024a8:	4013      	ands	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024be:	4a04      	ldr	r2, [pc, #16]	@ (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	60d3      	str	r3, [r2, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d8:	4b04      	ldr	r3, [pc, #16]	@ (80024ec <__NVIC_GetPriorityGrouping+0x18>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	f003 0307 	and.w	r3, r3, #7
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002500:	2b00      	cmp	r3, #0
 8002502:	db0a      	blt.n	800251a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	b2da      	uxtb	r2, r3
 8002508:	490c      	ldr	r1, [pc, #48]	@ (800253c <__NVIC_SetPriority+0x4c>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	0112      	lsls	r2, r2, #4
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	440b      	add	r3, r1
 8002514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002518:	e00a      	b.n	8002530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4908      	ldr	r1, [pc, #32]	@ (8002540 <__NVIC_SetPriority+0x50>)
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	3b04      	subs	r3, #4
 8002528:	0112      	lsls	r2, r2, #4
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	440b      	add	r3, r1
 800252e:	761a      	strb	r2, [r3, #24]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000e100 	.word	0xe000e100
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	@ 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f1c3 0307 	rsb	r3, r3, #7
 800255e:	2b04      	cmp	r3, #4
 8002560:	bf28      	it	cs
 8002562:	2304      	movcs	r3, #4
 8002564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3304      	adds	r3, #4
 800256a:	2b06      	cmp	r3, #6
 800256c:	d902      	bls.n	8002574 <NVIC_EncodePriority+0x30>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3b03      	subs	r3, #3
 8002572:	e000      	b.n	8002576 <NVIC_EncodePriority+0x32>
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43da      	mvns	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	401a      	ands	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800258c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	43d9      	mvns	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	4313      	orrs	r3, r2
         );
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3724      	adds	r7, #36	@ 0x24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025bc:	d301      	bcc.n	80025c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025be:	2301      	movs	r3, #1
 80025c0:	e00f      	b.n	80025e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025c2:	4a0a      	ldr	r2, [pc, #40]	@ (80025ec <SysTick_Config+0x40>)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ca:	210f      	movs	r1, #15
 80025cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025d0:	f7ff ff8e 	bl	80024f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d4:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <SysTick_Config+0x40>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025da:	4b04      	ldr	r3, [pc, #16]	@ (80025ec <SysTick_Config+0x40>)
 80025dc:	2207      	movs	r2, #7
 80025de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	e000e010 	.word	0xe000e010

080025f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff ff47 	bl	800248c <__NVIC_SetPriorityGrouping>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002606:	b580      	push	{r7, lr}
 8002608:	b086      	sub	sp, #24
 800260a:	af00      	add	r7, sp, #0
 800260c:	4603      	mov	r3, r0
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
 8002612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002618:	f7ff ff5c 	bl	80024d4 <__NVIC_GetPriorityGrouping>
 800261c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	6978      	ldr	r0, [r7, #20]
 8002624:	f7ff ff8e 	bl	8002544 <NVIC_EncodePriority>
 8002628:	4602      	mov	r2, r0
 800262a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff5d 	bl	80024f0 <__NVIC_SetPriority>
}
 8002636:	bf00      	nop
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ffb0 	bl	80025ac <SysTick_Config>
 800264c:	4603      	mov	r3, r0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002658:	b480      	push	{r7}
 800265a:	b089      	sub	sp, #36	@ 0x24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800266a:	2300      	movs	r3, #0
 800266c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
 8002672:	e177      	b.n	8002964 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002674:	2201      	movs	r2, #1
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	429a      	cmp	r2, r3
 800268e:	f040 8166 	bne.w	800295e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d005      	beq.n	80026aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d130      	bne.n	800270c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	2203      	movs	r2, #3
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e0:	2201      	movs	r2, #1
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 0201 	and.w	r2, r3, #1
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	2b03      	cmp	r3, #3
 8002716:	d017      	beq.n	8002748 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	2203      	movs	r2, #3
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d123      	bne.n	800279c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	08da      	lsrs	r2, r3, #3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3208      	adds	r2, #8
 800275c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	220f      	movs	r2, #15
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	08da      	lsrs	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3208      	adds	r2, #8
 8002796:	69b9      	ldr	r1, [r7, #24]
 8002798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	2203      	movs	r2, #3
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0203 	and.w	r2, r3, #3
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80c0 	beq.w	800295e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	4b66      	ldr	r3, [pc, #408]	@ (800297c <HAL_GPIO_Init+0x324>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	4a65      	ldr	r2, [pc, #404]	@ (800297c <HAL_GPIO_Init+0x324>)
 80027e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ee:	4b63      	ldr	r3, [pc, #396]	@ (800297c <HAL_GPIO_Init+0x324>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027fa:	4a61      	ldr	r2, [pc, #388]	@ (8002980 <HAL_GPIO_Init+0x328>)
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	089b      	lsrs	r3, r3, #2
 8002800:	3302      	adds	r3, #2
 8002802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	220f      	movs	r2, #15
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a58      	ldr	r2, [pc, #352]	@ (8002984 <HAL_GPIO_Init+0x32c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d037      	beq.n	8002896 <HAL_GPIO_Init+0x23e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a57      	ldr	r2, [pc, #348]	@ (8002988 <HAL_GPIO_Init+0x330>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d031      	beq.n	8002892 <HAL_GPIO_Init+0x23a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a56      	ldr	r2, [pc, #344]	@ (800298c <HAL_GPIO_Init+0x334>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d02b      	beq.n	800288e <HAL_GPIO_Init+0x236>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a55      	ldr	r2, [pc, #340]	@ (8002990 <HAL_GPIO_Init+0x338>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d025      	beq.n	800288a <HAL_GPIO_Init+0x232>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a54      	ldr	r2, [pc, #336]	@ (8002994 <HAL_GPIO_Init+0x33c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d01f      	beq.n	8002886 <HAL_GPIO_Init+0x22e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a53      	ldr	r2, [pc, #332]	@ (8002998 <HAL_GPIO_Init+0x340>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d019      	beq.n	8002882 <HAL_GPIO_Init+0x22a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a52      	ldr	r2, [pc, #328]	@ (800299c <HAL_GPIO_Init+0x344>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d013      	beq.n	800287e <HAL_GPIO_Init+0x226>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a51      	ldr	r2, [pc, #324]	@ (80029a0 <HAL_GPIO_Init+0x348>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00d      	beq.n	800287a <HAL_GPIO_Init+0x222>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a50      	ldr	r2, [pc, #320]	@ (80029a4 <HAL_GPIO_Init+0x34c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d007      	beq.n	8002876 <HAL_GPIO_Init+0x21e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a4f      	ldr	r2, [pc, #316]	@ (80029a8 <HAL_GPIO_Init+0x350>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d101      	bne.n	8002872 <HAL_GPIO_Init+0x21a>
 800286e:	2309      	movs	r3, #9
 8002870:	e012      	b.n	8002898 <HAL_GPIO_Init+0x240>
 8002872:	230a      	movs	r3, #10
 8002874:	e010      	b.n	8002898 <HAL_GPIO_Init+0x240>
 8002876:	2308      	movs	r3, #8
 8002878:	e00e      	b.n	8002898 <HAL_GPIO_Init+0x240>
 800287a:	2307      	movs	r3, #7
 800287c:	e00c      	b.n	8002898 <HAL_GPIO_Init+0x240>
 800287e:	2306      	movs	r3, #6
 8002880:	e00a      	b.n	8002898 <HAL_GPIO_Init+0x240>
 8002882:	2305      	movs	r3, #5
 8002884:	e008      	b.n	8002898 <HAL_GPIO_Init+0x240>
 8002886:	2304      	movs	r3, #4
 8002888:	e006      	b.n	8002898 <HAL_GPIO_Init+0x240>
 800288a:	2303      	movs	r3, #3
 800288c:	e004      	b.n	8002898 <HAL_GPIO_Init+0x240>
 800288e:	2302      	movs	r3, #2
 8002890:	e002      	b.n	8002898 <HAL_GPIO_Init+0x240>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <HAL_GPIO_Init+0x240>
 8002896:	2300      	movs	r3, #0
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	f002 0203 	and.w	r2, r2, #3
 800289e:	0092      	lsls	r2, r2, #2
 80028a0:	4093      	lsls	r3, r2
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028a8:	4935      	ldr	r1, [pc, #212]	@ (8002980 <HAL_GPIO_Init+0x328>)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	089b      	lsrs	r3, r3, #2
 80028ae:	3302      	adds	r3, #2
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028b6:	4b3d      	ldr	r3, [pc, #244]	@ (80029ac <HAL_GPIO_Init+0x354>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028da:	4a34      	ldr	r2, [pc, #208]	@ (80029ac <HAL_GPIO_Init+0x354>)
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028e0:	4b32      	ldr	r3, [pc, #200]	@ (80029ac <HAL_GPIO_Init+0x354>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002904:	4a29      	ldr	r2, [pc, #164]	@ (80029ac <HAL_GPIO_Init+0x354>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800290a:	4b28      	ldr	r3, [pc, #160]	@ (80029ac <HAL_GPIO_Init+0x354>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800292e:	4a1f      	ldr	r2, [pc, #124]	@ (80029ac <HAL_GPIO_Init+0x354>)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002934:	4b1d      	ldr	r3, [pc, #116]	@ (80029ac <HAL_GPIO_Init+0x354>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002958:	4a14      	ldr	r2, [pc, #80]	@ (80029ac <HAL_GPIO_Init+0x354>)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3301      	adds	r3, #1
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b0f      	cmp	r3, #15
 8002968:	f67f ae84 	bls.w	8002674 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	3724      	adds	r7, #36	@ 0x24
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800
 8002980:	40013800 	.word	0x40013800
 8002984:	40020000 	.word	0x40020000
 8002988:	40020400 	.word	0x40020400
 800298c:	40020800 	.word	0x40020800
 8002990:	40020c00 	.word	0x40020c00
 8002994:	40021000 	.word	0x40021000
 8002998:	40021400 	.word	0x40021400
 800299c:	40021800 	.word	0x40021800
 80029a0:	40021c00 	.word	0x40021c00
 80029a4:	40022000 	.word	0x40022000
 80029a8:	40022400 	.word	0x40022400
 80029ac:	40013c00 	.word	0x40013c00

080029b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	e0d9      	b.n	8002b80 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029cc:	2201      	movs	r2, #1
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4013      	ands	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	f040 80c9 	bne.w	8002b7a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80029e8:	4a6b      	ldr	r2, [pc, #428]	@ (8002b98 <HAL_GPIO_DeInit+0x1e8>)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	089b      	lsrs	r3, r3, #2
 80029ee:	3302      	adds	r3, #2
 80029f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	220f      	movs	r2, #15
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	4013      	ands	r3, r2
 8002a08:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a63      	ldr	r2, [pc, #396]	@ (8002b9c <HAL_GPIO_DeInit+0x1ec>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d037      	beq.n	8002a82 <HAL_GPIO_DeInit+0xd2>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a62      	ldr	r2, [pc, #392]	@ (8002ba0 <HAL_GPIO_DeInit+0x1f0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d031      	beq.n	8002a7e <HAL_GPIO_DeInit+0xce>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a61      	ldr	r2, [pc, #388]	@ (8002ba4 <HAL_GPIO_DeInit+0x1f4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d02b      	beq.n	8002a7a <HAL_GPIO_DeInit+0xca>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a60      	ldr	r2, [pc, #384]	@ (8002ba8 <HAL_GPIO_DeInit+0x1f8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d025      	beq.n	8002a76 <HAL_GPIO_DeInit+0xc6>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a5f      	ldr	r2, [pc, #380]	@ (8002bac <HAL_GPIO_DeInit+0x1fc>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01f      	beq.n	8002a72 <HAL_GPIO_DeInit+0xc2>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a5e      	ldr	r2, [pc, #376]	@ (8002bb0 <HAL_GPIO_DeInit+0x200>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d019      	beq.n	8002a6e <HAL_GPIO_DeInit+0xbe>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a5d      	ldr	r2, [pc, #372]	@ (8002bb4 <HAL_GPIO_DeInit+0x204>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <HAL_GPIO_DeInit+0xba>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a5c      	ldr	r2, [pc, #368]	@ (8002bb8 <HAL_GPIO_DeInit+0x208>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00d      	beq.n	8002a66 <HAL_GPIO_DeInit+0xb6>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a5b      	ldr	r2, [pc, #364]	@ (8002bbc <HAL_GPIO_DeInit+0x20c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d007      	beq.n	8002a62 <HAL_GPIO_DeInit+0xb2>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a5a      	ldr	r2, [pc, #360]	@ (8002bc0 <HAL_GPIO_DeInit+0x210>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d101      	bne.n	8002a5e <HAL_GPIO_DeInit+0xae>
 8002a5a:	2309      	movs	r3, #9
 8002a5c:	e012      	b.n	8002a84 <HAL_GPIO_DeInit+0xd4>
 8002a5e:	230a      	movs	r3, #10
 8002a60:	e010      	b.n	8002a84 <HAL_GPIO_DeInit+0xd4>
 8002a62:	2308      	movs	r3, #8
 8002a64:	e00e      	b.n	8002a84 <HAL_GPIO_DeInit+0xd4>
 8002a66:	2307      	movs	r3, #7
 8002a68:	e00c      	b.n	8002a84 <HAL_GPIO_DeInit+0xd4>
 8002a6a:	2306      	movs	r3, #6
 8002a6c:	e00a      	b.n	8002a84 <HAL_GPIO_DeInit+0xd4>
 8002a6e:	2305      	movs	r3, #5
 8002a70:	e008      	b.n	8002a84 <HAL_GPIO_DeInit+0xd4>
 8002a72:	2304      	movs	r3, #4
 8002a74:	e006      	b.n	8002a84 <HAL_GPIO_DeInit+0xd4>
 8002a76:	2303      	movs	r3, #3
 8002a78:	e004      	b.n	8002a84 <HAL_GPIO_DeInit+0xd4>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e002      	b.n	8002a84 <HAL_GPIO_DeInit+0xd4>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <HAL_GPIO_DeInit+0xd4>
 8002a82:	2300      	movs	r3, #0
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	f002 0203 	and.w	r2, r2, #3
 8002a8a:	0092      	lsls	r2, r2, #2
 8002a8c:	4093      	lsls	r3, r2
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d132      	bne.n	8002afa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002a94:	4b4b      	ldr	r3, [pc, #300]	@ (8002bc4 <HAL_GPIO_DeInit+0x214>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	4949      	ldr	r1, [pc, #292]	@ (8002bc4 <HAL_GPIO_DeInit+0x214>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002aa2:	4b48      	ldr	r3, [pc, #288]	@ (8002bc4 <HAL_GPIO_DeInit+0x214>)
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	4946      	ldr	r1, [pc, #280]	@ (8002bc4 <HAL_GPIO_DeInit+0x214>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002ab0:	4b44      	ldr	r3, [pc, #272]	@ (8002bc4 <HAL_GPIO_DeInit+0x214>)
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	4942      	ldr	r1, [pc, #264]	@ (8002bc4 <HAL_GPIO_DeInit+0x214>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002abe:	4b41      	ldr	r3, [pc, #260]	@ (8002bc4 <HAL_GPIO_DeInit+0x214>)
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	493f      	ldr	r1, [pc, #252]	@ (8002bc4 <HAL_GPIO_DeInit+0x214>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	220f      	movs	r2, #15
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002adc:	4a2e      	ldr	r2, [pc, #184]	@ (8002b98 <HAL_GPIO_DeInit+0x1e8>)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	43da      	mvns	r2, r3
 8002aec:	482a      	ldr	r0, [pc, #168]	@ (8002b98 <HAL_GPIO_DeInit+0x1e8>)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	089b      	lsrs	r3, r3, #2
 8002af2:	400a      	ands	r2, r1
 8002af4:	3302      	adds	r3, #2
 8002af6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2103      	movs	r1, #3
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	08da      	lsrs	r2, r3, #3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3208      	adds	r2, #8
 8002b18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	220f      	movs	r2, #15
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	08d2      	lsrs	r2, r2, #3
 8002b30:	4019      	ands	r1, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3208      	adds	r2, #8
 8002b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2103      	movs	r1, #3
 8002b44:	fa01 f303 	lsl.w	r3, r1, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	2101      	movs	r1, #1
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	401a      	ands	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	2103      	movs	r1, #3
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	401a      	ands	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2b0f      	cmp	r3, #15
 8002b84:	f67f af22 	bls.w	80029cc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40013800 	.word	0x40013800
 8002b9c:	40020000 	.word	0x40020000
 8002ba0:	40020400 	.word	0x40020400
 8002ba4:	40020800 	.word	0x40020800
 8002ba8:	40020c00 	.word	0x40020c00
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40021400 	.word	0x40021400
 8002bb4:	40021800 	.word	0x40021800
 8002bb8:	40021c00 	.word	0x40021c00
 8002bbc:	40022000 	.word	0x40022000
 8002bc0:	40022400 	.word	0x40022400
 8002bc4:	40013c00 	.word	0x40013c00

08002bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	807b      	strh	r3, [r7, #2]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd8:	787b      	ldrb	r3, [r7, #1]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bde:	887a      	ldrh	r2, [r7, #2]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002be4:	e003      	b.n	8002bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002be6:	887b      	ldrh	r3, [r7, #2]
 8002be8:	041a      	lsls	r2, r3, #16
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	619a      	str	r2, [r3, #24]
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e12b      	b.n	8002e66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fe fdae 	bl	8001784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2224      	movs	r2, #36	@ 0x24
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c60:	f001 ff82 	bl	8004b68 <HAL_RCC_GetPCLK1Freq>
 8002c64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4a81      	ldr	r2, [pc, #516]	@ (8002e70 <HAL_I2C_Init+0x274>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d807      	bhi.n	8002c80 <HAL_I2C_Init+0x84>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4a80      	ldr	r2, [pc, #512]	@ (8002e74 <HAL_I2C_Init+0x278>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	bf94      	ite	ls
 8002c78:	2301      	movls	r3, #1
 8002c7a:	2300      	movhi	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	e006      	b.n	8002c8e <HAL_I2C_Init+0x92>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4a7d      	ldr	r2, [pc, #500]	@ (8002e78 <HAL_I2C_Init+0x27c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	bf94      	ite	ls
 8002c88:	2301      	movls	r3, #1
 8002c8a:	2300      	movhi	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e0e7      	b.n	8002e66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a78      	ldr	r2, [pc, #480]	@ (8002e7c <HAL_I2C_Init+0x280>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	0c9b      	lsrs	r3, r3, #18
 8002ca0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4a6a      	ldr	r2, [pc, #424]	@ (8002e70 <HAL_I2C_Init+0x274>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d802      	bhi.n	8002cd0 <HAL_I2C_Init+0xd4>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	e009      	b.n	8002ce4 <HAL_I2C_Init+0xe8>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	4a69      	ldr	r2, [pc, #420]	@ (8002e80 <HAL_I2C_Init+0x284>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002cf6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	495c      	ldr	r1, [pc, #368]	@ (8002e70 <HAL_I2C_Init+0x274>)
 8002d00:	428b      	cmp	r3, r1
 8002d02:	d819      	bhi.n	8002d38 <HAL_I2C_Init+0x13c>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1e59      	subs	r1, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d12:	1c59      	adds	r1, r3, #1
 8002d14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d18:	400b      	ands	r3, r1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_I2C_Init+0x138>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1e59      	subs	r1, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d32:	e051      	b.n	8002dd8 <HAL_I2C_Init+0x1dc>
 8002d34:	2304      	movs	r3, #4
 8002d36:	e04f      	b.n	8002dd8 <HAL_I2C_Init+0x1dc>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d111      	bne.n	8002d64 <HAL_I2C_Init+0x168>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1e58      	subs	r0, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	440b      	add	r3, r1
 8002d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2301      	moveq	r3, #1
 8002d5e:	2300      	movne	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	e012      	b.n	8002d8a <HAL_I2C_Init+0x18e>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1e58      	subs	r0, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	0099      	lsls	r1, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_I2C_Init+0x196>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e022      	b.n	8002dd8 <HAL_I2C_Init+0x1dc>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10e      	bne.n	8002db8 <HAL_I2C_Init+0x1bc>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1e58      	subs	r0, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6859      	ldr	r1, [r3, #4]
 8002da2:	460b      	mov	r3, r1
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	440b      	add	r3, r1
 8002da8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dac:	3301      	adds	r3, #1
 8002dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002db6:	e00f      	b.n	8002dd8 <HAL_I2C_Init+0x1dc>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1e58      	subs	r0, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6859      	ldr	r1, [r3, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	0099      	lsls	r1, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	6809      	ldr	r1, [r1, #0]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6911      	ldr	r1, [r2, #16]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68d2      	ldr	r2, [r2, #12]
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	000186a0 	.word	0x000186a0
 8002e74:	001e847f 	.word	0x001e847f
 8002e78:	003d08ff 	.word	0x003d08ff
 8002e7c:	431bde83 	.word	0x431bde83
 8002e80:	10624dd3 	.word	0x10624dd3

08002e84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	4611      	mov	r1, r2
 8002e90:	461a      	mov	r2, r3
 8002e92:	4603      	mov	r3, r0
 8002e94:	817b      	strh	r3, [r7, #10]
 8002e96:	460b      	mov	r3, r1
 8002e98:	813b      	strh	r3, [r7, #8]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e9e:	f7ff fac5 	bl	800242c <HAL_GetTick>
 8002ea2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	f040 80d9 	bne.w	8003064 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	2319      	movs	r3, #25
 8002eb8:	2201      	movs	r2, #1
 8002eba:	496d      	ldr	r1, [pc, #436]	@ (8003070 <HAL_I2C_Mem_Write+0x1ec>)
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 fc8b 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e0cc      	b.n	8003066 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_I2C_Mem_Write+0x56>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e0c5      	b.n	8003066 <HAL_I2C_Mem_Write+0x1e2>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d007      	beq.n	8002f00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2221      	movs	r2, #33	@ 0x21
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2240      	movs	r2, #64	@ 0x40
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a3a      	ldr	r2, [r7, #32]
 8002f2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4a4d      	ldr	r2, [pc, #308]	@ (8003074 <HAL_I2C_Mem_Write+0x1f0>)
 8002f40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f42:	88f8      	ldrh	r0, [r7, #6]
 8002f44:	893a      	ldrh	r2, [r7, #8]
 8002f46:	8979      	ldrh	r1, [r7, #10]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	9301      	str	r3, [sp, #4]
 8002f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	4603      	mov	r3, r0
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fac2 	bl	80034dc <I2C_RequestMemoryWrite>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d052      	beq.n	8003004 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e081      	b.n	8003066 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fd50 	bl	8003a0c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00d      	beq.n	8002f8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d107      	bne.n	8002f8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e06b      	b.n	8003066 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	781a      	ldrb	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d11b      	bne.n	8003004 <HAL_I2C_Mem_Write+0x180>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d017      	beq.n	8003004 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	781a      	ldrb	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1aa      	bne.n	8002f62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 fd43 	bl	8003a9c <I2C_WaitOnBTFFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00d      	beq.n	8003038 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003020:	2b04      	cmp	r3, #4
 8003022:	d107      	bne.n	8003034 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003032:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e016      	b.n	8003066 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
  }
}
 8003066:	4618      	mov	r0, r3
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	00100002 	.word	0x00100002
 8003074:	ffff0000 	.word	0xffff0000

08003078 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08c      	sub	sp, #48	@ 0x30
 800307c:	af02      	add	r7, sp, #8
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	4608      	mov	r0, r1
 8003082:	4611      	mov	r1, r2
 8003084:	461a      	mov	r2, r3
 8003086:	4603      	mov	r3, r0
 8003088:	817b      	strh	r3, [r7, #10]
 800308a:	460b      	mov	r3, r1
 800308c:	813b      	strh	r3, [r7, #8]
 800308e:	4613      	mov	r3, r2
 8003090:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003092:	f7ff f9cb 	bl	800242c <HAL_GetTick>
 8003096:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	f040 8214 	bne.w	80034ce <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	2319      	movs	r3, #25
 80030ac:	2201      	movs	r2, #1
 80030ae:	497b      	ldr	r1, [pc, #492]	@ (800329c <HAL_I2C_Mem_Read+0x224>)
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 fb91 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80030bc:	2302      	movs	r3, #2
 80030be:	e207      	b.n	80034d0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_I2C_Mem_Read+0x56>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e200      	b.n	80034d0 <HAL_I2C_Mem_Read+0x458>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d007      	beq.n	80030f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003102:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2222      	movs	r2, #34	@ 0x22
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2240      	movs	r2, #64	@ 0x40
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800311e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003124:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4a5b      	ldr	r2, [pc, #364]	@ (80032a0 <HAL_I2C_Mem_Read+0x228>)
 8003134:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003136:	88f8      	ldrh	r0, [r7, #6]
 8003138:	893a      	ldrh	r2, [r7, #8]
 800313a:	8979      	ldrh	r1, [r7, #10]
 800313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313e:	9301      	str	r3, [sp, #4]
 8003140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	4603      	mov	r3, r0
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fa5e 	bl	8003608 <I2C_RequestMemoryRead>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e1bc      	b.n	80034d0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800315a:	2b00      	cmp	r3, #0
 800315c:	d113      	bne.n	8003186 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800315e:	2300      	movs	r3, #0
 8003160:	623b      	str	r3, [r7, #32]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	623b      	str	r3, [r7, #32]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	623b      	str	r3, [r7, #32]
 8003172:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	e190      	b.n	80034a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318a:	2b01      	cmp	r3, #1
 800318c:	d11b      	bne.n	80031c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800319c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	e170      	b.n	80034a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d11b      	bne.n	8003206 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ee:	2300      	movs	r3, #0
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	61bb      	str	r3, [r7, #24]
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	e150      	b.n	80034a8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800321c:	e144      	b.n	80034a8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003222:	2b03      	cmp	r3, #3
 8003224:	f200 80f1 	bhi.w	800340a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322c:	2b01      	cmp	r3, #1
 800322e:	d123      	bne.n	8003278 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003232:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 fc79 	bl	8003b2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e145      	b.n	80034d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003276:	e117      	b.n	80034a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327c:	2b02      	cmp	r3, #2
 800327e:	d14e      	bne.n	800331e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003286:	2200      	movs	r2, #0
 8003288:	4906      	ldr	r1, [pc, #24]	@ (80032a4 <HAL_I2C_Mem_Read+0x22c>)
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 faa4 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d008      	beq.n	80032a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e11a      	b.n	80034d0 <HAL_I2C_Mem_Read+0x458>
 800329a:	bf00      	nop
 800329c:	00100002 	.word	0x00100002
 80032a0:	ffff0000 	.word	0xffff0000
 80032a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800331c:	e0c4      	b.n	80034a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800331e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003324:	2200      	movs	r2, #0
 8003326:	496c      	ldr	r1, [pc, #432]	@ (80034d8 <HAL_I2C_Mem_Read+0x460>)
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fa55 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0cb      	b.n	80034d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003346:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003380:	2200      	movs	r2, #0
 8003382:	4955      	ldr	r1, [pc, #340]	@ (80034d8 <HAL_I2C_Mem_Read+0x460>)
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fa27 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e09d      	b.n	80034d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003408:	e04e      	b.n	80034a8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800340a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800340c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 fb8c 	bl	8003b2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e058      	b.n	80034d0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b04      	cmp	r3, #4
 800345c:	d124      	bne.n	80034a8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003462:	2b03      	cmp	r3, #3
 8003464:	d107      	bne.n	8003476 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003474:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f47f aeb6 	bne.w	800321e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	e000      	b.n	80034d0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80034ce:	2302      	movs	r3, #2
  }
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3728      	adds	r7, #40	@ 0x28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	00010004 	.word	0x00010004

080034dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	4608      	mov	r0, r1
 80034e6:	4611      	mov	r1, r2
 80034e8:	461a      	mov	r2, r3
 80034ea:	4603      	mov	r3, r0
 80034ec:	817b      	strh	r3, [r7, #10]
 80034ee:	460b      	mov	r3, r1
 80034f0:	813b      	strh	r3, [r7, #8]
 80034f2:	4613      	mov	r3, r2
 80034f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003504:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	2200      	movs	r2, #0
 800350e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f960 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00d      	beq.n	800353a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003528:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800352c:	d103      	bne.n	8003536 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003534:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e05f      	b.n	80035fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800353a:	897b      	ldrh	r3, [r7, #10]
 800353c:	b2db      	uxtb	r3, r3
 800353e:	461a      	mov	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003548:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800354a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354c:	6a3a      	ldr	r2, [r7, #32]
 800354e:	492d      	ldr	r1, [pc, #180]	@ (8003604 <I2C_RequestMemoryWrite+0x128>)
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f9bb 	bl	80038cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e04c      	b.n	80035fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003578:	6a39      	ldr	r1, [r7, #32]
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 fa46 	bl	8003a0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00d      	beq.n	80035a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	2b04      	cmp	r3, #4
 800358c:	d107      	bne.n	800359e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800359c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e02b      	b.n	80035fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d105      	bne.n	80035b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035a8:	893b      	ldrh	r3, [r7, #8]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	611a      	str	r2, [r3, #16]
 80035b2:	e021      	b.n	80035f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035b4:	893b      	ldrh	r3, [r7, #8]
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c4:	6a39      	ldr	r1, [r7, #32]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 fa20 	bl	8003a0c <I2C_WaitOnTXEFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00d      	beq.n	80035ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d107      	bne.n	80035ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e005      	b.n	80035fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035ee:	893b      	ldrh	r3, [r7, #8]
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	00010002 	.word	0x00010002

08003608 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	4608      	mov	r0, r1
 8003612:	4611      	mov	r1, r2
 8003614:	461a      	mov	r2, r3
 8003616:	4603      	mov	r3, r0
 8003618:	817b      	strh	r3, [r7, #10]
 800361a:	460b      	mov	r3, r1
 800361c:	813b      	strh	r3, [r7, #8]
 800361e:	4613      	mov	r3, r2
 8003620:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003630:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003640:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	2200      	movs	r2, #0
 800364a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f8c2 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00d      	beq.n	8003676 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003664:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003668:	d103      	bne.n	8003672 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003670:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e0aa      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003676:	897b      	ldrh	r3, [r7, #10]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003684:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003688:	6a3a      	ldr	r2, [r7, #32]
 800368a:	4952      	ldr	r1, [pc, #328]	@ (80037d4 <I2C_RequestMemoryRead+0x1cc>)
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f91d 	bl	80038cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e097      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b4:	6a39      	ldr	r1, [r7, #32]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f9a8 	bl	8003a0c <I2C_WaitOnTXEFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00d      	beq.n	80036de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d107      	bne.n	80036da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e076      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d105      	bne.n	80036f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036e4:	893b      	ldrh	r3, [r7, #8]
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	611a      	str	r2, [r3, #16]
 80036ee:	e021      	b.n	8003734 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036f0:	893b      	ldrh	r3, [r7, #8]
 80036f2:	0a1b      	lsrs	r3, r3, #8
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003700:	6a39      	ldr	r1, [r7, #32]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f982 	bl	8003a0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00d      	beq.n	800372a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	2b04      	cmp	r3, #4
 8003714:	d107      	bne.n	8003726 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003724:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e050      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800372a:	893b      	ldrh	r3, [r7, #8]
 800372c:	b2da      	uxtb	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003736:	6a39      	ldr	r1, [r7, #32]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f967 	bl	8003a0c <I2C_WaitOnTXEFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00d      	beq.n	8003760 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	2b04      	cmp	r3, #4
 800374a:	d107      	bne.n	800375c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800375a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e035      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800376e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	2200      	movs	r2, #0
 8003778:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f82b 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00d      	beq.n	80037a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003796:	d103      	bne.n	80037a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800379e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e013      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037a4:	897b      	ldrh	r3, [r7, #10]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	f043 0301 	orr.w	r3, r3, #1
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b6:	6a3a      	ldr	r2, [r7, #32]
 80037b8:	4906      	ldr	r1, [pc, #24]	@ (80037d4 <I2C_RequestMemoryRead+0x1cc>)
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f886 	bl	80038cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	00010002 	.word	0x00010002

080037d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	4613      	mov	r3, r2
 80037e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e8:	e048      	b.n	800387c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037f0:	d044      	beq.n	800387c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f2:	f7fe fe1b 	bl	800242c <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d302      	bcc.n	8003808 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d139      	bne.n	800387c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	0c1b      	lsrs	r3, r3, #16
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b01      	cmp	r3, #1
 8003810:	d10d      	bne.n	800382e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	43da      	mvns	r2, r3
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4013      	ands	r3, r2
 800381e:	b29b      	uxth	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	bf0c      	ite	eq
 8003824:	2301      	moveq	r3, #1
 8003826:	2300      	movne	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	461a      	mov	r2, r3
 800382c:	e00c      	b.n	8003848 <I2C_WaitOnFlagUntilTimeout+0x70>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	43da      	mvns	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4013      	ands	r3, r2
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf0c      	ite	eq
 8003840:	2301      	moveq	r3, #1
 8003842:	2300      	movne	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	461a      	mov	r2, r3
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	429a      	cmp	r2, r3
 800384c:	d116      	bne.n	800387c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003868:	f043 0220 	orr.w	r2, r3, #32
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e023      	b.n	80038c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	0c1b      	lsrs	r3, r3, #16
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b01      	cmp	r3, #1
 8003884:	d10d      	bne.n	80038a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	43da      	mvns	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4013      	ands	r3, r2
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	461a      	mov	r2, r3
 80038a0:	e00c      	b.n	80038bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	43da      	mvns	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4013      	ands	r3, r2
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf0c      	ite	eq
 80038b4:	2301      	moveq	r3, #1
 80038b6:	2300      	movne	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d093      	beq.n	80037ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038da:	e071      	b.n	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ea:	d123      	bne.n	8003934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003904:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	f043 0204 	orr.w	r2, r3, #4
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e067      	b.n	8003a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800393a:	d041      	beq.n	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393c:	f7fe fd76 	bl	800242c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	429a      	cmp	r2, r3
 800394a:	d302      	bcc.n	8003952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d136      	bne.n	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	0c1b      	lsrs	r3, r3, #16
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	d10c      	bne.n	8003976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	43da      	mvns	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4013      	ands	r3, r2
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	bf14      	ite	ne
 800396e:	2301      	movne	r3, #1
 8003970:	2300      	moveq	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	e00b      	b.n	800398e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	43da      	mvns	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	4013      	ands	r3, r2
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d016      	beq.n	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	f043 0220 	orr.w	r2, r3, #32
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e021      	b.n	8003a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	0c1b      	lsrs	r3, r3, #16
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d10c      	bne.n	80039e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	43da      	mvns	r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	4013      	ands	r3, r2
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bf14      	ite	ne
 80039dc:	2301      	movne	r3, #1
 80039de:	2300      	moveq	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	e00b      	b.n	80039fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	43da      	mvns	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4013      	ands	r3, r2
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bf14      	ite	ne
 80039f6:	2301      	movne	r3, #1
 80039f8:	2300      	moveq	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f47f af6d 	bne.w	80038dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a18:	e034      	b.n	8003a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f8e3 	bl	8003be6 <I2C_IsAcknowledgeFailed>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e034      	b.n	8003a94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a30:	d028      	beq.n	8003a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a32:	f7fe fcfb 	bl	800242c <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d302      	bcc.n	8003a48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d11d      	bne.n	8003a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a52:	2b80      	cmp	r3, #128	@ 0x80
 8003a54:	d016      	beq.n	8003a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a70:	f043 0220 	orr.w	r2, r3, #32
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e007      	b.n	8003a94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a8e:	2b80      	cmp	r3, #128	@ 0x80
 8003a90:	d1c3      	bne.n	8003a1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aa8:	e034      	b.n	8003b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f89b 	bl	8003be6 <I2C_IsAcknowledgeFailed>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e034      	b.n	8003b24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ac0:	d028      	beq.n	8003b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac2:	f7fe fcb3 	bl	800242c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d302      	bcc.n	8003ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d11d      	bne.n	8003b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d016      	beq.n	8003b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b00:	f043 0220 	orr.w	r2, r3, #32
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e007      	b.n	8003b24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d1c3      	bne.n	8003aaa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b38:	e049      	b.n	8003bce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d119      	bne.n	8003b7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0210 	mvn.w	r2, #16
 8003b50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e030      	b.n	8003bde <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7c:	f7fe fc56 	bl	800242c <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d302      	bcc.n	8003b92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d11d      	bne.n	8003bce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9c:	2b40      	cmp	r3, #64	@ 0x40
 8003b9e:	d016      	beq.n	8003bce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bba:	f043 0220 	orr.w	r2, r3, #32
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e007      	b.n	8003bde <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd8:	2b40      	cmp	r3, #64	@ 0x40
 8003bda:	d1ae      	bne.n	8003b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bfc:	d11b      	bne.n	8003c36 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c06:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	f043 0204 	orr.w	r2, r3, #4
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	d129      	bne.n	8003cae <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2224      	movs	r2, #36	@ 0x24
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0201 	bic.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0210 	bic.w	r2, r2, #16
 8003c80:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0201 	orr.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	e000      	b.n	8003cb0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
  }
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d12a      	bne.n	8003d2c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2224      	movs	r2, #36	@ 0x24
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0201 	bic.w	r2, r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003cf6:	89fb      	ldrh	r3, [r7, #14]
 8003cf8:	f023 030f 	bic.w	r3, r3, #15
 8003cfc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	89fb      	ldrh	r3, [r7, #14]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	89fa      	ldrh	r2, [r7, #14]
 8003d0e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e000      	b.n	8003d2e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003d2c:	2302      	movs	r3, #2
  }
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e0bf      	b.n	8003ece <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fd fd78 	bl	8001858 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699a      	ldr	r2, [r3, #24]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003d7e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6999      	ldr	r1, [r3, #24]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d94:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6899      	ldr	r1, [r3, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4b4a      	ldr	r3, [pc, #296]	@ (8003ed8 <HAL_LTDC_Init+0x19c>)
 8003db0:	400b      	ands	r3, r1
 8003db2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	041b      	lsls	r3, r3, #16
 8003dba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6899      	ldr	r1, [r3, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68d9      	ldr	r1, [r3, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4b3e      	ldr	r3, [pc, #248]	@ (8003ed8 <HAL_LTDC_Init+0x19c>)
 8003dde:	400b      	ands	r3, r1
 8003de0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	041b      	lsls	r3, r3, #16
 8003de8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68d9      	ldr	r1, [r3, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1a      	ldr	r2, [r3, #32]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6919      	ldr	r1, [r3, #16]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b33      	ldr	r3, [pc, #204]	@ (8003ed8 <HAL_LTDC_Init+0x19c>)
 8003e0c:	400b      	ands	r3, r1
 8003e0e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	041b      	lsls	r3, r3, #16
 8003e16:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6919      	ldr	r1, [r3, #16]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6959      	ldr	r1, [r3, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b27      	ldr	r3, [pc, #156]	@ (8003ed8 <HAL_LTDC_Init+0x19c>)
 8003e3a:	400b      	ands	r3, r1
 8003e3c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e42:	041b      	lsls	r3, r3, #16
 8003e44:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6959      	ldr	r1, [r3, #20]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003e6c:	041b      	lsls	r3, r3, #16
 8003e6e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0206 	orr.w	r2, r2, #6
 8003eaa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	f000f800 	.word	0xf000f800

08003edc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003edc:	b5b0      	push	{r4, r5, r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_LTDC_ConfigLayer+0x1a>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e02c      	b.n	8003f50 <HAL_LTDC_ConfigLayer+0x74>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2202      	movs	r2, #2
 8003f02:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2134      	movs	r1, #52	@ 0x34
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
 8003f10:	4413      	add	r3, r2
 8003f12:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4614      	mov	r4, r2
 8003f1a:	461d      	mov	r5, r3
 8003f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	68b9      	ldr	r1, [r7, #8]
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 f811 	bl	8003f58 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bdb0      	pop	{r4, r5, r7, pc}

08003f58 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b089      	sub	sp, #36	@ 0x24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	0c1b      	lsrs	r3, r3, #16
 8003f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f74:	4413      	add	r3, r2
 8003f76:	041b      	lsls	r3, r3, #16
 8003f78:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	01db      	lsls	r3, r3, #7
 8003f84:	4413      	add	r3, r2
 8003f86:	3384      	adds	r3, #132	@ 0x84
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	4611      	mov	r1, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	01d2      	lsls	r2, r2, #7
 8003f94:	440a      	add	r2, r1
 8003f96:	3284      	adds	r2, #132	@ 0x84
 8003f98:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003f9c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	0c1b      	lsrs	r3, r3, #16
 8003faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fae:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fb0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	01db      	lsls	r3, r3, #7
 8003fbc:	440b      	add	r3, r1
 8003fbe:	3384      	adds	r3, #132	@ 0x84
 8003fc0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fc6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fd6:	4413      	add	r3, r2
 8003fd8:	041b      	lsls	r3, r3, #16
 8003fda:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	01db      	lsls	r3, r3, #7
 8003fe6:	4413      	add	r3, r2
 8003fe8:	3384      	adds	r3, #132	@ 0x84
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	6812      	ldr	r2, [r2, #0]
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	01d2      	lsls	r2, r2, #7
 8003ff6:	440a      	add	r2, r1
 8003ff8:	3284      	adds	r2, #132	@ 0x84
 8003ffa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003ffe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800400e:	4413      	add	r3, r2
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4619      	mov	r1, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	01db      	lsls	r3, r3, #7
 800401c:	440b      	add	r3, r1
 800401e:	3384      	adds	r3, #132	@ 0x84
 8004020:	4619      	mov	r1, r3
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	4313      	orrs	r3, r2
 8004026:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	01db      	lsls	r3, r3, #7
 8004032:	4413      	add	r3, r2
 8004034:	3384      	adds	r3, #132	@ 0x84
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	4611      	mov	r1, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	01d2      	lsls	r2, r2, #7
 8004042:	440a      	add	r2, r1
 8004044:	3284      	adds	r2, #132	@ 0x84
 8004046:	f023 0307 	bic.w	r3, r3, #7
 800404a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	01db      	lsls	r3, r3, #7
 8004056:	4413      	add	r3, r2
 8004058:	3384      	adds	r3, #132	@ 0x84
 800405a:	461a      	mov	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004072:	041b      	lsls	r3, r3, #16
 8004074:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	061b      	lsls	r3, r3, #24
 800407c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	01db      	lsls	r3, r3, #7
 8004088:	4413      	add	r3, r2
 800408a:	3384      	adds	r3, #132	@ 0x84
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	01db      	lsls	r3, r3, #7
 8004098:	4413      	add	r3, r2
 800409a:	3384      	adds	r3, #132	@ 0x84
 800409c:	461a      	mov	r2, r3
 800409e:	2300      	movs	r3, #0
 80040a0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80040a8:	461a      	mov	r2, r3
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	431a      	orrs	r2, r3
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	431a      	orrs	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4619      	mov	r1, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	01db      	lsls	r3, r3, #7
 80040bc:	440b      	add	r3, r1
 80040be:	3384      	adds	r3, #132	@ 0x84
 80040c0:	4619      	mov	r1, r3
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	01db      	lsls	r3, r3, #7
 80040d2:	4413      	add	r3, r2
 80040d4:	3384      	adds	r3, #132	@ 0x84
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	4611      	mov	r1, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	01d2      	lsls	r2, r2, #7
 80040e2:	440a      	add	r2, r1
 80040e4:	3284      	adds	r2, #132	@ 0x84
 80040e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80040ea:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	01db      	lsls	r3, r3, #7
 80040f6:	4413      	add	r3, r2
 80040f8:	3384      	adds	r3, #132	@ 0x84
 80040fa:	461a      	mov	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	01db      	lsls	r3, r3, #7
 800410c:	4413      	add	r3, r2
 800410e:	3384      	adds	r3, #132	@ 0x84
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	4611      	mov	r1, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	01d2      	lsls	r2, r2, #7
 800411c:	440a      	add	r2, r1
 800411e:	3284      	adds	r2, #132	@ 0x84
 8004120:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004124:	f023 0307 	bic.w	r3, r3, #7
 8004128:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	69da      	ldr	r2, [r3, #28]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	68f9      	ldr	r1, [r7, #12]
 8004134:	6809      	ldr	r1, [r1, #0]
 8004136:	4608      	mov	r0, r1
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	01c9      	lsls	r1, r1, #7
 800413c:	4401      	add	r1, r0
 800413e:	3184      	adds	r1, #132	@ 0x84
 8004140:	4313      	orrs	r3, r2
 8004142:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	01db      	lsls	r3, r3, #7
 800414e:	4413      	add	r3, r2
 8004150:	3384      	adds	r3, #132	@ 0x84
 8004152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	01db      	lsls	r3, r3, #7
 800415e:	4413      	add	r3, r2
 8004160:	3384      	adds	r3, #132	@ 0x84
 8004162:	461a      	mov	r2, r3
 8004164:	2300      	movs	r3, #0
 8004166:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	01db      	lsls	r3, r3, #7
 8004172:	4413      	add	r3, r2
 8004174:	3384      	adds	r3, #132	@ 0x84
 8004176:	461a      	mov	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d102      	bne.n	800418c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004186:	2304      	movs	r3, #4
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	e01b      	b.n	80041c4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d102      	bne.n	800419a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004194:	2303      	movs	r3, #3
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	e014      	b.n	80041c4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d00b      	beq.n	80041ba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d007      	beq.n	80041ba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d003      	beq.n	80041ba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041b6:	2b07      	cmp	r3, #7
 80041b8:	d102      	bne.n	80041c0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80041ba:	2302      	movs	r3, #2
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	e001      	b.n	80041c4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80041c0:	2301      	movs	r3, #1
 80041c2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	01db      	lsls	r3, r3, #7
 80041ce:	4413      	add	r3, r2
 80041d0:	3384      	adds	r3, #132	@ 0x84
 80041d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	4611      	mov	r1, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	01d2      	lsls	r2, r2, #7
 80041de:	440a      	add	r2, r1
 80041e0:	3284      	adds	r2, #132	@ 0x84
 80041e2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80041e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	fb02 f303 	mul.w	r3, r2, r3
 80041f2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	6859      	ldr	r1, [r3, #4]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	1acb      	subs	r3, r1, r3
 80041fe:	69f9      	ldr	r1, [r7, #28]
 8004200:	fb01 f303 	mul.w	r3, r1, r3
 8004204:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004206:	68f9      	ldr	r1, [r7, #12]
 8004208:	6809      	ldr	r1, [r1, #0]
 800420a:	4608      	mov	r0, r1
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	01c9      	lsls	r1, r1, #7
 8004210:	4401      	add	r1, r0
 8004212:	3184      	adds	r1, #132	@ 0x84
 8004214:	4313      	orrs	r3, r2
 8004216:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	01db      	lsls	r3, r3, #7
 8004222:	4413      	add	r3, r2
 8004224:	3384      	adds	r3, #132	@ 0x84
 8004226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	4611      	mov	r1, r2
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	01d2      	lsls	r2, r2, #7
 8004232:	440a      	add	r2, r1
 8004234:	3284      	adds	r2, #132	@ 0x84
 8004236:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800423a:	f023 0307 	bic.w	r3, r3, #7
 800423e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	01db      	lsls	r3, r3, #7
 800424a:	4413      	add	r3, r2
 800424c:	3384      	adds	r3, #132	@ 0x84
 800424e:	461a      	mov	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004254:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	01db      	lsls	r3, r3, #7
 8004260:	4413      	add	r3, r2
 8004262:	3384      	adds	r3, #132	@ 0x84
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	6812      	ldr	r2, [r2, #0]
 800426a:	4611      	mov	r1, r2
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	01d2      	lsls	r2, r2, #7
 8004270:	440a      	add	r2, r1
 8004272:	3284      	adds	r2, #132	@ 0x84
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	6013      	str	r3, [r2, #0]
}
 800427a:	bf00      	nop
 800427c:	3724      	adds	r7, #36	@ 0x24
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e267      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d075      	beq.n	8004392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042a6:	4b88      	ldr	r3, [pc, #544]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d00c      	beq.n	80042cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b2:	4b85      	ldr	r3, [pc, #532]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d112      	bne.n	80042e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042be:	4b82      	ldr	r3, [pc, #520]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042ca:	d10b      	bne.n	80042e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042cc:	4b7e      	ldr	r3, [pc, #504]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d05b      	beq.n	8004390 <HAL_RCC_OscConfig+0x108>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d157      	bne.n	8004390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e242      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ec:	d106      	bne.n	80042fc <HAL_RCC_OscConfig+0x74>
 80042ee:	4b76      	ldr	r3, [pc, #472]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a75      	ldr	r2, [pc, #468]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80042f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e01d      	b.n	8004338 <HAL_RCC_OscConfig+0xb0>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0x98>
 8004306:	4b70      	ldr	r3, [pc, #448]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a6f      	ldr	r2, [pc, #444]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 800430c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	4b6d      	ldr	r3, [pc, #436]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a6c      	ldr	r2, [pc, #432]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0xb0>
 8004320:	4b69      	ldr	r3, [pc, #420]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a68      	ldr	r2, [pc, #416]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b66      	ldr	r3, [pc, #408]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a65      	ldr	r2, [pc, #404]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d013      	beq.n	8004368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fe f874 	bl	800242c <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004348:	f7fe f870 	bl	800242c <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	@ 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e207      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435a:	4b5b      	ldr	r3, [pc, #364]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0xc0>
 8004366:	e014      	b.n	8004392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fe f860 	bl	800242c <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004370:	f7fe f85c 	bl	800242c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	@ 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e1f3      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004382:	4b51      	ldr	r3, [pc, #324]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0xe8>
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d063      	beq.n	8004466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800439e:	4b4a      	ldr	r3, [pc, #296]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043aa:	4b47      	ldr	r3, [pc, #284]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d11c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043b6:	4b44      	ldr	r3, [pc, #272]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d116      	bne.n	80043f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	4b41      	ldr	r3, [pc, #260]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_RCC_OscConfig+0x152>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d001      	beq.n	80043da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e1c7      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043da:	4b3b      	ldr	r3, [pc, #236]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4937      	ldr	r1, [pc, #220]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ee:	e03a      	b.n	8004466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d020      	beq.n	800443a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f8:	4b34      	ldr	r3, [pc, #208]	@ (80044cc <HAL_RCC_OscConfig+0x244>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fe:	f7fe f815 	bl	800242c <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004406:	f7fe f811 	bl	800242c <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e1a8      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004418:	4b2b      	ldr	r3, [pc, #172]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004424:	4b28      	ldr	r3, [pc, #160]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4925      	ldr	r1, [pc, #148]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 8004434:	4313      	orrs	r3, r2
 8004436:	600b      	str	r3, [r1, #0]
 8004438:	e015      	b.n	8004466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443a:	4b24      	ldr	r3, [pc, #144]	@ (80044cc <HAL_RCC_OscConfig+0x244>)
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fd fff4 	bl	800242c <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004448:	f7fd fff0 	bl	800242c <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e187      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445a:	4b1b      	ldr	r3, [pc, #108]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d036      	beq.n	80044e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d016      	beq.n	80044a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447a:	4b15      	ldr	r3, [pc, #84]	@ (80044d0 <HAL_RCC_OscConfig+0x248>)
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004480:	f7fd ffd4 	bl	800242c <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004488:	f7fd ffd0 	bl	800242c <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e167      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449a:	4b0b      	ldr	r3, [pc, #44]	@ (80044c8 <HAL_RCC_OscConfig+0x240>)
 800449c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x200>
 80044a6:	e01b      	b.n	80044e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a8:	4b09      	ldr	r3, [pc, #36]	@ (80044d0 <HAL_RCC_OscConfig+0x248>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ae:	f7fd ffbd 	bl	800242c <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b4:	e00e      	b.n	80044d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b6:	f7fd ffb9 	bl	800242c <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d907      	bls.n	80044d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e150      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
 80044c8:	40023800 	.word	0x40023800
 80044cc:	42470000 	.word	0x42470000
 80044d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d4:	4b88      	ldr	r3, [pc, #544]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80044d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1ea      	bne.n	80044b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 8097 	beq.w	800461c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ee:	2300      	movs	r3, #0
 80044f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f2:	4b81      	ldr	r3, [pc, #516]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10f      	bne.n	800451e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044fe:	2300      	movs	r3, #0
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	4b7d      	ldr	r3, [pc, #500]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	4a7c      	ldr	r2, [pc, #496]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800450c:	6413      	str	r3, [r2, #64]	@ 0x40
 800450e:	4b7a      	ldr	r3, [pc, #488]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800451a:	2301      	movs	r3, #1
 800451c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451e:	4b77      	ldr	r3, [pc, #476]	@ (80046fc <HAL_RCC_OscConfig+0x474>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004526:	2b00      	cmp	r3, #0
 8004528:	d118      	bne.n	800455c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800452a:	4b74      	ldr	r3, [pc, #464]	@ (80046fc <HAL_RCC_OscConfig+0x474>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a73      	ldr	r2, [pc, #460]	@ (80046fc <HAL_RCC_OscConfig+0x474>)
 8004530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004536:	f7fd ff79 	bl	800242c <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453e:	f7fd ff75 	bl	800242c <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e10c      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004550:	4b6a      	ldr	r3, [pc, #424]	@ (80046fc <HAL_RCC_OscConfig+0x474>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d106      	bne.n	8004572 <HAL_RCC_OscConfig+0x2ea>
 8004564:	4b64      	ldr	r3, [pc, #400]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004568:	4a63      	ldr	r2, [pc, #396]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004570:	e01c      	b.n	80045ac <HAL_RCC_OscConfig+0x324>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b05      	cmp	r3, #5
 8004578:	d10c      	bne.n	8004594 <HAL_RCC_OscConfig+0x30c>
 800457a:	4b5f      	ldr	r3, [pc, #380]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457e:	4a5e      	ldr	r2, [pc, #376]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004580:	f043 0304 	orr.w	r3, r3, #4
 8004584:	6713      	str	r3, [r2, #112]	@ 0x70
 8004586:	4b5c      	ldr	r3, [pc, #368]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458a:	4a5b      	ldr	r2, [pc, #364]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	6713      	str	r3, [r2, #112]	@ 0x70
 8004592:	e00b      	b.n	80045ac <HAL_RCC_OscConfig+0x324>
 8004594:	4b58      	ldr	r3, [pc, #352]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004598:	4a57      	ldr	r2, [pc, #348]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a0:	4b55      	ldr	r3, [pc, #340]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a4:	4a54      	ldr	r2, [pc, #336]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80045a6:	f023 0304 	bic.w	r3, r3, #4
 80045aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d015      	beq.n	80045e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b4:	f7fd ff3a 	bl	800242c <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ba:	e00a      	b.n	80045d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045bc:	f7fd ff36 	bl	800242c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e0cb      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d2:	4b49      	ldr	r3, [pc, #292]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80045d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0ee      	beq.n	80045bc <HAL_RCC_OscConfig+0x334>
 80045de:	e014      	b.n	800460a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e0:	f7fd ff24 	bl	800242c <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fd ff20 	bl	800242c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e0b5      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fe:	4b3e      	ldr	r3, [pc, #248]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1ee      	bne.n	80045e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800460a:	7dfb      	ldrb	r3, [r7, #23]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d105      	bne.n	800461c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004610:	4b39      	ldr	r3, [pc, #228]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004614:	4a38      	ldr	r2, [pc, #224]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800461a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80a1 	beq.w	8004768 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004626:	4b34      	ldr	r3, [pc, #208]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 030c 	and.w	r3, r3, #12
 800462e:	2b08      	cmp	r3, #8
 8004630:	d05c      	beq.n	80046ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d141      	bne.n	80046be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463a:	4b31      	ldr	r3, [pc, #196]	@ (8004700 <HAL_RCC_OscConfig+0x478>)
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004640:	f7fd fef4 	bl	800242c <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004648:	f7fd fef0 	bl	800242c <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e087      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465a:	4b27      	ldr	r3, [pc, #156]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69da      	ldr	r2, [r3, #28]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	019b      	lsls	r3, r3, #6
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467c:	085b      	lsrs	r3, r3, #1
 800467e:	3b01      	subs	r3, #1
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004688:	061b      	lsls	r3, r3, #24
 800468a:	491b      	ldr	r1, [pc, #108]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004690:	4b1b      	ldr	r3, [pc, #108]	@ (8004700 <HAL_RCC_OscConfig+0x478>)
 8004692:	2201      	movs	r2, #1
 8004694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004696:	f7fd fec9 	bl	800242c <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469e:	f7fd fec5 	bl	800242c <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e05c      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b0:	4b11      	ldr	r3, [pc, #68]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0f0      	beq.n	800469e <HAL_RCC_OscConfig+0x416>
 80046bc:	e054      	b.n	8004768 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046be:	4b10      	ldr	r3, [pc, #64]	@ (8004700 <HAL_RCC_OscConfig+0x478>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c4:	f7fd feb2 	bl	800242c <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046cc:	f7fd feae 	bl	800242c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e045      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046de:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <HAL_RCC_OscConfig+0x470>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f0      	bne.n	80046cc <HAL_RCC_OscConfig+0x444>
 80046ea:	e03d      	b.n	8004768 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d107      	bne.n	8004704 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e038      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
 80046f8:	40023800 	.word	0x40023800
 80046fc:	40007000 	.word	0x40007000
 8004700:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004704:	4b1b      	ldr	r3, [pc, #108]	@ (8004774 <HAL_RCC_OscConfig+0x4ec>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d028      	beq.n	8004764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800471c:	429a      	cmp	r2, r3
 800471e:	d121      	bne.n	8004764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472a:	429a      	cmp	r2, r3
 800472c:	d11a      	bne.n	8004764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004734:	4013      	ands	r3, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800473a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800473c:	4293      	cmp	r3, r2
 800473e:	d111      	bne.n	8004764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474a:	085b      	lsrs	r3, r3, #1
 800474c:	3b01      	subs	r3, #1
 800474e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004750:	429a      	cmp	r2, r3
 8004752:	d107      	bne.n	8004764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004760:	429a      	cmp	r2, r3
 8004762:	d001      	beq.n	8004768 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40023800 	.word	0x40023800

08004778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e0cc      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800478c:	4b68      	ldr	r3, [pc, #416]	@ (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d90c      	bls.n	80047b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479a:	4b65      	ldr	r3, [pc, #404]	@ (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a2:	4b63      	ldr	r3, [pc, #396]	@ (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d001      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0b8      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d020      	beq.n	8004802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047cc:	4b59      	ldr	r3, [pc, #356]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4a58      	ldr	r2, [pc, #352]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e4:	4b53      	ldr	r3, [pc, #332]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4a52      	ldr	r2, [pc, #328]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f0:	4b50      	ldr	r3, [pc, #320]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	494d      	ldr	r1, [pc, #308]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d044      	beq.n	8004898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d107      	bne.n	8004826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004816:	4b47      	ldr	r3, [pc, #284]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d119      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e07f      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d003      	beq.n	8004836 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004832:	2b03      	cmp	r3, #3
 8004834:	d107      	bne.n	8004846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004836:	4b3f      	ldr	r3, [pc, #252]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d109      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e06f      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004846:	4b3b      	ldr	r3, [pc, #236]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e067      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004856:	4b37      	ldr	r3, [pc, #220]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f023 0203 	bic.w	r2, r3, #3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	4934      	ldr	r1, [pc, #208]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	4313      	orrs	r3, r2
 8004866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004868:	f7fd fde0 	bl	800242c <HAL_GetTick>
 800486c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486e:	e00a      	b.n	8004886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004870:	f7fd fddc 	bl	800242c <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800487e:	4293      	cmp	r3, r2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e04f      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004886:	4b2b      	ldr	r3, [pc, #172]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 020c 	and.w	r2, r3, #12
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	429a      	cmp	r2, r3
 8004896:	d1eb      	bne.n	8004870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004898:	4b25      	ldr	r3, [pc, #148]	@ (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d20c      	bcs.n	80048c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a6:	4b22      	ldr	r3, [pc, #136]	@ (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ae:	4b20      	ldr	r3, [pc, #128]	@ (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e032      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048cc:	4b19      	ldr	r3, [pc, #100]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	4916      	ldr	r1, [pc, #88]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ea:	4b12      	ldr	r3, [pc, #72]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	490e      	ldr	r1, [pc, #56]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048fe:	f000 f821 	bl	8004944 <HAL_RCC_GetSysClockFreq>
 8004902:	4602      	mov	r2, r0
 8004904:	4b0b      	ldr	r3, [pc, #44]	@ (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	091b      	lsrs	r3, r3, #4
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	490a      	ldr	r1, [pc, #40]	@ (8004938 <HAL_RCC_ClockConfig+0x1c0>)
 8004910:	5ccb      	ldrb	r3, [r1, r3]
 8004912:	fa22 f303 	lsr.w	r3, r2, r3
 8004916:	4a09      	ldr	r2, [pc, #36]	@ (800493c <HAL_RCC_ClockConfig+0x1c4>)
 8004918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800491a:	4b09      	ldr	r3, [pc, #36]	@ (8004940 <HAL_RCC_ClockConfig+0x1c8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f7fd fd40 	bl	80023a4 <HAL_InitTick>

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40023c00 	.word	0x40023c00
 8004934:	40023800 	.word	0x40023800
 8004938:	080064c8 	.word	0x080064c8
 800493c:	20000004 	.word	0x20000004
 8004940:	20000008 	.word	0x20000008

08004944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004948:	b094      	sub	sp, #80	@ 0x50
 800494a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800495c:	4b79      	ldr	r3, [pc, #484]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 030c 	and.w	r3, r3, #12
 8004964:	2b08      	cmp	r3, #8
 8004966:	d00d      	beq.n	8004984 <HAL_RCC_GetSysClockFreq+0x40>
 8004968:	2b08      	cmp	r3, #8
 800496a:	f200 80e1 	bhi.w	8004b30 <HAL_RCC_GetSysClockFreq+0x1ec>
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0x34>
 8004972:	2b04      	cmp	r3, #4
 8004974:	d003      	beq.n	800497e <HAL_RCC_GetSysClockFreq+0x3a>
 8004976:	e0db      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004978:	4b73      	ldr	r3, [pc, #460]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x204>)
 800497a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800497c:	e0db      	b.n	8004b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800497e:	4b73      	ldr	r3, [pc, #460]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x208>)
 8004980:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004982:	e0d8      	b.n	8004b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004984:	4b6f      	ldr	r3, [pc, #444]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800498c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800498e:	4b6d      	ldr	r3, [pc, #436]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d063      	beq.n	8004a62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800499a:	4b6a      	ldr	r3, [pc, #424]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	099b      	lsrs	r3, r3, #6
 80049a0:	2200      	movs	r2, #0
 80049a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ae:	2300      	movs	r3, #0
 80049b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049b6:	4622      	mov	r2, r4
 80049b8:	462b      	mov	r3, r5
 80049ba:	f04f 0000 	mov.w	r0, #0
 80049be:	f04f 0100 	mov.w	r1, #0
 80049c2:	0159      	lsls	r1, r3, #5
 80049c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049c8:	0150      	lsls	r0, r2, #5
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4621      	mov	r1, r4
 80049d0:	1a51      	subs	r1, r2, r1
 80049d2:	6139      	str	r1, [r7, #16]
 80049d4:	4629      	mov	r1, r5
 80049d6:	eb63 0301 	sbc.w	r3, r3, r1
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049e8:	4659      	mov	r1, fp
 80049ea:	018b      	lsls	r3, r1, #6
 80049ec:	4651      	mov	r1, sl
 80049ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049f2:	4651      	mov	r1, sl
 80049f4:	018a      	lsls	r2, r1, #6
 80049f6:	4651      	mov	r1, sl
 80049f8:	ebb2 0801 	subs.w	r8, r2, r1
 80049fc:	4659      	mov	r1, fp
 80049fe:	eb63 0901 	sbc.w	r9, r3, r1
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a16:	4690      	mov	r8, r2
 8004a18:	4699      	mov	r9, r3
 8004a1a:	4623      	mov	r3, r4
 8004a1c:	eb18 0303 	adds.w	r3, r8, r3
 8004a20:	60bb      	str	r3, [r7, #8]
 8004a22:	462b      	mov	r3, r5
 8004a24:	eb49 0303 	adc.w	r3, r9, r3
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a36:	4629      	mov	r1, r5
 8004a38:	024b      	lsls	r3, r1, #9
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a40:	4621      	mov	r1, r4
 8004a42:	024a      	lsls	r2, r1, #9
 8004a44:	4610      	mov	r0, r2
 8004a46:	4619      	mov	r1, r3
 8004a48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a54:	f7fb fbd2 	bl	80001fc <__aeabi_uldivmod>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a60:	e058      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a62:	4b38      	ldr	r3, [pc, #224]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	099b      	lsrs	r3, r3, #6
 8004a68:	2200      	movs	r2, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a72:	623b      	str	r3, [r7, #32]
 8004a74:	2300      	movs	r3, #0
 8004a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a7c:	4642      	mov	r2, r8
 8004a7e:	464b      	mov	r3, r9
 8004a80:	f04f 0000 	mov.w	r0, #0
 8004a84:	f04f 0100 	mov.w	r1, #0
 8004a88:	0159      	lsls	r1, r3, #5
 8004a8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a8e:	0150      	lsls	r0, r2, #5
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4641      	mov	r1, r8
 8004a96:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a9a:	4649      	mov	r1, r9
 8004a9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	f04f 0300 	mov.w	r3, #0
 8004aa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004aac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ab0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ab4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ab8:	eb63 050b 	sbc.w	r5, r3, fp
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	00eb      	lsls	r3, r5, #3
 8004ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aca:	00e2      	lsls	r2, r4, #3
 8004acc:	4614      	mov	r4, r2
 8004ace:	461d      	mov	r5, r3
 8004ad0:	4643      	mov	r3, r8
 8004ad2:	18e3      	adds	r3, r4, r3
 8004ad4:	603b      	str	r3, [r7, #0]
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	eb45 0303 	adc.w	r3, r5, r3
 8004adc:	607b      	str	r3, [r7, #4]
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aea:	4629      	mov	r1, r5
 8004aec:	028b      	lsls	r3, r1, #10
 8004aee:	4621      	mov	r1, r4
 8004af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004af4:	4621      	mov	r1, r4
 8004af6:	028a      	lsls	r2, r1, #10
 8004af8:	4610      	mov	r0, r2
 8004afa:	4619      	mov	r1, r3
 8004afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004afe:	2200      	movs	r2, #0
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	61fa      	str	r2, [r7, #28]
 8004b04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b08:	f7fb fb78 	bl	80001fc <__aeabi_uldivmod>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4613      	mov	r3, r2
 8004b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b14:	4b0b      	ldr	r3, [pc, #44]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	0c1b      	lsrs	r3, r3, #16
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	3301      	adds	r3, #1
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b2e:	e002      	b.n	8004b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b30:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3750      	adds	r7, #80	@ 0x50
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
 8004b48:	00f42400 	.word	0x00f42400
 8004b4c:	007a1200 	.word	0x007a1200

08004b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b54:	4b03      	ldr	r3, [pc, #12]	@ (8004b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b56:	681b      	ldr	r3, [r3, #0]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	20000004 	.word	0x20000004

08004b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b6c:	f7ff fff0 	bl	8004b50 <HAL_RCC_GetHCLKFreq>
 8004b70:	4602      	mov	r2, r0
 8004b72:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	0a9b      	lsrs	r3, r3, #10
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	4903      	ldr	r1, [pc, #12]	@ (8004b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b7e:	5ccb      	ldrb	r3, [r1, r3]
 8004b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	080064d8 	.word	0x080064d8

08004b90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10b      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d105      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d075      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bc4:	4b91      	ldr	r3, [pc, #580]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bca:	f7fd fc2f 	bl	800242c <HAL_GetTick>
 8004bce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bd2:	f7fd fc2b 	bl	800242c <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e189      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004be4:	4b8a      	ldr	r3, [pc, #552]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f0      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d009      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	019a      	lsls	r2, r3, #6
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	071b      	lsls	r3, r3, #28
 8004c08:	4981      	ldr	r1, [pc, #516]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01f      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c1c:	4b7c      	ldr	r3, [pc, #496]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c22:	0f1b      	lsrs	r3, r3, #28
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	019a      	lsls	r2, r3, #6
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	061b      	lsls	r3, r3, #24
 8004c36:	431a      	orrs	r2, r3
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	071b      	lsls	r3, r3, #28
 8004c3c:	4974      	ldr	r1, [pc, #464]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c44:	4b72      	ldr	r3, [pc, #456]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c4a:	f023 021f 	bic.w	r2, r3, #31
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	496e      	ldr	r1, [pc, #440]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00d      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	019a      	lsls	r2, r3, #6
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	061b      	lsls	r3, r3, #24
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	071b      	lsls	r3, r3, #28
 8004c7c:	4964      	ldr	r1, [pc, #400]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c84:	4b61      	ldr	r3, [pc, #388]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c8a:	f7fd fbcf 	bl	800242c <HAL_GetTick>
 8004c8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c92:	f7fd fbcb 	bl	800242c <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e129      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ca4:	4b5a      	ldr	r3, [pc, #360]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f0      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d105      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d079      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004cc8:	4b52      	ldr	r3, [pc, #328]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cce:	f7fd fbad 	bl	800242c <HAL_GetTick>
 8004cd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cd6:	f7fd fba9 	bl	800242c <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e107      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ce8:	4b49      	ldr	r3, [pc, #292]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cf4:	d0ef      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0304 	and.w	r3, r3, #4
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d020      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d02:	4b43      	ldr	r3, [pc, #268]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d08:	0f1b      	lsrs	r3, r3, #28
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	019a      	lsls	r2, r3, #6
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	061b      	lsls	r3, r3, #24
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	071b      	lsls	r3, r3, #28
 8004d22:	493b      	ldr	r1, [pc, #236]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d2a:	4b39      	ldr	r3, [pc, #228]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d30:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	021b      	lsls	r3, r3, #8
 8004d3c:	4934      	ldr	r1, [pc, #208]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d01e      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d50:	4b2f      	ldr	r3, [pc, #188]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d56:	0e1b      	lsrs	r3, r3, #24
 8004d58:	f003 030f 	and.w	r3, r3, #15
 8004d5c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	019a      	lsls	r2, r3, #6
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	061b      	lsls	r3, r3, #24
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	071b      	lsls	r3, r3, #28
 8004d70:	4927      	ldr	r1, [pc, #156]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d78:	4b25      	ldr	r3, [pc, #148]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d7e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	4922      	ldr	r1, [pc, #136]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d8e:	4b21      	ldr	r3, [pc, #132]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d94:	f7fd fb4a 	bl	800242c <HAL_GetTick>
 8004d98:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d9c:	f7fd fb46 	bl	800242c <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e0a4      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dae:	4b18      	ldr	r3, [pc, #96]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004db6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dba:	d1ef      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 808b 	beq.w	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	4b10      	ldr	r3, [pc, #64]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dda:	4b0d      	ldr	r3, [pc, #52]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004de6:	4b0c      	ldr	r3, [pc, #48]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a0b      	ldr	r2, [pc, #44]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004df2:	f7fd fb1b 	bl	800242c <HAL_GetTick>
 8004df6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004df8:	e010      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dfa:	f7fd fb17 	bl	800242c <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d909      	bls.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e075      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004e0c:	42470068 	.word	0x42470068
 8004e10:	40023800 	.word	0x40023800
 8004e14:	42470070 	.word	0x42470070
 8004e18:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004e1c:	4b38      	ldr	r3, [pc, #224]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0e8      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e28:	4b36      	ldr	r3, [pc, #216]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e30:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d02f      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d028      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e46:	4b2f      	ldr	r3, [pc, #188]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e4e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e50:	4b2d      	ldr	r3, [pc, #180]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e56:	4b2c      	ldr	r3, [pc, #176]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e5c:	4a29      	ldr	r2, [pc, #164]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e62:	4b28      	ldr	r3, [pc, #160]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d114      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e6e:	f7fd fadd 	bl	800242c <HAL_GetTick>
 8004e72:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e74:	e00a      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e76:	f7fd fad9 	bl	800242c <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e035      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0ee      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ea0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ea4:	d10d      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004ea6:	4b17      	ldr	r3, [pc, #92]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004eb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eba:	4912      	ldr	r1, [pc, #72]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	608b      	str	r3, [r1, #8]
 8004ec0:	e005      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004ec2:	4b10      	ldr	r3, [pc, #64]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ec8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004ecc:	6093      	str	r3, [r2, #8]
 8004ece:	4b0d      	ldr	r3, [pc, #52]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ed0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eda:	490a      	ldr	r1, [pc, #40]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d004      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004ef2:	4b06      	ldr	r3, [pc, #24]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004ef4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40007000 	.word	0x40007000
 8004f04:	40023800 	.word	0x40023800
 8004f08:	42470e40 	.word	0x42470e40
 8004f0c:	424711e0 	.word	0x424711e0

08004f10 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e01c      	b.n	8004f5c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	795b      	ldrb	r3, [r3, #5]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d105      	bne.n	8004f38 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fc fdb8 	bl	8001aa8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0204 	orr.w	r2, r2, #4
 8004f4c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e07b      	b.n	800506e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d108      	bne.n	8004f90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f86:	d009      	beq.n	8004f9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	61da      	str	r2, [r3, #28]
 8004f8e:	e005      	b.n	8004f9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fc fd98 	bl	8001aec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005020:	ea42 0103 	orr.w	r1, r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005028:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	0c1b      	lsrs	r3, r3, #16
 800503a:	f003 0104 	and.w	r1, r3, #4
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005042:	f003 0210 	and.w	r2, r3, #16
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69da      	ldr	r2, [r3, #28]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800505c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b082      	sub	sp, #8
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e01a      	b.n	80050be <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800509e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7fc fd6b 	bl	8001b7c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b088      	sub	sp, #32
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	603b      	str	r3, [r7, #0]
 80050d2:	4613      	mov	r3, r2
 80050d4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050d6:	f7fd f9a9 	bl	800242c <HAL_GetTick>
 80050da:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80050dc:	88fb      	ldrh	r3, [r7, #6]
 80050de:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d001      	beq.n	80050f0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80050ec:	2302      	movs	r3, #2
 80050ee:	e12a      	b.n	8005346 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <HAL_SPI_Transmit+0x36>
 80050f6:	88fb      	ldrh	r3, [r7, #6]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e122      	b.n	8005346 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_SPI_Transmit+0x48>
 800510a:	2302      	movs	r3, #2
 800510c:	e11b      	b.n	8005346 <HAL_SPI_Transmit+0x280>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2203      	movs	r2, #3
 800511a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	88fa      	ldrh	r2, [r7, #6]
 800512e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	88fa      	ldrh	r2, [r7, #6]
 8005134:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800515c:	d10f      	bne.n	800517e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800516c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800517c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005188:	2b40      	cmp	r3, #64	@ 0x40
 800518a:	d007      	beq.n	800519c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800519a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051a4:	d152      	bne.n	800524c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <HAL_SPI_Transmit+0xee>
 80051ae:	8b7b      	ldrh	r3, [r7, #26]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d145      	bne.n	8005240 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b8:	881a      	ldrh	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c4:	1c9a      	adds	r2, r3, #2
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051d8:	e032      	b.n	8005240 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d112      	bne.n	800520e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ec:	881a      	ldrh	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f8:	1c9a      	adds	r2, r3, #2
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800520c:	e018      	b.n	8005240 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800520e:	f7fd f90d 	bl	800242c <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d803      	bhi.n	8005226 <HAL_SPI_Transmit+0x160>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005224:	d102      	bne.n	800522c <HAL_SPI_Transmit+0x166>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d109      	bne.n	8005240 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e082      	b.n	8005346 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1c7      	bne.n	80051da <HAL_SPI_Transmit+0x114>
 800524a:	e053      	b.n	80052f4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <HAL_SPI_Transmit+0x194>
 8005254:	8b7b      	ldrh	r3, [r7, #26]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d147      	bne.n	80052ea <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	330c      	adds	r3, #12
 8005264:	7812      	ldrb	r2, [r2, #0]
 8005266:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005280:	e033      	b.n	80052ea <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b02      	cmp	r3, #2
 800528e:	d113      	bne.n	80052b8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	330c      	adds	r3, #12
 800529a:	7812      	ldrb	r2, [r2, #0]
 800529c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80052b6:	e018      	b.n	80052ea <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052b8:	f7fd f8b8 	bl	800242c <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d803      	bhi.n	80052d0 <HAL_SPI_Transmit+0x20a>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052ce:	d102      	bne.n	80052d6 <HAL_SPI_Transmit+0x210>
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d109      	bne.n	80052ea <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e02d      	b.n	8005346 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1c6      	bne.n	8005282 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	6839      	ldr	r1, [r7, #0]
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 f8bf 	bl	800547c <SPI_EndRxTxTransaction>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10a      	bne.n	8005328 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	617b      	str	r3, [r7, #20]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e000      	b.n	8005346 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005344:	2300      	movs	r3, #0
  }
}
 8005346:	4618      	mov	r0, r3
 8005348:	3720      	adds	r7, #32
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800535c:	b2db      	uxtb	r3, r3
}
 800535e:	4618      	mov	r0, r3
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	603b      	str	r3, [r7, #0]
 8005378:	4613      	mov	r3, r2
 800537a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800537c:	f7fd f856 	bl	800242c <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005384:	1a9b      	subs	r3, r3, r2
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	4413      	add	r3, r2
 800538a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800538c:	f7fd f84e 	bl	800242c <HAL_GetTick>
 8005390:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005392:	4b39      	ldr	r3, [pc, #228]	@ (8005478 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	015b      	lsls	r3, r3, #5
 8005398:	0d1b      	lsrs	r3, r3, #20
 800539a:	69fa      	ldr	r2, [r7, #28]
 800539c:	fb02 f303 	mul.w	r3, r2, r3
 80053a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053a2:	e054      	b.n	800544e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053aa:	d050      	beq.n	800544e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053ac:	f7fd f83e 	bl	800242c <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	69fa      	ldr	r2, [r7, #28]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d902      	bls.n	80053c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d13d      	bne.n	800543e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053da:	d111      	bne.n	8005400 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053e4:	d004      	beq.n	80053f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ee:	d107      	bne.n	8005400 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005408:	d10f      	bne.n	800542a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005428:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e017      	b.n	800546e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	3b01      	subs	r3, #1
 800544c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4013      	ands	r3, r2
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	429a      	cmp	r2, r3
 800545c:	bf0c      	ite	eq
 800545e:	2301      	moveq	r3, #1
 8005460:	2300      	movne	r3, #0
 8005462:	b2db      	uxtb	r3, r3
 8005464:	461a      	mov	r2, r3
 8005466:	79fb      	ldrb	r3, [r7, #7]
 8005468:	429a      	cmp	r2, r3
 800546a:	d19b      	bne.n	80053a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3720      	adds	r7, #32
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000004 	.word	0x20000004

0800547c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af02      	add	r7, sp, #8
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2201      	movs	r2, #1
 8005490:	2102      	movs	r1, #2
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f7ff ff6a 	bl	800536c <SPI_WaitFlagStateUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d007      	beq.n	80054ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a2:	f043 0220 	orr.w	r2, r3, #32
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e032      	b.n	8005514 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054ae:	4b1b      	ldr	r3, [pc, #108]	@ (800551c <SPI_EndRxTxTransaction+0xa0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1b      	ldr	r2, [pc, #108]	@ (8005520 <SPI_EndRxTxTransaction+0xa4>)
 80054b4:	fba2 2303 	umull	r2, r3, r2, r3
 80054b8:	0d5b      	lsrs	r3, r3, #21
 80054ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80054be:	fb02 f303 	mul.w	r3, r2, r3
 80054c2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054cc:	d112      	bne.n	80054f4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2200      	movs	r2, #0
 80054d6:	2180      	movs	r1, #128	@ 0x80
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f7ff ff47 	bl	800536c <SPI_WaitFlagStateUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d016      	beq.n	8005512 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e8:	f043 0220 	orr.w	r2, r3, #32
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e00f      	b.n	8005514 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	3b01      	subs	r3, #1
 80054fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550a:	2b80      	cmp	r3, #128	@ 0x80
 800550c:	d0f2      	beq.n	80054f4 <SPI_EndRxTxTransaction+0x78>
 800550e:	e000      	b.n	8005512 <SPI_EndRxTxTransaction+0x96>
        break;
 8005510:	bf00      	nop
  }

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3718      	adds	r7, #24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20000004 	.word	0x20000004
 8005520:	165e9f81 	.word	0x165e9f81

08005524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e041      	b.n	80055ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fc fb34 	bl	8001bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3304      	adds	r3, #4
 8005560:	4619      	mov	r1, r3
 8005562:	4610      	mov	r0, r2
 8005564:	f000 f8f4 	bl	8005750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <HAL_TIM_ConfigClockSource+0x1c>
 80055da:	2302      	movs	r3, #2
 80055dc:	e0b4      	b.n	8005748 <HAL_TIM_ConfigClockSource+0x186>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2202      	movs	r2, #2
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005604:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005616:	d03e      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0xd4>
 8005618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800561c:	f200 8087 	bhi.w	800572e <HAL_TIM_ConfigClockSource+0x16c>
 8005620:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005624:	f000 8086 	beq.w	8005734 <HAL_TIM_ConfigClockSource+0x172>
 8005628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800562c:	d87f      	bhi.n	800572e <HAL_TIM_ConfigClockSource+0x16c>
 800562e:	2b70      	cmp	r3, #112	@ 0x70
 8005630:	d01a      	beq.n	8005668 <HAL_TIM_ConfigClockSource+0xa6>
 8005632:	2b70      	cmp	r3, #112	@ 0x70
 8005634:	d87b      	bhi.n	800572e <HAL_TIM_ConfigClockSource+0x16c>
 8005636:	2b60      	cmp	r3, #96	@ 0x60
 8005638:	d050      	beq.n	80056dc <HAL_TIM_ConfigClockSource+0x11a>
 800563a:	2b60      	cmp	r3, #96	@ 0x60
 800563c:	d877      	bhi.n	800572e <HAL_TIM_ConfigClockSource+0x16c>
 800563e:	2b50      	cmp	r3, #80	@ 0x50
 8005640:	d03c      	beq.n	80056bc <HAL_TIM_ConfigClockSource+0xfa>
 8005642:	2b50      	cmp	r3, #80	@ 0x50
 8005644:	d873      	bhi.n	800572e <HAL_TIM_ConfigClockSource+0x16c>
 8005646:	2b40      	cmp	r3, #64	@ 0x40
 8005648:	d058      	beq.n	80056fc <HAL_TIM_ConfigClockSource+0x13a>
 800564a:	2b40      	cmp	r3, #64	@ 0x40
 800564c:	d86f      	bhi.n	800572e <HAL_TIM_ConfigClockSource+0x16c>
 800564e:	2b30      	cmp	r3, #48	@ 0x30
 8005650:	d064      	beq.n	800571c <HAL_TIM_ConfigClockSource+0x15a>
 8005652:	2b30      	cmp	r3, #48	@ 0x30
 8005654:	d86b      	bhi.n	800572e <HAL_TIM_ConfigClockSource+0x16c>
 8005656:	2b20      	cmp	r3, #32
 8005658:	d060      	beq.n	800571c <HAL_TIM_ConfigClockSource+0x15a>
 800565a:	2b20      	cmp	r3, #32
 800565c:	d867      	bhi.n	800572e <HAL_TIM_ConfigClockSource+0x16c>
 800565e:	2b00      	cmp	r3, #0
 8005660:	d05c      	beq.n	800571c <HAL_TIM_ConfigClockSource+0x15a>
 8005662:	2b10      	cmp	r3, #16
 8005664:	d05a      	beq.n	800571c <HAL_TIM_ConfigClockSource+0x15a>
 8005666:	e062      	b.n	800572e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005678:	f000 f990 	bl	800599c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800568a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	609a      	str	r2, [r3, #8]
      break;
 8005694:	e04f      	b.n	8005736 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056a6:	f000 f979 	bl	800599c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056b8:	609a      	str	r2, [r3, #8]
      break;
 80056ba:	e03c      	b.n	8005736 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c8:	461a      	mov	r2, r3
 80056ca:	f000 f8ed 	bl	80058a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2150      	movs	r1, #80	@ 0x50
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 f946 	bl	8005966 <TIM_ITRx_SetConfig>
      break;
 80056da:	e02c      	b.n	8005736 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056e8:	461a      	mov	r2, r3
 80056ea:	f000 f90c 	bl	8005906 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2160      	movs	r1, #96	@ 0x60
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 f936 	bl	8005966 <TIM_ITRx_SetConfig>
      break;
 80056fa:	e01c      	b.n	8005736 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005708:	461a      	mov	r2, r3
 800570a:	f000 f8cd 	bl	80058a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2140      	movs	r1, #64	@ 0x40
 8005714:	4618      	mov	r0, r3
 8005716:	f000 f926 	bl	8005966 <TIM_ITRx_SetConfig>
      break;
 800571a:	e00c      	b.n	8005736 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4619      	mov	r1, r3
 8005726:	4610      	mov	r0, r2
 8005728:	f000 f91d 	bl	8005966 <TIM_ITRx_SetConfig>
      break;
 800572c:	e003      	b.n	8005736 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	73fb      	strb	r3, [r7, #15]
      break;
 8005732:	e000      	b.n	8005736 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005734:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005746:	7bfb      	ldrb	r3, [r7, #15]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a46      	ldr	r2, [pc, #280]	@ (800587c <TIM_Base_SetConfig+0x12c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d013      	beq.n	8005790 <TIM_Base_SetConfig+0x40>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800576e:	d00f      	beq.n	8005790 <TIM_Base_SetConfig+0x40>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a43      	ldr	r2, [pc, #268]	@ (8005880 <TIM_Base_SetConfig+0x130>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00b      	beq.n	8005790 <TIM_Base_SetConfig+0x40>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a42      	ldr	r2, [pc, #264]	@ (8005884 <TIM_Base_SetConfig+0x134>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d007      	beq.n	8005790 <TIM_Base_SetConfig+0x40>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a41      	ldr	r2, [pc, #260]	@ (8005888 <TIM_Base_SetConfig+0x138>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d003      	beq.n	8005790 <TIM_Base_SetConfig+0x40>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a40      	ldr	r2, [pc, #256]	@ (800588c <TIM_Base_SetConfig+0x13c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d108      	bne.n	80057a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a35      	ldr	r2, [pc, #212]	@ (800587c <TIM_Base_SetConfig+0x12c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d02b      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057b0:	d027      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a32      	ldr	r2, [pc, #200]	@ (8005880 <TIM_Base_SetConfig+0x130>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d023      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a31      	ldr	r2, [pc, #196]	@ (8005884 <TIM_Base_SetConfig+0x134>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d01f      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a30      	ldr	r2, [pc, #192]	@ (8005888 <TIM_Base_SetConfig+0x138>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d01b      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a2f      	ldr	r2, [pc, #188]	@ (800588c <TIM_Base_SetConfig+0x13c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d017      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005890 <TIM_Base_SetConfig+0x140>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d013      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005894 <TIM_Base_SetConfig+0x144>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00f      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005898 <TIM_Base_SetConfig+0x148>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d00b      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a2b      	ldr	r2, [pc, #172]	@ (800589c <TIM_Base_SetConfig+0x14c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d007      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a2a      	ldr	r2, [pc, #168]	@ (80058a0 <TIM_Base_SetConfig+0x150>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d003      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a29      	ldr	r2, [pc, #164]	@ (80058a4 <TIM_Base_SetConfig+0x154>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d108      	bne.n	8005814 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a10      	ldr	r2, [pc, #64]	@ (800587c <TIM_Base_SetConfig+0x12c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <TIM_Base_SetConfig+0xf8>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a12      	ldr	r2, [pc, #72]	@ (800588c <TIM_Base_SetConfig+0x13c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d103      	bne.n	8005850 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b01      	cmp	r3, #1
 8005860:	d105      	bne.n	800586e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f023 0201 	bic.w	r2, r3, #1
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	611a      	str	r2, [r3, #16]
  }
}
 800586e:	bf00      	nop
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40010000 	.word	0x40010000
 8005880:	40000400 	.word	0x40000400
 8005884:	40000800 	.word	0x40000800
 8005888:	40000c00 	.word	0x40000c00
 800588c:	40010400 	.word	0x40010400
 8005890:	40014000 	.word	0x40014000
 8005894:	40014400 	.word	0x40014400
 8005898:	40014800 	.word	0x40014800
 800589c:	40001800 	.word	0x40001800
 80058a0:	40001c00 	.word	0x40001c00
 80058a4:	40002000 	.word	0x40002000

080058a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	f023 0201 	bic.w	r2, r3, #1
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	4313      	orrs	r3, r2
 80058dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f023 030a 	bic.w	r3, r3, #10
 80058e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	621a      	str	r2, [r3, #32]
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005906:	b480      	push	{r7}
 8005908:	b087      	sub	sp, #28
 800590a:	af00      	add	r7, sp, #0
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f023 0210 	bic.w	r2, r3, #16
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	031b      	lsls	r3, r3, #12
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005942:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	011b      	lsls	r3, r3, #4
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	621a      	str	r2, [r3, #32]
}
 800595a:	bf00      	nop
 800595c:	371c      	adds	r7, #28
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005966:	b480      	push	{r7}
 8005968:	b085      	sub	sp, #20
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800597c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	f043 0307 	orr.w	r3, r3, #7
 8005988:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	609a      	str	r2, [r3, #8]
}
 8005990:	bf00      	nop
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	021a      	lsls	r2, r3, #8
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	431a      	orrs	r2, r3
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	609a      	str	r2, [r3, #8]
}
 80059d0:	bf00      	nop
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d101      	bne.n	80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059f0:	2302      	movs	r3, #2
 80059f2:	e05a      	b.n	8005aaa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a21      	ldr	r2, [pc, #132]	@ (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d022      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a40:	d01d      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1d      	ldr	r2, [pc, #116]	@ (8005abc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d018      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a1b      	ldr	r2, [pc, #108]	@ (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00e      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a18      	ldr	r2, [pc, #96]	@ (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d009      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a17      	ldr	r2, [pc, #92]	@ (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d004      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a15      	ldr	r2, [pc, #84]	@ (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d10c      	bne.n	8005a98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	40010400 	.word	0x40010400
 8005acc:	40014000 	.word	0x40014000
 8005ad0:	40001800 	.word	0x40001800

08005ad4 <findslot>:
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8005b00 <findslot+0x2c>)
 8005ad6:	b510      	push	{r4, lr}
 8005ad8:	4604      	mov	r4, r0
 8005ada:	6818      	ldr	r0, [r3, #0]
 8005adc:	b118      	cbz	r0, 8005ae6 <findslot+0x12>
 8005ade:	6a03      	ldr	r3, [r0, #32]
 8005ae0:	b90b      	cbnz	r3, 8005ae6 <findslot+0x12>
 8005ae2:	f000 faed 	bl	80060c0 <__sinit>
 8005ae6:	2c13      	cmp	r4, #19
 8005ae8:	d807      	bhi.n	8005afa <findslot+0x26>
 8005aea:	4806      	ldr	r0, [pc, #24]	@ (8005b04 <findslot+0x30>)
 8005aec:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005af0:	3201      	adds	r2, #1
 8005af2:	d002      	beq.n	8005afa <findslot+0x26>
 8005af4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005af8:	bd10      	pop	{r4, pc}
 8005afa:	2000      	movs	r0, #0
 8005afc:	e7fc      	b.n	8005af8 <findslot+0x24>
 8005afe:	bf00      	nop
 8005b00:	20000024 	.word	0x20000024
 8005b04:	20025be0 	.word	0x20025be0

08005b08 <error>:
 8005b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	f000 fb16 	bl	800613c <__errno>
 8005b10:	2613      	movs	r6, #19
 8005b12:	4605      	mov	r5, r0
 8005b14:	2700      	movs	r7, #0
 8005b16:	4630      	mov	r0, r6
 8005b18:	4639      	mov	r1, r7
 8005b1a:	beab      	bkpt	0x00ab
 8005b1c:	4606      	mov	r6, r0
 8005b1e:	602e      	str	r6, [r5, #0]
 8005b20:	4620      	mov	r0, r4
 8005b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005b24 <checkerror>:
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d101      	bne.n	8005b2c <checkerror+0x8>
 8005b28:	f7ff bfee 	b.w	8005b08 <error>
 8005b2c:	4770      	bx	lr

08005b2e <_swiread>:
 8005b2e:	b530      	push	{r4, r5, lr}
 8005b30:	b085      	sub	sp, #20
 8005b32:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005b36:	9203      	str	r2, [sp, #12]
 8005b38:	2406      	movs	r4, #6
 8005b3a:	ad01      	add	r5, sp, #4
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	4629      	mov	r1, r5
 8005b40:	beab      	bkpt	0x00ab
 8005b42:	4604      	mov	r4, r0
 8005b44:	4620      	mov	r0, r4
 8005b46:	f7ff ffed 	bl	8005b24 <checkerror>
 8005b4a:	b005      	add	sp, #20
 8005b4c:	bd30      	pop	{r4, r5, pc}

08005b4e <_read>:
 8005b4e:	b570      	push	{r4, r5, r6, lr}
 8005b50:	460e      	mov	r6, r1
 8005b52:	4614      	mov	r4, r2
 8005b54:	f7ff ffbe 	bl	8005ad4 <findslot>
 8005b58:	4605      	mov	r5, r0
 8005b5a:	b930      	cbnz	r0, 8005b6a <_read+0x1c>
 8005b5c:	f000 faee 	bl	800613c <__errno>
 8005b60:	2309      	movs	r3, #9
 8005b62:	6003      	str	r3, [r0, #0]
 8005b64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b68:	bd70      	pop	{r4, r5, r6, pc}
 8005b6a:	6800      	ldr	r0, [r0, #0]
 8005b6c:	4622      	mov	r2, r4
 8005b6e:	4631      	mov	r1, r6
 8005b70:	f7ff ffdd 	bl	8005b2e <_swiread>
 8005b74:	1c43      	adds	r3, r0, #1
 8005b76:	d0f5      	beq.n	8005b64 <_read+0x16>
 8005b78:	686b      	ldr	r3, [r5, #4]
 8005b7a:	1a20      	subs	r0, r4, r0
 8005b7c:	4403      	add	r3, r0
 8005b7e:	606b      	str	r3, [r5, #4]
 8005b80:	e7f2      	b.n	8005b68 <_read+0x1a>

08005b82 <_swilseek>:
 8005b82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b84:	460c      	mov	r4, r1
 8005b86:	4616      	mov	r6, r2
 8005b88:	f7ff ffa4 	bl	8005ad4 <findslot>
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	b940      	cbnz	r0, 8005ba2 <_swilseek+0x20>
 8005b90:	f000 fad4 	bl	800613c <__errno>
 8005b94:	2309      	movs	r3, #9
 8005b96:	6003      	str	r3, [r0, #0]
 8005b98:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	b003      	add	sp, #12
 8005ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ba2:	2e02      	cmp	r6, #2
 8005ba4:	d903      	bls.n	8005bae <_swilseek+0x2c>
 8005ba6:	f000 fac9 	bl	800613c <__errno>
 8005baa:	2316      	movs	r3, #22
 8005bac:	e7f3      	b.n	8005b96 <_swilseek+0x14>
 8005bae:	2e01      	cmp	r6, #1
 8005bb0:	d112      	bne.n	8005bd8 <_swilseek+0x56>
 8005bb2:	6843      	ldr	r3, [r0, #4]
 8005bb4:	18e4      	adds	r4, r4, r3
 8005bb6:	d4f6      	bmi.n	8005ba6 <_swilseek+0x24>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	260a      	movs	r6, #10
 8005bbc:	e9cd 3400 	strd	r3, r4, [sp]
 8005bc0:	466f      	mov	r7, sp
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	4639      	mov	r1, r7
 8005bc6:	beab      	bkpt	0x00ab
 8005bc8:	4606      	mov	r6, r0
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f7ff ffaa 	bl	8005b24 <checkerror>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	dbe1      	blt.n	8005b98 <_swilseek+0x16>
 8005bd4:	606c      	str	r4, [r5, #4]
 8005bd6:	e7e1      	b.n	8005b9c <_swilseek+0x1a>
 8005bd8:	2e02      	cmp	r6, #2
 8005bda:	6803      	ldr	r3, [r0, #0]
 8005bdc:	d1ec      	bne.n	8005bb8 <_swilseek+0x36>
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	260c      	movs	r6, #12
 8005be2:	466f      	mov	r7, sp
 8005be4:	4630      	mov	r0, r6
 8005be6:	4639      	mov	r1, r7
 8005be8:	beab      	bkpt	0x00ab
 8005bea:	4606      	mov	r6, r0
 8005bec:	4630      	mov	r0, r6
 8005bee:	f7ff ff99 	bl	8005b24 <checkerror>
 8005bf2:	1c43      	adds	r3, r0, #1
 8005bf4:	d0d0      	beq.n	8005b98 <_swilseek+0x16>
 8005bf6:	4404      	add	r4, r0
 8005bf8:	e7de      	b.n	8005bb8 <_swilseek+0x36>

08005bfa <_lseek>:
 8005bfa:	f7ff bfc2 	b.w	8005b82 <_swilseek>

08005bfe <_swiwrite>:
 8005bfe:	b530      	push	{r4, r5, lr}
 8005c00:	b085      	sub	sp, #20
 8005c02:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005c06:	9203      	str	r2, [sp, #12]
 8005c08:	2405      	movs	r4, #5
 8005c0a:	ad01      	add	r5, sp, #4
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	4629      	mov	r1, r5
 8005c10:	beab      	bkpt	0x00ab
 8005c12:	4604      	mov	r4, r0
 8005c14:	4620      	mov	r0, r4
 8005c16:	f7ff ff85 	bl	8005b24 <checkerror>
 8005c1a:	b005      	add	sp, #20
 8005c1c:	bd30      	pop	{r4, r5, pc}

08005c1e <_write>:
 8005c1e:	b570      	push	{r4, r5, r6, lr}
 8005c20:	460e      	mov	r6, r1
 8005c22:	4615      	mov	r5, r2
 8005c24:	f7ff ff56 	bl	8005ad4 <findslot>
 8005c28:	4604      	mov	r4, r0
 8005c2a:	b930      	cbnz	r0, 8005c3a <_write+0x1c>
 8005c2c:	f000 fa86 	bl	800613c <__errno>
 8005c30:	2309      	movs	r3, #9
 8005c32:	6003      	str	r3, [r0, #0]
 8005c34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c38:	bd70      	pop	{r4, r5, r6, pc}
 8005c3a:	6800      	ldr	r0, [r0, #0]
 8005c3c:	462a      	mov	r2, r5
 8005c3e:	4631      	mov	r1, r6
 8005c40:	f7ff ffdd 	bl	8005bfe <_swiwrite>
 8005c44:	1e03      	subs	r3, r0, #0
 8005c46:	dbf5      	blt.n	8005c34 <_write+0x16>
 8005c48:	6862      	ldr	r2, [r4, #4]
 8005c4a:	1ae8      	subs	r0, r5, r3
 8005c4c:	4402      	add	r2, r0
 8005c4e:	42ab      	cmp	r3, r5
 8005c50:	6062      	str	r2, [r4, #4]
 8005c52:	d1f1      	bne.n	8005c38 <_write+0x1a>
 8005c54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c58:	2000      	movs	r0, #0
 8005c5a:	f7ff bf55 	b.w	8005b08 <error>

08005c5e <_swiclose>:
 8005c5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c60:	2402      	movs	r4, #2
 8005c62:	9001      	str	r0, [sp, #4]
 8005c64:	ad01      	add	r5, sp, #4
 8005c66:	4620      	mov	r0, r4
 8005c68:	4629      	mov	r1, r5
 8005c6a:	beab      	bkpt	0x00ab
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f7ff ff58 	bl	8005b24 <checkerror>
 8005c74:	b003      	add	sp, #12
 8005c76:	bd30      	pop	{r4, r5, pc}

08005c78 <_close>:
 8005c78:	b538      	push	{r3, r4, r5, lr}
 8005c7a:	4605      	mov	r5, r0
 8005c7c:	f7ff ff2a 	bl	8005ad4 <findslot>
 8005c80:	4604      	mov	r4, r0
 8005c82:	b930      	cbnz	r0, 8005c92 <_close+0x1a>
 8005c84:	f000 fa5a 	bl	800613c <__errno>
 8005c88:	2309      	movs	r3, #9
 8005c8a:	6003      	str	r3, [r0, #0]
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c90:	bd38      	pop	{r3, r4, r5, pc}
 8005c92:	3d01      	subs	r5, #1
 8005c94:	2d01      	cmp	r5, #1
 8005c96:	d809      	bhi.n	8005cac <_close+0x34>
 8005c98:	4b07      	ldr	r3, [pc, #28]	@ (8005cb8 <_close+0x40>)
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d104      	bne.n	8005cac <_close+0x34>
 8005ca2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ca6:	6023      	str	r3, [r4, #0]
 8005ca8:	2000      	movs	r0, #0
 8005caa:	e7f1      	b.n	8005c90 <_close+0x18>
 8005cac:	6820      	ldr	r0, [r4, #0]
 8005cae:	f7ff ffd6 	bl	8005c5e <_swiclose>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d0f5      	beq.n	8005ca2 <_close+0x2a>
 8005cb6:	e7eb      	b.n	8005c90 <_close+0x18>
 8005cb8:	20025be0 	.word	0x20025be0

08005cbc <_swistat>:
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	460c      	mov	r4, r1
 8005cc0:	f7ff ff08 	bl	8005ad4 <findslot>
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	b930      	cbnz	r0, 8005cd6 <_swistat+0x1a>
 8005cc8:	f000 fa38 	bl	800613c <__errno>
 8005ccc:	2309      	movs	r3, #9
 8005cce:	6003      	str	r3, [r0, #0]
 8005cd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cd4:	bd70      	pop	{r4, r5, r6, pc}
 8005cd6:	6863      	ldr	r3, [r4, #4]
 8005cd8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005cdc:	6063      	str	r3, [r4, #4]
 8005cde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ce2:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005ce4:	260c      	movs	r6, #12
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	4629      	mov	r1, r5
 8005cea:	beab      	bkpt	0x00ab
 8005cec:	4605      	mov	r5, r0
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f7ff ff18 	bl	8005b24 <checkerror>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	d0eb      	beq.n	8005cd0 <_swistat+0x14>
 8005cf8:	6120      	str	r0, [r4, #16]
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	e7ea      	b.n	8005cd4 <_swistat+0x18>

08005cfe <_stat>:
 8005cfe:	b538      	push	{r3, r4, r5, lr}
 8005d00:	460d      	mov	r5, r1
 8005d02:	4604      	mov	r4, r0
 8005d04:	2258      	movs	r2, #88	@ 0x58
 8005d06:	2100      	movs	r1, #0
 8005d08:	4628      	mov	r0, r5
 8005d0a:	f000 fa0f 	bl	800612c <memset>
 8005d0e:	4620      	mov	r0, r4
 8005d10:	2100      	movs	r1, #0
 8005d12:	f000 f811 	bl	8005d38 <_swiopen>
 8005d16:	1c43      	adds	r3, r0, #1
 8005d18:	4604      	mov	r4, r0
 8005d1a:	d00b      	beq.n	8005d34 <_stat+0x36>
 8005d1c:	686b      	ldr	r3, [r5, #4]
 8005d1e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005d22:	606b      	str	r3, [r5, #4]
 8005d24:	4629      	mov	r1, r5
 8005d26:	f7ff ffc9 	bl	8005cbc <_swistat>
 8005d2a:	4605      	mov	r5, r0
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f7ff ffa3 	bl	8005c78 <_close>
 8005d32:	462c      	mov	r4, r5
 8005d34:	4620      	mov	r0, r4
 8005d36:	bd38      	pop	{r3, r4, r5, pc}

08005d38 <_swiopen>:
 8005d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3c:	4f29      	ldr	r7, [pc, #164]	@ (8005de4 <_swiopen+0xac>)
 8005d3e:	b096      	sub	sp, #88	@ 0x58
 8005d40:	4682      	mov	sl, r0
 8005d42:	460e      	mov	r6, r1
 8005d44:	2400      	movs	r4, #0
 8005d46:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8005d50:	d00c      	beq.n	8005d6c <_swiopen+0x34>
 8005d52:	3401      	adds	r4, #1
 8005d54:	2c14      	cmp	r4, #20
 8005d56:	d1f6      	bne.n	8005d46 <_swiopen+0xe>
 8005d58:	f000 f9f0 	bl	800613c <__errno>
 8005d5c:	2318      	movs	r3, #24
 8005d5e:	6003      	str	r3, [r0, #0]
 8005d60:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005d64:	4620      	mov	r0, r4
 8005d66:	b016      	add	sp, #88	@ 0x58
 8005d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d6c:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8005d70:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005d74:	46e9      	mov	r9, sp
 8005d76:	d109      	bne.n	8005d8c <_swiopen+0x54>
 8005d78:	4649      	mov	r1, r9
 8005d7a:	4650      	mov	r0, sl
 8005d7c:	f7ff ffbf 	bl	8005cfe <_stat>
 8005d80:	3001      	adds	r0, #1
 8005d82:	d003      	beq.n	8005d8c <_swiopen+0x54>
 8005d84:	f000 f9da 	bl	800613c <__errno>
 8005d88:	2311      	movs	r3, #17
 8005d8a:	e7e8      	b.n	8005d5e <_swiopen+0x26>
 8005d8c:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8005d90:	f240 6301 	movw	r3, #1537	@ 0x601
 8005d94:	07b2      	lsls	r2, r6, #30
 8005d96:	bf48      	it	mi
 8005d98:	f045 0502 	orrmi.w	r5, r5, #2
 8005d9c:	421e      	tst	r6, r3
 8005d9e:	bf18      	it	ne
 8005da0:	f045 0504 	orrne.w	r5, r5, #4
 8005da4:	0733      	lsls	r3, r6, #28
 8005da6:	bf48      	it	mi
 8005da8:	f025 0504 	bicmi.w	r5, r5, #4
 8005dac:	4650      	mov	r0, sl
 8005dae:	bf48      	it	mi
 8005db0:	f045 0508 	orrmi.w	r5, r5, #8
 8005db4:	f8cd a000 	str.w	sl, [sp]
 8005db8:	f7fa fa18 	bl	80001ec <strlen>
 8005dbc:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8005dc0:	2501      	movs	r5, #1
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	beab      	bkpt	0x00ab
 8005dc8:	4605      	mov	r5, r0
 8005dca:	2d00      	cmp	r5, #0
 8005dcc:	db05      	blt.n	8005dda <_swiopen+0xa2>
 8005dce:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8005dd2:	4447      	add	r7, r8
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	607b      	str	r3, [r7, #4]
 8005dd8:	e7c4      	b.n	8005d64 <_swiopen+0x2c>
 8005dda:	4628      	mov	r0, r5
 8005ddc:	f7ff fe94 	bl	8005b08 <error>
 8005de0:	4604      	mov	r4, r0
 8005de2:	e7bf      	b.n	8005d64 <_swiopen+0x2c>
 8005de4:	20025be0 	.word	0x20025be0

08005de8 <_get_semihosting_exts>:
 8005de8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005dec:	4606      	mov	r6, r0
 8005dee:	460f      	mov	r7, r1
 8005df0:	4829      	ldr	r0, [pc, #164]	@ (8005e98 <_get_semihosting_exts+0xb0>)
 8005df2:	2100      	movs	r1, #0
 8005df4:	4615      	mov	r5, r2
 8005df6:	f7ff ff9f 	bl	8005d38 <_swiopen>
 8005dfa:	462a      	mov	r2, r5
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	2100      	movs	r1, #0
 8005e00:	4630      	mov	r0, r6
 8005e02:	f000 f993 	bl	800612c <memset>
 8005e06:	1c63      	adds	r3, r4, #1
 8005e08:	d014      	beq.n	8005e34 <_get_semihosting_exts+0x4c>
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f7ff fe62 	bl	8005ad4 <findslot>
 8005e10:	f04f 080c 	mov.w	r8, #12
 8005e14:	4681      	mov	r9, r0
 8005e16:	4640      	mov	r0, r8
 8005e18:	4649      	mov	r1, r9
 8005e1a:	beab      	bkpt	0x00ab
 8005e1c:	4680      	mov	r8, r0
 8005e1e:	4640      	mov	r0, r8
 8005e20:	f7ff fe80 	bl	8005b24 <checkerror>
 8005e24:	2803      	cmp	r0, #3
 8005e26:	dd02      	ble.n	8005e2e <_get_semihosting_exts+0x46>
 8005e28:	1ec3      	subs	r3, r0, #3
 8005e2a:	42ab      	cmp	r3, r5
 8005e2c:	dc07      	bgt.n	8005e3e <_get_semihosting_exts+0x56>
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f7ff ff22 	bl	8005c78 <_close>
 8005e34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e38:	b003      	add	sp, #12
 8005e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e3e:	2204      	movs	r2, #4
 8005e40:	eb0d 0102 	add.w	r1, sp, r2
 8005e44:	4620      	mov	r0, r4
 8005e46:	f7ff fe82 	bl	8005b4e <_read>
 8005e4a:	2803      	cmp	r0, #3
 8005e4c:	ddef      	ble.n	8005e2e <_get_semihosting_exts+0x46>
 8005e4e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005e52:	2b53      	cmp	r3, #83	@ 0x53
 8005e54:	d1eb      	bne.n	8005e2e <_get_semihosting_exts+0x46>
 8005e56:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005e5a:	2b48      	cmp	r3, #72	@ 0x48
 8005e5c:	d1e7      	bne.n	8005e2e <_get_semihosting_exts+0x46>
 8005e5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005e62:	2b46      	cmp	r3, #70	@ 0x46
 8005e64:	d1e3      	bne.n	8005e2e <_get_semihosting_exts+0x46>
 8005e66:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005e6a:	2b42      	cmp	r3, #66	@ 0x42
 8005e6c:	d1df      	bne.n	8005e2e <_get_semihosting_exts+0x46>
 8005e6e:	2201      	movs	r2, #1
 8005e70:	4639      	mov	r1, r7
 8005e72:	4620      	mov	r0, r4
 8005e74:	f7ff fe85 	bl	8005b82 <_swilseek>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	dbd8      	blt.n	8005e2e <_get_semihosting_exts+0x46>
 8005e7c:	462a      	mov	r2, r5
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4620      	mov	r0, r4
 8005e82:	f7ff fe64 	bl	8005b4e <_read>
 8005e86:	4605      	mov	r5, r0
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f7ff fef5 	bl	8005c78 <_close>
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f7ff fe48 	bl	8005b24 <checkerror>
 8005e94:	e7d0      	b.n	8005e38 <_get_semihosting_exts+0x50>
 8005e96:	bf00      	nop
 8005e98:	080064e0 	.word	0x080064e0

08005e9c <initialise_semihosting_exts>:
 8005e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e9e:	4d0a      	ldr	r5, [pc, #40]	@ (8005ec8 <initialise_semihosting_exts+0x2c>)
 8005ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8005ecc <initialise_semihosting_exts+0x30>)
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	a801      	add	r0, sp, #4
 8005ea8:	6029      	str	r1, [r5, #0]
 8005eaa:	6022      	str	r2, [r4, #0]
 8005eac:	f7ff ff9c 	bl	8005de8 <_get_semihosting_exts>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	dd07      	ble.n	8005ec4 <initialise_semihosting_exts+0x28>
 8005eb4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005eb8:	f003 0201 	and.w	r2, r3, #1
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	602a      	str	r2, [r5, #0]
 8005ec2:	6023      	str	r3, [r4, #0]
 8005ec4:	b003      	add	sp, #12
 8005ec6:	bd30      	pop	{r4, r5, pc}
 8005ec8:	20000014 	.word	0x20000014
 8005ecc:	20000010 	.word	0x20000010

08005ed0 <_has_ext_stdout_stderr>:
 8005ed0:	b510      	push	{r4, lr}
 8005ed2:	4c04      	ldr	r4, [pc, #16]	@ (8005ee4 <_has_ext_stdout_stderr+0x14>)
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	da01      	bge.n	8005ede <_has_ext_stdout_stderr+0xe>
 8005eda:	f7ff ffdf 	bl	8005e9c <initialise_semihosting_exts>
 8005ede:	6820      	ldr	r0, [r4, #0]
 8005ee0:	bd10      	pop	{r4, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20000010 	.word	0x20000010

08005ee8 <initialise_monitor_handles>:
 8005ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eec:	b085      	sub	sp, #20
 8005eee:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8005fa0 <initialise_monitor_handles+0xb8>
 8005ef2:	f8cd 9004 	str.w	r9, [sp, #4]
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	2400      	movs	r4, #0
 8005efa:	9303      	str	r3, [sp, #12]
 8005efc:	af01      	add	r7, sp, #4
 8005efe:	9402      	str	r4, [sp, #8]
 8005f00:	2501      	movs	r5, #1
 8005f02:	4628      	mov	r0, r5
 8005f04:	4639      	mov	r1, r7
 8005f06:	beab      	bkpt	0x00ab
 8005f08:	4605      	mov	r5, r0
 8005f0a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8005fa4 <initialise_monitor_handles+0xbc>
 8005f0e:	4623      	mov	r3, r4
 8005f10:	4c20      	ldr	r4, [pc, #128]	@ (8005f94 <initialise_monitor_handles+0xac>)
 8005f12:	f8c8 5000 	str.w	r5, [r8]
 8005f16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f1a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	2b14      	cmp	r3, #20
 8005f22:	d1fa      	bne.n	8005f1a <initialise_monitor_handles+0x32>
 8005f24:	f7ff ffd4 	bl	8005ed0 <_has_ext_stdout_stderr>
 8005f28:	4d1b      	ldr	r5, [pc, #108]	@ (8005f98 <initialise_monitor_handles+0xb0>)
 8005f2a:	b1d0      	cbz	r0, 8005f62 <initialise_monitor_handles+0x7a>
 8005f2c:	f04f 0a03 	mov.w	sl, #3
 8005f30:	2304      	movs	r3, #4
 8005f32:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f36:	2601      	movs	r6, #1
 8005f38:	f8cd a00c 	str.w	sl, [sp, #12]
 8005f3c:	9302      	str	r3, [sp, #8]
 8005f3e:	4630      	mov	r0, r6
 8005f40:	4639      	mov	r1, r7
 8005f42:	beab      	bkpt	0x00ab
 8005f44:	4683      	mov	fp, r0
 8005f46:	4b15      	ldr	r3, [pc, #84]	@ (8005f9c <initialise_monitor_handles+0xb4>)
 8005f48:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f4c:	f8c3 b000 	str.w	fp, [r3]
 8005f50:	2308      	movs	r3, #8
 8005f52:	f8cd a00c 	str.w	sl, [sp, #12]
 8005f56:	9302      	str	r3, [sp, #8]
 8005f58:	4630      	mov	r0, r6
 8005f5a:	4639      	mov	r1, r7
 8005f5c:	beab      	bkpt	0x00ab
 8005f5e:	4606      	mov	r6, r0
 8005f60:	602e      	str	r6, [r5, #0]
 8005f62:	682b      	ldr	r3, [r5, #0]
 8005f64:	3301      	adds	r3, #1
 8005f66:	bf02      	ittt	eq
 8005f68:	4b0c      	ldreq	r3, [pc, #48]	@ (8005f9c <initialise_monitor_handles+0xb4>)
 8005f6a:	681b      	ldreq	r3, [r3, #0]
 8005f6c:	602b      	streq	r3, [r5, #0]
 8005f6e:	2600      	movs	r6, #0
 8005f70:	f8d8 3000 	ldr.w	r3, [r8]
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	6066      	str	r6, [r4, #4]
 8005f78:	f7ff ffaa 	bl	8005ed0 <_has_ext_stdout_stderr>
 8005f7c:	b130      	cbz	r0, 8005f8c <initialise_monitor_handles+0xa4>
 8005f7e:	4b07      	ldr	r3, [pc, #28]	@ (8005f9c <initialise_monitor_handles+0xb4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8005f86:	682b      	ldr	r3, [r5, #0]
 8005f88:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8005f8c:	b005      	add	sp, #20
 8005f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f92:	bf00      	nop
 8005f94:	20025be0 	.word	0x20025be0
 8005f98:	20025bd4 	.word	0x20025bd4
 8005f9c:	20025bd8 	.word	0x20025bd8
 8005fa0:	080064f6 	.word	0x080064f6
 8005fa4:	20025bdc 	.word	0x20025bdc

08005fa8 <std>:
 8005fa8:	2300      	movs	r3, #0
 8005faa:	b510      	push	{r4, lr}
 8005fac:	4604      	mov	r4, r0
 8005fae:	e9c0 3300 	strd	r3, r3, [r0]
 8005fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fb6:	6083      	str	r3, [r0, #8]
 8005fb8:	8181      	strh	r1, [r0, #12]
 8005fba:	6643      	str	r3, [r0, #100]	@ 0x64
 8005fbc:	81c2      	strh	r2, [r0, #14]
 8005fbe:	6183      	str	r3, [r0, #24]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	2208      	movs	r2, #8
 8005fc4:	305c      	adds	r0, #92	@ 0x5c
 8005fc6:	f000 f8b1 	bl	800612c <memset>
 8005fca:	4b0d      	ldr	r3, [pc, #52]	@ (8006000 <std+0x58>)
 8005fcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8005fce:	4b0d      	ldr	r3, [pc, #52]	@ (8006004 <std+0x5c>)
 8005fd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006008 <std+0x60>)
 8005fd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800600c <std+0x64>)
 8005fd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005fda:	4b0d      	ldr	r3, [pc, #52]	@ (8006010 <std+0x68>)
 8005fdc:	6224      	str	r4, [r4, #32]
 8005fde:	429c      	cmp	r4, r3
 8005fe0:	d006      	beq.n	8005ff0 <std+0x48>
 8005fe2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005fe6:	4294      	cmp	r4, r2
 8005fe8:	d002      	beq.n	8005ff0 <std+0x48>
 8005fea:	33d0      	adds	r3, #208	@ 0xd0
 8005fec:	429c      	cmp	r4, r3
 8005fee:	d105      	bne.n	8005ffc <std+0x54>
 8005ff0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff8:	f000 b8ca 	b.w	8006190 <__retarget_lock_init_recursive>
 8005ffc:	bd10      	pop	{r4, pc}
 8005ffe:	bf00      	nop
 8006000:	08006309 	.word	0x08006309
 8006004:	0800632b 	.word	0x0800632b
 8006008:	08006363 	.word	0x08006363
 800600c:	08006387 	.word	0x08006387
 8006010:	20025c80 	.word	0x20025c80

08006014 <stdio_exit_handler>:
 8006014:	4a02      	ldr	r2, [pc, #8]	@ (8006020 <stdio_exit_handler+0xc>)
 8006016:	4903      	ldr	r1, [pc, #12]	@ (8006024 <stdio_exit_handler+0x10>)
 8006018:	4803      	ldr	r0, [pc, #12]	@ (8006028 <stdio_exit_handler+0x14>)
 800601a:	f000 b869 	b.w	80060f0 <_fwalk_sglue>
 800601e:	bf00      	nop
 8006020:	20000018 	.word	0x20000018
 8006024:	080062a1 	.word	0x080062a1
 8006028:	20000028 	.word	0x20000028

0800602c <cleanup_stdio>:
 800602c:	6841      	ldr	r1, [r0, #4]
 800602e:	4b0c      	ldr	r3, [pc, #48]	@ (8006060 <cleanup_stdio+0x34>)
 8006030:	4299      	cmp	r1, r3
 8006032:	b510      	push	{r4, lr}
 8006034:	4604      	mov	r4, r0
 8006036:	d001      	beq.n	800603c <cleanup_stdio+0x10>
 8006038:	f000 f932 	bl	80062a0 <_fflush_r>
 800603c:	68a1      	ldr	r1, [r4, #8]
 800603e:	4b09      	ldr	r3, [pc, #36]	@ (8006064 <cleanup_stdio+0x38>)
 8006040:	4299      	cmp	r1, r3
 8006042:	d002      	beq.n	800604a <cleanup_stdio+0x1e>
 8006044:	4620      	mov	r0, r4
 8006046:	f000 f92b 	bl	80062a0 <_fflush_r>
 800604a:	68e1      	ldr	r1, [r4, #12]
 800604c:	4b06      	ldr	r3, [pc, #24]	@ (8006068 <cleanup_stdio+0x3c>)
 800604e:	4299      	cmp	r1, r3
 8006050:	d004      	beq.n	800605c <cleanup_stdio+0x30>
 8006052:	4620      	mov	r0, r4
 8006054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006058:	f000 b922 	b.w	80062a0 <_fflush_r>
 800605c:	bd10      	pop	{r4, pc}
 800605e:	bf00      	nop
 8006060:	20025c80 	.word	0x20025c80
 8006064:	20025ce8 	.word	0x20025ce8
 8006068:	20025d50 	.word	0x20025d50

0800606c <global_stdio_init.part.0>:
 800606c:	b510      	push	{r4, lr}
 800606e:	4b0b      	ldr	r3, [pc, #44]	@ (800609c <global_stdio_init.part.0+0x30>)
 8006070:	4c0b      	ldr	r4, [pc, #44]	@ (80060a0 <global_stdio_init.part.0+0x34>)
 8006072:	4a0c      	ldr	r2, [pc, #48]	@ (80060a4 <global_stdio_init.part.0+0x38>)
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	4620      	mov	r0, r4
 8006078:	2200      	movs	r2, #0
 800607a:	2104      	movs	r1, #4
 800607c:	f7ff ff94 	bl	8005fa8 <std>
 8006080:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006084:	2201      	movs	r2, #1
 8006086:	2109      	movs	r1, #9
 8006088:	f7ff ff8e 	bl	8005fa8 <std>
 800608c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006090:	2202      	movs	r2, #2
 8006092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006096:	2112      	movs	r1, #18
 8006098:	f7ff bf86 	b.w	8005fa8 <std>
 800609c:	20025db8 	.word	0x20025db8
 80060a0:	20025c80 	.word	0x20025c80
 80060a4:	08006015 	.word	0x08006015

080060a8 <__sfp_lock_acquire>:
 80060a8:	4801      	ldr	r0, [pc, #4]	@ (80060b0 <__sfp_lock_acquire+0x8>)
 80060aa:	f000 b872 	b.w	8006192 <__retarget_lock_acquire_recursive>
 80060ae:	bf00      	nop
 80060b0:	20025dbd 	.word	0x20025dbd

080060b4 <__sfp_lock_release>:
 80060b4:	4801      	ldr	r0, [pc, #4]	@ (80060bc <__sfp_lock_release+0x8>)
 80060b6:	f000 b86d 	b.w	8006194 <__retarget_lock_release_recursive>
 80060ba:	bf00      	nop
 80060bc:	20025dbd 	.word	0x20025dbd

080060c0 <__sinit>:
 80060c0:	b510      	push	{r4, lr}
 80060c2:	4604      	mov	r4, r0
 80060c4:	f7ff fff0 	bl	80060a8 <__sfp_lock_acquire>
 80060c8:	6a23      	ldr	r3, [r4, #32]
 80060ca:	b11b      	cbz	r3, 80060d4 <__sinit+0x14>
 80060cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d0:	f7ff bff0 	b.w	80060b4 <__sfp_lock_release>
 80060d4:	4b04      	ldr	r3, [pc, #16]	@ (80060e8 <__sinit+0x28>)
 80060d6:	6223      	str	r3, [r4, #32]
 80060d8:	4b04      	ldr	r3, [pc, #16]	@ (80060ec <__sinit+0x2c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1f5      	bne.n	80060cc <__sinit+0xc>
 80060e0:	f7ff ffc4 	bl	800606c <global_stdio_init.part.0>
 80060e4:	e7f2      	b.n	80060cc <__sinit+0xc>
 80060e6:	bf00      	nop
 80060e8:	0800602d 	.word	0x0800602d
 80060ec:	20025db8 	.word	0x20025db8

080060f0 <_fwalk_sglue>:
 80060f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060f4:	4607      	mov	r7, r0
 80060f6:	4688      	mov	r8, r1
 80060f8:	4614      	mov	r4, r2
 80060fa:	2600      	movs	r6, #0
 80060fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006100:	f1b9 0901 	subs.w	r9, r9, #1
 8006104:	d505      	bpl.n	8006112 <_fwalk_sglue+0x22>
 8006106:	6824      	ldr	r4, [r4, #0]
 8006108:	2c00      	cmp	r4, #0
 800610a:	d1f7      	bne.n	80060fc <_fwalk_sglue+0xc>
 800610c:	4630      	mov	r0, r6
 800610e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006112:	89ab      	ldrh	r3, [r5, #12]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d907      	bls.n	8006128 <_fwalk_sglue+0x38>
 8006118:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800611c:	3301      	adds	r3, #1
 800611e:	d003      	beq.n	8006128 <_fwalk_sglue+0x38>
 8006120:	4629      	mov	r1, r5
 8006122:	4638      	mov	r0, r7
 8006124:	47c0      	blx	r8
 8006126:	4306      	orrs	r6, r0
 8006128:	3568      	adds	r5, #104	@ 0x68
 800612a:	e7e9      	b.n	8006100 <_fwalk_sglue+0x10>

0800612c <memset>:
 800612c:	4402      	add	r2, r0
 800612e:	4603      	mov	r3, r0
 8006130:	4293      	cmp	r3, r2
 8006132:	d100      	bne.n	8006136 <memset+0xa>
 8006134:	4770      	bx	lr
 8006136:	f803 1b01 	strb.w	r1, [r3], #1
 800613a:	e7f9      	b.n	8006130 <memset+0x4>

0800613c <__errno>:
 800613c:	4b01      	ldr	r3, [pc, #4]	@ (8006144 <__errno+0x8>)
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	20000024 	.word	0x20000024

08006148 <__libc_init_array>:
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	4d0d      	ldr	r5, [pc, #52]	@ (8006180 <__libc_init_array+0x38>)
 800614c:	4c0d      	ldr	r4, [pc, #52]	@ (8006184 <__libc_init_array+0x3c>)
 800614e:	1b64      	subs	r4, r4, r5
 8006150:	10a4      	asrs	r4, r4, #2
 8006152:	2600      	movs	r6, #0
 8006154:	42a6      	cmp	r6, r4
 8006156:	d109      	bne.n	800616c <__libc_init_array+0x24>
 8006158:	4d0b      	ldr	r5, [pc, #44]	@ (8006188 <__libc_init_array+0x40>)
 800615a:	4c0c      	ldr	r4, [pc, #48]	@ (800618c <__libc_init_array+0x44>)
 800615c:	f000 f9a8 	bl	80064b0 <_init>
 8006160:	1b64      	subs	r4, r4, r5
 8006162:	10a4      	asrs	r4, r4, #2
 8006164:	2600      	movs	r6, #0
 8006166:	42a6      	cmp	r6, r4
 8006168:	d105      	bne.n	8006176 <__libc_init_array+0x2e>
 800616a:	bd70      	pop	{r4, r5, r6, pc}
 800616c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006170:	4798      	blx	r3
 8006172:	3601      	adds	r6, #1
 8006174:	e7ee      	b.n	8006154 <__libc_init_array+0xc>
 8006176:	f855 3b04 	ldr.w	r3, [r5], #4
 800617a:	4798      	blx	r3
 800617c:	3601      	adds	r6, #1
 800617e:	e7f2      	b.n	8006166 <__libc_init_array+0x1e>
 8006180:	08006504 	.word	0x08006504
 8006184:	08006504 	.word	0x08006504
 8006188:	08006504 	.word	0x08006504
 800618c:	08006508 	.word	0x08006508

08006190 <__retarget_lock_init_recursive>:
 8006190:	4770      	bx	lr

08006192 <__retarget_lock_acquire_recursive>:
 8006192:	4770      	bx	lr

08006194 <__retarget_lock_release_recursive>:
 8006194:	4770      	bx	lr
	...

08006198 <__sflush_r>:
 8006198:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800619c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061a0:	0716      	lsls	r6, r2, #28
 80061a2:	4605      	mov	r5, r0
 80061a4:	460c      	mov	r4, r1
 80061a6:	d454      	bmi.n	8006252 <__sflush_r+0xba>
 80061a8:	684b      	ldr	r3, [r1, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	dc02      	bgt.n	80061b4 <__sflush_r+0x1c>
 80061ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	dd48      	ble.n	8006246 <__sflush_r+0xae>
 80061b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061b6:	2e00      	cmp	r6, #0
 80061b8:	d045      	beq.n	8006246 <__sflush_r+0xae>
 80061ba:	2300      	movs	r3, #0
 80061bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80061c0:	682f      	ldr	r7, [r5, #0]
 80061c2:	6a21      	ldr	r1, [r4, #32]
 80061c4:	602b      	str	r3, [r5, #0]
 80061c6:	d030      	beq.n	800622a <__sflush_r+0x92>
 80061c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061ca:	89a3      	ldrh	r3, [r4, #12]
 80061cc:	0759      	lsls	r1, r3, #29
 80061ce:	d505      	bpl.n	80061dc <__sflush_r+0x44>
 80061d0:	6863      	ldr	r3, [r4, #4]
 80061d2:	1ad2      	subs	r2, r2, r3
 80061d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061d6:	b10b      	cbz	r3, 80061dc <__sflush_r+0x44>
 80061d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061da:	1ad2      	subs	r2, r2, r3
 80061dc:	2300      	movs	r3, #0
 80061de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061e0:	6a21      	ldr	r1, [r4, #32]
 80061e2:	4628      	mov	r0, r5
 80061e4:	47b0      	blx	r6
 80061e6:	1c43      	adds	r3, r0, #1
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	d106      	bne.n	80061fa <__sflush_r+0x62>
 80061ec:	6829      	ldr	r1, [r5, #0]
 80061ee:	291d      	cmp	r1, #29
 80061f0:	d82b      	bhi.n	800624a <__sflush_r+0xb2>
 80061f2:	4a2a      	ldr	r2, [pc, #168]	@ (800629c <__sflush_r+0x104>)
 80061f4:	410a      	asrs	r2, r1
 80061f6:	07d6      	lsls	r6, r2, #31
 80061f8:	d427      	bmi.n	800624a <__sflush_r+0xb2>
 80061fa:	2200      	movs	r2, #0
 80061fc:	6062      	str	r2, [r4, #4]
 80061fe:	04d9      	lsls	r1, r3, #19
 8006200:	6922      	ldr	r2, [r4, #16]
 8006202:	6022      	str	r2, [r4, #0]
 8006204:	d504      	bpl.n	8006210 <__sflush_r+0x78>
 8006206:	1c42      	adds	r2, r0, #1
 8006208:	d101      	bne.n	800620e <__sflush_r+0x76>
 800620a:	682b      	ldr	r3, [r5, #0]
 800620c:	b903      	cbnz	r3, 8006210 <__sflush_r+0x78>
 800620e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006210:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006212:	602f      	str	r7, [r5, #0]
 8006214:	b1b9      	cbz	r1, 8006246 <__sflush_r+0xae>
 8006216:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800621a:	4299      	cmp	r1, r3
 800621c:	d002      	beq.n	8006224 <__sflush_r+0x8c>
 800621e:	4628      	mov	r0, r5
 8006220:	f000 f8fc 	bl	800641c <_free_r>
 8006224:	2300      	movs	r3, #0
 8006226:	6363      	str	r3, [r4, #52]	@ 0x34
 8006228:	e00d      	b.n	8006246 <__sflush_r+0xae>
 800622a:	2301      	movs	r3, #1
 800622c:	4628      	mov	r0, r5
 800622e:	47b0      	blx	r6
 8006230:	4602      	mov	r2, r0
 8006232:	1c50      	adds	r0, r2, #1
 8006234:	d1c9      	bne.n	80061ca <__sflush_r+0x32>
 8006236:	682b      	ldr	r3, [r5, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0c6      	beq.n	80061ca <__sflush_r+0x32>
 800623c:	2b1d      	cmp	r3, #29
 800623e:	d001      	beq.n	8006244 <__sflush_r+0xac>
 8006240:	2b16      	cmp	r3, #22
 8006242:	d11e      	bne.n	8006282 <__sflush_r+0xea>
 8006244:	602f      	str	r7, [r5, #0]
 8006246:	2000      	movs	r0, #0
 8006248:	e022      	b.n	8006290 <__sflush_r+0xf8>
 800624a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800624e:	b21b      	sxth	r3, r3
 8006250:	e01b      	b.n	800628a <__sflush_r+0xf2>
 8006252:	690f      	ldr	r7, [r1, #16]
 8006254:	2f00      	cmp	r7, #0
 8006256:	d0f6      	beq.n	8006246 <__sflush_r+0xae>
 8006258:	0793      	lsls	r3, r2, #30
 800625a:	680e      	ldr	r6, [r1, #0]
 800625c:	bf08      	it	eq
 800625e:	694b      	ldreq	r3, [r1, #20]
 8006260:	600f      	str	r7, [r1, #0]
 8006262:	bf18      	it	ne
 8006264:	2300      	movne	r3, #0
 8006266:	eba6 0807 	sub.w	r8, r6, r7
 800626a:	608b      	str	r3, [r1, #8]
 800626c:	f1b8 0f00 	cmp.w	r8, #0
 8006270:	dde9      	ble.n	8006246 <__sflush_r+0xae>
 8006272:	6a21      	ldr	r1, [r4, #32]
 8006274:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006276:	4643      	mov	r3, r8
 8006278:	463a      	mov	r2, r7
 800627a:	4628      	mov	r0, r5
 800627c:	47b0      	blx	r6
 800627e:	2800      	cmp	r0, #0
 8006280:	dc08      	bgt.n	8006294 <__sflush_r+0xfc>
 8006282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800628a:	81a3      	strh	r3, [r4, #12]
 800628c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006294:	4407      	add	r7, r0
 8006296:	eba8 0800 	sub.w	r8, r8, r0
 800629a:	e7e7      	b.n	800626c <__sflush_r+0xd4>
 800629c:	dfbffffe 	.word	0xdfbffffe

080062a0 <_fflush_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	690b      	ldr	r3, [r1, #16]
 80062a4:	4605      	mov	r5, r0
 80062a6:	460c      	mov	r4, r1
 80062a8:	b913      	cbnz	r3, 80062b0 <_fflush_r+0x10>
 80062aa:	2500      	movs	r5, #0
 80062ac:	4628      	mov	r0, r5
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	b118      	cbz	r0, 80062ba <_fflush_r+0x1a>
 80062b2:	6a03      	ldr	r3, [r0, #32]
 80062b4:	b90b      	cbnz	r3, 80062ba <_fflush_r+0x1a>
 80062b6:	f7ff ff03 	bl	80060c0 <__sinit>
 80062ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d0f3      	beq.n	80062aa <_fflush_r+0xa>
 80062c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062c4:	07d0      	lsls	r0, r2, #31
 80062c6:	d404      	bmi.n	80062d2 <_fflush_r+0x32>
 80062c8:	0599      	lsls	r1, r3, #22
 80062ca:	d402      	bmi.n	80062d2 <_fflush_r+0x32>
 80062cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062ce:	f7ff ff60 	bl	8006192 <__retarget_lock_acquire_recursive>
 80062d2:	4628      	mov	r0, r5
 80062d4:	4621      	mov	r1, r4
 80062d6:	f7ff ff5f 	bl	8006198 <__sflush_r>
 80062da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062dc:	07da      	lsls	r2, r3, #31
 80062de:	4605      	mov	r5, r0
 80062e0:	d4e4      	bmi.n	80062ac <_fflush_r+0xc>
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	059b      	lsls	r3, r3, #22
 80062e6:	d4e1      	bmi.n	80062ac <_fflush_r+0xc>
 80062e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062ea:	f7ff ff53 	bl	8006194 <__retarget_lock_release_recursive>
 80062ee:	e7dd      	b.n	80062ac <_fflush_r+0xc>

080062f0 <__malloc_lock>:
 80062f0:	4801      	ldr	r0, [pc, #4]	@ (80062f8 <__malloc_lock+0x8>)
 80062f2:	f7ff bf4e 	b.w	8006192 <__retarget_lock_acquire_recursive>
 80062f6:	bf00      	nop
 80062f8:	20025dbc 	.word	0x20025dbc

080062fc <__malloc_unlock>:
 80062fc:	4801      	ldr	r0, [pc, #4]	@ (8006304 <__malloc_unlock+0x8>)
 80062fe:	f7ff bf49 	b.w	8006194 <__retarget_lock_release_recursive>
 8006302:	bf00      	nop
 8006304:	20025dbc 	.word	0x20025dbc

08006308 <__sread>:
 8006308:	b510      	push	{r4, lr}
 800630a:	460c      	mov	r4, r1
 800630c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006310:	f000 f860 	bl	80063d4 <_read_r>
 8006314:	2800      	cmp	r0, #0
 8006316:	bfab      	itete	ge
 8006318:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800631a:	89a3      	ldrhlt	r3, [r4, #12]
 800631c:	181b      	addge	r3, r3, r0
 800631e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006322:	bfac      	ite	ge
 8006324:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006326:	81a3      	strhlt	r3, [r4, #12]
 8006328:	bd10      	pop	{r4, pc}

0800632a <__swrite>:
 800632a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800632e:	461f      	mov	r7, r3
 8006330:	898b      	ldrh	r3, [r1, #12]
 8006332:	05db      	lsls	r3, r3, #23
 8006334:	4605      	mov	r5, r0
 8006336:	460c      	mov	r4, r1
 8006338:	4616      	mov	r6, r2
 800633a:	d505      	bpl.n	8006348 <__swrite+0x1e>
 800633c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006340:	2302      	movs	r3, #2
 8006342:	2200      	movs	r2, #0
 8006344:	f000 f834 	bl	80063b0 <_lseek_r>
 8006348:	89a3      	ldrh	r3, [r4, #12]
 800634a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800634e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006352:	81a3      	strh	r3, [r4, #12]
 8006354:	4632      	mov	r2, r6
 8006356:	463b      	mov	r3, r7
 8006358:	4628      	mov	r0, r5
 800635a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800635e:	f000 b84b 	b.w	80063f8 <_write_r>

08006362 <__sseek>:
 8006362:	b510      	push	{r4, lr}
 8006364:	460c      	mov	r4, r1
 8006366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800636a:	f000 f821 	bl	80063b0 <_lseek_r>
 800636e:	1c43      	adds	r3, r0, #1
 8006370:	89a3      	ldrh	r3, [r4, #12]
 8006372:	bf15      	itete	ne
 8006374:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006376:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800637a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800637e:	81a3      	strheq	r3, [r4, #12]
 8006380:	bf18      	it	ne
 8006382:	81a3      	strhne	r3, [r4, #12]
 8006384:	bd10      	pop	{r4, pc}

08006386 <__sclose>:
 8006386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800638a:	f000 b801 	b.w	8006390 <_close_r>
	...

08006390 <_close_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4d06      	ldr	r5, [pc, #24]	@ (80063ac <_close_r+0x1c>)
 8006394:	2300      	movs	r3, #0
 8006396:	4604      	mov	r4, r0
 8006398:	4608      	mov	r0, r1
 800639a:	602b      	str	r3, [r5, #0]
 800639c:	f7ff fc6c 	bl	8005c78 <_close>
 80063a0:	1c43      	adds	r3, r0, #1
 80063a2:	d102      	bne.n	80063aa <_close_r+0x1a>
 80063a4:	682b      	ldr	r3, [r5, #0]
 80063a6:	b103      	cbz	r3, 80063aa <_close_r+0x1a>
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	bd38      	pop	{r3, r4, r5, pc}
 80063ac:	20025dc4 	.word	0x20025dc4

080063b0 <_lseek_r>:
 80063b0:	b538      	push	{r3, r4, r5, lr}
 80063b2:	4d07      	ldr	r5, [pc, #28]	@ (80063d0 <_lseek_r+0x20>)
 80063b4:	4604      	mov	r4, r0
 80063b6:	4608      	mov	r0, r1
 80063b8:	4611      	mov	r1, r2
 80063ba:	2200      	movs	r2, #0
 80063bc:	602a      	str	r2, [r5, #0]
 80063be:	461a      	mov	r2, r3
 80063c0:	f7ff fc1b 	bl	8005bfa <_lseek>
 80063c4:	1c43      	adds	r3, r0, #1
 80063c6:	d102      	bne.n	80063ce <_lseek_r+0x1e>
 80063c8:	682b      	ldr	r3, [r5, #0]
 80063ca:	b103      	cbz	r3, 80063ce <_lseek_r+0x1e>
 80063cc:	6023      	str	r3, [r4, #0]
 80063ce:	bd38      	pop	{r3, r4, r5, pc}
 80063d0:	20025dc4 	.word	0x20025dc4

080063d4 <_read_r>:
 80063d4:	b538      	push	{r3, r4, r5, lr}
 80063d6:	4d07      	ldr	r5, [pc, #28]	@ (80063f4 <_read_r+0x20>)
 80063d8:	4604      	mov	r4, r0
 80063da:	4608      	mov	r0, r1
 80063dc:	4611      	mov	r1, r2
 80063de:	2200      	movs	r2, #0
 80063e0:	602a      	str	r2, [r5, #0]
 80063e2:	461a      	mov	r2, r3
 80063e4:	f7ff fbb3 	bl	8005b4e <_read>
 80063e8:	1c43      	adds	r3, r0, #1
 80063ea:	d102      	bne.n	80063f2 <_read_r+0x1e>
 80063ec:	682b      	ldr	r3, [r5, #0]
 80063ee:	b103      	cbz	r3, 80063f2 <_read_r+0x1e>
 80063f0:	6023      	str	r3, [r4, #0]
 80063f2:	bd38      	pop	{r3, r4, r5, pc}
 80063f4:	20025dc4 	.word	0x20025dc4

080063f8 <_write_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4d07      	ldr	r5, [pc, #28]	@ (8006418 <_write_r+0x20>)
 80063fc:	4604      	mov	r4, r0
 80063fe:	4608      	mov	r0, r1
 8006400:	4611      	mov	r1, r2
 8006402:	2200      	movs	r2, #0
 8006404:	602a      	str	r2, [r5, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	f7ff fc09 	bl	8005c1e <_write>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_write_r+0x1e>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	b103      	cbz	r3, 8006416 <_write_r+0x1e>
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	20025dc4 	.word	0x20025dc4

0800641c <_free_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4605      	mov	r5, r0
 8006420:	2900      	cmp	r1, #0
 8006422:	d041      	beq.n	80064a8 <_free_r+0x8c>
 8006424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006428:	1f0c      	subs	r4, r1, #4
 800642a:	2b00      	cmp	r3, #0
 800642c:	bfb8      	it	lt
 800642e:	18e4      	addlt	r4, r4, r3
 8006430:	f7ff ff5e 	bl	80062f0 <__malloc_lock>
 8006434:	4a1d      	ldr	r2, [pc, #116]	@ (80064ac <_free_r+0x90>)
 8006436:	6813      	ldr	r3, [r2, #0]
 8006438:	b933      	cbnz	r3, 8006448 <_free_r+0x2c>
 800643a:	6063      	str	r3, [r4, #4]
 800643c:	6014      	str	r4, [r2, #0]
 800643e:	4628      	mov	r0, r5
 8006440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006444:	f7ff bf5a 	b.w	80062fc <__malloc_unlock>
 8006448:	42a3      	cmp	r3, r4
 800644a:	d908      	bls.n	800645e <_free_r+0x42>
 800644c:	6820      	ldr	r0, [r4, #0]
 800644e:	1821      	adds	r1, r4, r0
 8006450:	428b      	cmp	r3, r1
 8006452:	bf01      	itttt	eq
 8006454:	6819      	ldreq	r1, [r3, #0]
 8006456:	685b      	ldreq	r3, [r3, #4]
 8006458:	1809      	addeq	r1, r1, r0
 800645a:	6021      	streq	r1, [r4, #0]
 800645c:	e7ed      	b.n	800643a <_free_r+0x1e>
 800645e:	461a      	mov	r2, r3
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	b10b      	cbz	r3, 8006468 <_free_r+0x4c>
 8006464:	42a3      	cmp	r3, r4
 8006466:	d9fa      	bls.n	800645e <_free_r+0x42>
 8006468:	6811      	ldr	r1, [r2, #0]
 800646a:	1850      	adds	r0, r2, r1
 800646c:	42a0      	cmp	r0, r4
 800646e:	d10b      	bne.n	8006488 <_free_r+0x6c>
 8006470:	6820      	ldr	r0, [r4, #0]
 8006472:	4401      	add	r1, r0
 8006474:	1850      	adds	r0, r2, r1
 8006476:	4283      	cmp	r3, r0
 8006478:	6011      	str	r1, [r2, #0]
 800647a:	d1e0      	bne.n	800643e <_free_r+0x22>
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	6053      	str	r3, [r2, #4]
 8006482:	4408      	add	r0, r1
 8006484:	6010      	str	r0, [r2, #0]
 8006486:	e7da      	b.n	800643e <_free_r+0x22>
 8006488:	d902      	bls.n	8006490 <_free_r+0x74>
 800648a:	230c      	movs	r3, #12
 800648c:	602b      	str	r3, [r5, #0]
 800648e:	e7d6      	b.n	800643e <_free_r+0x22>
 8006490:	6820      	ldr	r0, [r4, #0]
 8006492:	1821      	adds	r1, r4, r0
 8006494:	428b      	cmp	r3, r1
 8006496:	bf04      	itt	eq
 8006498:	6819      	ldreq	r1, [r3, #0]
 800649a:	685b      	ldreq	r3, [r3, #4]
 800649c:	6063      	str	r3, [r4, #4]
 800649e:	bf04      	itt	eq
 80064a0:	1809      	addeq	r1, r1, r0
 80064a2:	6021      	streq	r1, [r4, #0]
 80064a4:	6054      	str	r4, [r2, #4]
 80064a6:	e7ca      	b.n	800643e <_free_r+0x22>
 80064a8:	bd38      	pop	{r3, r4, r5, pc}
 80064aa:	bf00      	nop
 80064ac:	20025dc0 	.word	0x20025dc0

080064b0 <_init>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	bf00      	nop
 80064b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b6:	bc08      	pop	{r3}
 80064b8:	469e      	mov	lr, r3
 80064ba:	4770      	bx	lr

080064bc <_fini>:
 80064bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064be:	bf00      	nop
 80064c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c2:	bc08      	pop	{r3}
 80064c4:	469e      	mov	lr, r3
 80064c6:	4770      	bx	lr
